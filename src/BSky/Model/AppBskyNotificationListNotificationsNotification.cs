/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// AppBskyNotificationListNotificationsNotification
    /// </summary>
    [DataContract(Name = "app.bsky.notification.listNotifications.notification")]
    public partial class AppBskyNotificationListNotificationsNotification : IValidatableObject
    {
        /// <summary>
        /// Expected values are &#39;like&#39;, &#39;repost&#39;, &#39;follow&#39;, &#39;mention&#39;, &#39;reply&#39;, &#39;quote&#39;, and &#39;starterpack-joined&#39;.
        /// </summary>
        /// <value>Expected values are &#39;like&#39;, &#39;repost&#39;, &#39;follow&#39;, &#39;mention&#39;, &#39;reply&#39;, &#39;quote&#39;, and &#39;starterpack-joined&#39;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum Like for value: like
            /// </summary>
            [EnumMember(Value = "like")]
            Like = 1,

            /// <summary>
            /// Enum Repost for value: repost
            /// </summary>
            [EnumMember(Value = "repost")]
            Repost = 2,

            /// <summary>
            /// Enum Follow for value: follow
            /// </summary>
            [EnumMember(Value = "follow")]
            Follow = 3,

            /// <summary>
            /// Enum Mention for value: mention
            /// </summary>
            [EnumMember(Value = "mention")]
            Mention = 4,

            /// <summary>
            /// Enum Reply for value: reply
            /// </summary>
            [EnumMember(Value = "reply")]
            Reply = 5,

            /// <summary>
            /// Enum Quote for value: quote
            /// </summary>
            [EnumMember(Value = "quote")]
            Quote = 6,

            /// <summary>
            /// Enum StarterpackJoined for value: starterpack-joined
            /// </summary>
            [EnumMember(Value = "starterpack-joined")]
            StarterpackJoined = 7
        }


        /// <summary>
        /// Expected values are &#39;like&#39;, &#39;repost&#39;, &#39;follow&#39;, &#39;mention&#39;, &#39;reply&#39;, &#39;quote&#39;, and &#39;starterpack-joined&#39;.
        /// </summary>
        /// <value>Expected values are &#39;like&#39;, &#39;repost&#39;, &#39;follow&#39;, &#39;mention&#39;, &#39;reply&#39;, &#39;quote&#39;, and &#39;starterpack-joined&#39;.</value>
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public ReasonEnum Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyNotificationListNotificationsNotification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppBskyNotificationListNotificationsNotification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyNotificationListNotificationsNotification" /> class.
        /// </summary>
        /// <param name="uri">uri (required).</param>
        /// <param name="cid">cid (required).</param>
        /// <param name="author">author (required).</param>
        /// <param name="reason">Expected values are &#39;like&#39;, &#39;repost&#39;, &#39;follow&#39;, &#39;mention&#39;, &#39;reply&#39;, &#39;quote&#39;, and &#39;starterpack-joined&#39;. (required).</param>
        /// <param name="reasonSubject">reasonSubject.</param>
        /// <param name="record">record (required).</param>
        /// <param name="isRead">isRead (required).</param>
        /// <param name="indexedAt">indexedAt (required).</param>
        /// <param name="labels">labels.</param>
        public AppBskyNotificationListNotificationsNotification(string uri = default(string), string cid = default(string), AppBskyActorDefsProfileView author = default(AppBskyActorDefsProfileView), ReasonEnum reason = default(ReasonEnum), string reasonSubject = default(string), Object record = default(Object), bool isRead = default(bool), DateTime indexedAt = default(DateTime), List<ComAtprotoLabelDefsLabel> labels = default(List<ComAtprotoLabelDefsLabel>))
        {
            // to ensure "uri" is required (not null)
            if (uri == null)
            {
                throw new ArgumentNullException("uri is a required property for AppBskyNotificationListNotificationsNotification and cannot be null");
            }
            this.Uri = uri;
            // to ensure "cid" is required (not null)
            if (cid == null)
            {
                throw new ArgumentNullException("cid is a required property for AppBskyNotificationListNotificationsNotification and cannot be null");
            }
            this.Cid = cid;
            // to ensure "author" is required (not null)
            if (author == null)
            {
                throw new ArgumentNullException("author is a required property for AppBskyNotificationListNotificationsNotification and cannot be null");
            }
            this.Author = author;
            this.Reason = reason;
            // to ensure "record" is required (not null)
            if (record == null)
            {
                throw new ArgumentNullException("record is a required property for AppBskyNotificationListNotificationsNotification and cannot be null");
            }
            this.Record = record;
            this.IsRead = isRead;
            this.IndexedAt = indexedAt;
            this.ReasonSubject = reasonSubject;
            this.Labels = labels;
        }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name = "uri", IsRequired = true, EmitDefaultValue = true)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets Cid
        /// </summary>
        [DataMember(Name = "cid", IsRequired = true, EmitDefaultValue = true)]
        public string Cid { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name = "author", IsRequired = true, EmitDefaultValue = true)]
        public AppBskyActorDefsProfileView Author { get; set; }

        /// <summary>
        /// Gets or Sets ReasonSubject
        /// </summary>
        [DataMember(Name = "reasonSubject", EmitDefaultValue = false)]
        public string ReasonSubject { get; set; }

        /// <summary>
        /// Gets or Sets Record
        /// </summary>
        [DataMember(Name = "record", IsRequired = true, EmitDefaultValue = true)]
        public Object Record { get; set; }

        /// <summary>
        /// Gets or Sets IsRead
        /// </summary>
        [DataMember(Name = "isRead", IsRequired = true, EmitDefaultValue = true)]
        public bool IsRead { get; set; }

        /// <summary>
        /// Gets or Sets IndexedAt
        /// </summary>
        [DataMember(Name = "indexedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime IndexedAt { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "labels", EmitDefaultValue = false)]
        public List<ComAtprotoLabelDefsLabel> Labels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppBskyNotificationListNotificationsNotification {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ReasonSubject: ").Append(ReasonSubject).Append("\n");
            sb.Append("  Record: ").Append(Record).Append("\n");
            sb.Append("  IsRead: ").Append(IsRead).Append("\n");
            sb.Append("  IndexedAt: ").Append(IndexedAt).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
