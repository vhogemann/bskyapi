/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// AppBskyActorProfile
    /// </summary>
    [DataContract(Name = "app.bsky.actor.profile")]
    public partial class AppBskyActorProfile : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyActorProfile" /> class.
        /// </summary>
        /// <param name="displayName">displayName.</param>
        /// <param name="description">Free-form profile description text..</param>
        /// <param name="avatar">avatar.</param>
        /// <param name="banner">banner.</param>
        /// <param name="labels">labels.</param>
        /// <param name="joinedViaStarterPack">joinedViaStarterPack.</param>
        /// <param name="createdAt">createdAt.</param>
        public AppBskyActorProfile(string displayName = default(string), string description = default(string), System.IO.Stream avatar = default(System.IO.Stream), System.IO.Stream banner = default(System.IO.Stream), AppBskyActorProfileLabels labels = default(AppBskyActorProfileLabels), ComAtprotoRepoStrongRef joinedViaStarterPack = default(ComAtprotoRepoStrongRef), DateTime createdAt = default(DateTime))
        {
            this.DisplayName = displayName;
            this.Description = description;
            this.Avatar = avatar;
            this.Banner = banner;
            this.Labels = labels;
            this.JoinedViaStarterPack = joinedViaStarterPack;
            this.CreatedAt = createdAt;
        }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Free-form profile description text.
        /// </summary>
        /// <value>Free-form profile description text.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [DataMember(Name = "avatar", EmitDefaultValue = false)]
        public System.IO.Stream Avatar { get; set; }

        /// <summary>
        /// Gets or Sets Banner
        /// </summary>
        [DataMember(Name = "banner", EmitDefaultValue = false)]
        public System.IO.Stream Banner { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "labels", EmitDefaultValue = false)]
        public AppBskyActorProfileLabels Labels { get; set; }

        /// <summary>
        /// Gets or Sets JoinedViaStarterPack
        /// </summary>
        [DataMember(Name = "joinedViaStarterPack", EmitDefaultValue = false)]
        public ComAtprotoRepoStrongRef JoinedViaStarterPack { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppBskyActorProfile {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Banner: ").Append(Banner).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  JoinedViaStarterPack: ").Append(JoinedViaStarterPack).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 640)
            {
                yield return new ValidationResult("Invalid value for DisplayName, length must be less than 640.", new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 2560)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 2560.", new [] { "Description" });
            }

            // Avatar (System.IO.Stream) maxLength
            if (this.Avatar != null && this.Avatar.Length > 1000000)
            {
                yield return new ValidationResult("Invalid value for Avatar, length must be less than 1000000.", new [] { "Avatar" });
            }

            // Banner (System.IO.Stream) maxLength
            if (this.Banner != null && this.Banner.Length > 1000000)
            {
                yield return new ValidationResult("Invalid value for Banner, length must be less than 1000000.", new [] { "Banner" });
            }

            yield break;
        }
    }

}
