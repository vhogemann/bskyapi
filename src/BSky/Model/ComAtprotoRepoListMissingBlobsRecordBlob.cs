/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// ComAtprotoRepoListMissingBlobsRecordBlob
    /// </summary>
    [DataContract(Name = "com.atproto.repo.listMissingBlobs.recordBlob")]
    public partial class ComAtprotoRepoListMissingBlobsRecordBlob : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoRepoListMissingBlobsRecordBlob" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComAtprotoRepoListMissingBlobsRecordBlob() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoRepoListMissingBlobsRecordBlob" /> class.
        /// </summary>
        /// <param name="cid">cid (required).</param>
        /// <param name="recordUri">recordUri (required).</param>
        public ComAtprotoRepoListMissingBlobsRecordBlob(string cid = default(string), string recordUri = default(string))
        {
            // to ensure "cid" is required (not null)
            if (cid == null)
            {
                throw new ArgumentNullException("cid is a required property for ComAtprotoRepoListMissingBlobsRecordBlob and cannot be null");
            }
            this.Cid = cid;
            // to ensure "recordUri" is required (not null)
            if (recordUri == null)
            {
                throw new ArgumentNullException("recordUri is a required property for ComAtprotoRepoListMissingBlobsRecordBlob and cannot be null");
            }
            this.RecordUri = recordUri;
        }

        /// <summary>
        /// Gets or Sets Cid
        /// </summary>
        [DataMember(Name = "cid", IsRequired = true, EmitDefaultValue = true)]
        public string Cid { get; set; }

        /// <summary>
        /// Gets or Sets RecordUri
        /// </summary>
        [DataMember(Name = "recordUri", IsRequired = true, EmitDefaultValue = true)]
        public string RecordUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComAtprotoRepoListMissingBlobsRecordBlob {\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  RecordUri: ").Append(RecordUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
