/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// AppBskyVideoGetUploadLimits200Response
    /// </summary>
    [DataContract(Name = "app_bsky_video_getUploadLimits_200_response")]
    public partial class AppBskyVideoGetUploadLimits200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyVideoGetUploadLimits200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppBskyVideoGetUploadLimits200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyVideoGetUploadLimits200Response" /> class.
        /// </summary>
        /// <param name="canUpload">canUpload (required).</param>
        /// <param name="remainingDailyVideos">remainingDailyVideos.</param>
        /// <param name="remainingDailyBytes">remainingDailyBytes.</param>
        /// <param name="message">message.</param>
        /// <param name="error">error.</param>
        public AppBskyVideoGetUploadLimits200Response(bool canUpload = default(bool), int remainingDailyVideos = default(int), int remainingDailyBytes = default(int), string message = default(string), string error = default(string))
        {
            this.CanUpload = canUpload;
            this.RemainingDailyVideos = remainingDailyVideos;
            this.RemainingDailyBytes = remainingDailyBytes;
            this.Message = message;
            this.Error = error;
        }

        /// <summary>
        /// Gets or Sets CanUpload
        /// </summary>
        [DataMember(Name = "canUpload", IsRequired = true, EmitDefaultValue = true)]
        public bool CanUpload { get; set; }

        /// <summary>
        /// Gets or Sets RemainingDailyVideos
        /// </summary>
        [DataMember(Name = "remainingDailyVideos", EmitDefaultValue = false)]
        public int RemainingDailyVideos { get; set; }

        /// <summary>
        /// Gets or Sets RemainingDailyBytes
        /// </summary>
        [DataMember(Name = "remainingDailyBytes", EmitDefaultValue = false)]
        public int RemainingDailyBytes { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppBskyVideoGetUploadLimits200Response {\n");
            sb.Append("  CanUpload: ").Append(CanUpload).Append("\n");
            sb.Append("  RemainingDailyVideos: ").Append(RemainingDailyVideos).Append("\n");
            sb.Append("  RemainingDailyBytes: ").Append(RemainingDailyBytes).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
