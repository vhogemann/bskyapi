/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// ToolsOzoneServerGetConfig200Response
    /// </summary>
    [DataContract(Name = "tools_ozone_server_getConfig_200_response")]
    public partial class ToolsOzoneServerGetConfig200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneServerGetConfig200Response" /> class.
        /// </summary>
        /// <param name="appview">appview.</param>
        /// <param name="pds">pds.</param>
        /// <param name="blobDivert">blobDivert.</param>
        /// <param name="chat">chat.</param>
        /// <param name="viewer">viewer.</param>
        public ToolsOzoneServerGetConfig200Response(ToolsOzoneServerGetConfigServiceConfig appview = default(ToolsOzoneServerGetConfigServiceConfig), ToolsOzoneServerGetConfigServiceConfig pds = default(ToolsOzoneServerGetConfigServiceConfig), ToolsOzoneServerGetConfigServiceConfig blobDivert = default(ToolsOzoneServerGetConfigServiceConfig), ToolsOzoneServerGetConfigServiceConfig chat = default(ToolsOzoneServerGetConfigServiceConfig), ToolsOzoneServerGetConfigViewerConfig viewer = default(ToolsOzoneServerGetConfigViewerConfig))
        {
            this.Appview = appview;
            this.Pds = pds;
            this.BlobDivert = blobDivert;
            this.Chat = chat;
            this.Viewer = viewer;
        }

        /// <summary>
        /// Gets or Sets Appview
        /// </summary>
        [DataMember(Name = "appview", EmitDefaultValue = false)]
        public ToolsOzoneServerGetConfigServiceConfig Appview { get; set; }

        /// <summary>
        /// Gets or Sets Pds
        /// </summary>
        [DataMember(Name = "pds", EmitDefaultValue = false)]
        public ToolsOzoneServerGetConfigServiceConfig Pds { get; set; }

        /// <summary>
        /// Gets or Sets BlobDivert
        /// </summary>
        [DataMember(Name = "blobDivert", EmitDefaultValue = false)]
        public ToolsOzoneServerGetConfigServiceConfig BlobDivert { get; set; }

        /// <summary>
        /// Gets or Sets Chat
        /// </summary>
        [DataMember(Name = "chat", EmitDefaultValue = false)]
        public ToolsOzoneServerGetConfigServiceConfig Chat { get; set; }

        /// <summary>
        /// Gets or Sets Viewer
        /// </summary>
        [DataMember(Name = "viewer", EmitDefaultValue = false)]
        public ToolsOzoneServerGetConfigViewerConfig Viewer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolsOzoneServerGetConfig200Response {\n");
            sb.Append("  Appview: ").Append(Appview).Append("\n");
            sb.Append("  Pds: ").Append(Pds).Append("\n");
            sb.Append("  BlobDivert: ").Append(BlobDivert).Append("\n");
            sb.Append("  Chat: ").Append(Chat).Append("\n");
            sb.Append("  Viewer: ").Append(Viewer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
