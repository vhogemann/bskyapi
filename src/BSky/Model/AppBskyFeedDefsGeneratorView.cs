/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// AppBskyFeedDefsGeneratorView
    /// </summary>
    [DataContract(Name = "app.bsky.feed.defs.generatorView")]
    public partial class AppBskyFeedDefsGeneratorView : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyFeedDefsGeneratorView" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppBskyFeedDefsGeneratorView() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyFeedDefsGeneratorView" /> class.
        /// </summary>
        /// <param name="uri">uri (required).</param>
        /// <param name="cid">cid (required).</param>
        /// <param name="did">did (required).</param>
        /// <param name="creator">creator (required).</param>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="description">description.</param>
        /// <param name="descriptionFacets">descriptionFacets.</param>
        /// <param name="avatar">avatar.</param>
        /// <param name="likeCount">likeCount.</param>
        /// <param name="acceptsInteractions">acceptsInteractions.</param>
        /// <param name="labels">labels.</param>
        /// <param name="viewer">viewer.</param>
        /// <param name="indexedAt">indexedAt (required).</param>
        public AppBskyFeedDefsGeneratorView(string uri = default(string), string cid = default(string), string did = default(string), AppBskyActorDefsProfileView creator = default(AppBskyActorDefsProfileView), string displayName = default(string), string description = default(string), List<AppBskyRichtextFacet> descriptionFacets = default(List<AppBskyRichtextFacet>), string avatar = default(string), int likeCount = default(int), bool acceptsInteractions = default(bool), List<ComAtprotoLabelDefsLabel> labels = default(List<ComAtprotoLabelDefsLabel>), AppBskyFeedDefsGeneratorViewerState viewer = default(AppBskyFeedDefsGeneratorViewerState), DateTime indexedAt = default(DateTime))
        {
            // to ensure "uri" is required (not null)
            if (uri == null)
            {
                throw new ArgumentNullException("uri is a required property for AppBskyFeedDefsGeneratorView and cannot be null");
            }
            this.Uri = uri;
            // to ensure "cid" is required (not null)
            if (cid == null)
            {
                throw new ArgumentNullException("cid is a required property for AppBskyFeedDefsGeneratorView and cannot be null");
            }
            this.Cid = cid;
            // to ensure "did" is required (not null)
            if (did == null)
            {
                throw new ArgumentNullException("did is a required property for AppBskyFeedDefsGeneratorView and cannot be null");
            }
            this.Did = did;
            // to ensure "creator" is required (not null)
            if (creator == null)
            {
                throw new ArgumentNullException("creator is a required property for AppBskyFeedDefsGeneratorView and cannot be null");
            }
            this.Creator = creator;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for AppBskyFeedDefsGeneratorView and cannot be null");
            }
            this.DisplayName = displayName;
            this.IndexedAt = indexedAt;
            this.Description = description;
            this.DescriptionFacets = descriptionFacets;
            this.Avatar = avatar;
            this.LikeCount = likeCount;
            this.AcceptsInteractions = acceptsInteractions;
            this.Labels = labels;
            this.Viewer = viewer;
        }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name = "uri", IsRequired = true, EmitDefaultValue = true)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets Cid
        /// </summary>
        [DataMember(Name = "cid", IsRequired = true, EmitDefaultValue = true)]
        public string Cid { get; set; }

        /// <summary>
        /// Gets or Sets Did
        /// </summary>
        [DataMember(Name = "did", IsRequired = true, EmitDefaultValue = true)]
        public string Did { get; set; }

        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name = "creator", IsRequired = true, EmitDefaultValue = true)]
        public AppBskyActorDefsProfileView Creator { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionFacets
        /// </summary>
        [DataMember(Name = "descriptionFacets", EmitDefaultValue = false)]
        public List<AppBskyRichtextFacet> DescriptionFacets { get; set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [DataMember(Name = "avatar", EmitDefaultValue = false)]
        public string Avatar { get; set; }

        /// <summary>
        /// Gets or Sets LikeCount
        /// </summary>
        [DataMember(Name = "likeCount", EmitDefaultValue = false)]
        public int LikeCount { get; set; }

        /// <summary>
        /// Gets or Sets AcceptsInteractions
        /// </summary>
        [DataMember(Name = "acceptsInteractions", EmitDefaultValue = true)]
        public bool AcceptsInteractions { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "labels", EmitDefaultValue = false)]
        public List<ComAtprotoLabelDefsLabel> Labels { get; set; }

        /// <summary>
        /// Gets or Sets Viewer
        /// </summary>
        [DataMember(Name = "viewer", EmitDefaultValue = false)]
        public AppBskyFeedDefsGeneratorViewerState Viewer { get; set; }

        /// <summary>
        /// Gets or Sets IndexedAt
        /// </summary>
        [DataMember(Name = "indexedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime IndexedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppBskyFeedDefsGeneratorView {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  Did: ").Append(Did).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DescriptionFacets: ").Append(DescriptionFacets).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  LikeCount: ").Append(LikeCount).Append("\n");
            sb.Append("  AcceptsInteractions: ").Append(AcceptsInteractions).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Viewer: ").Append(Viewer).Append("\n");
            sb.Append("  IndexedAt: ").Append(IndexedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 3000)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 3000.", new [] { "Description" });
            }

            // LikeCount (int) minimum
            if (this.LikeCount < (int)0)
            {
                yield return new ValidationResult("Invalid value for LikeCount, must be a value greater than or equal to 0.", new [] { "LikeCount" });
            }

            yield break;
        }
    }

}
