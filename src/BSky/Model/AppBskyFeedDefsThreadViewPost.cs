/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// AppBskyFeedDefsThreadViewPost
    /// </summary>
    [DataContract(Name = "app.bsky.feed.defs.threadViewPost")]
    public partial class AppBskyFeedDefsThreadViewPost : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyFeedDefsThreadViewPost" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppBskyFeedDefsThreadViewPost() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyFeedDefsThreadViewPost" /> class.
        /// </summary>
        /// <param name="post">post (required).</param>
        /// <param name="parent">parent.</param>
        /// <param name="replies">replies.</param>
        public AppBskyFeedDefsThreadViewPost(AppBskyFeedDefsPostView post = default(AppBskyFeedDefsPostView), AppBskyFeedGetPostThread200ResponseThread parent = default(AppBskyFeedGetPostThread200ResponseThread), List<AppBskyFeedGetPostThread200ResponseThread> replies = default(List<AppBskyFeedGetPostThread200ResponseThread>))
        {
            // to ensure "post" is required (not null)
            if (post == null)
            {
                throw new ArgumentNullException("post is a required property for AppBskyFeedDefsThreadViewPost and cannot be null");
            }
            this.Post = post;
            this.Parent = parent;
            this.Replies = replies;
        }

        /// <summary>
        /// Gets or Sets Post
        /// </summary>
        [DataMember(Name = "post", IsRequired = true, EmitDefaultValue = true)]
        public AppBskyFeedDefsPostView Post { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public AppBskyFeedGetPostThread200ResponseThread Parent { get; set; }

        /// <summary>
        /// Gets or Sets Replies
        /// </summary>
        [DataMember(Name = "replies", EmitDefaultValue = false)]
        public List<AppBskyFeedGetPostThread200ResponseThread> Replies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppBskyFeedDefsThreadViewPost {\n");
            sb.Append("  Post: ").Append(Post).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Replies: ").Append(Replies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
