/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// ChatBskyConvoDefsConvoView
    /// </summary>
    [DataContract(Name = "chat.bsky.convo.defs.convoView")]
    public partial class ChatBskyConvoDefsConvoView : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatBskyConvoDefsConvoView" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChatBskyConvoDefsConvoView() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatBskyConvoDefsConvoView" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="rev">rev (required).</param>
        /// <param name="members">members (required).</param>
        /// <param name="lastMessage">lastMessage.</param>
        /// <param name="muted">muted (required).</param>
        /// <param name="unreadCount">unreadCount (required).</param>
        public ChatBskyConvoDefsConvoView(string id = default(string), string rev = default(string), List<ChatBskyActorDefsProfileViewBasic> members = default(List<ChatBskyActorDefsProfileViewBasic>), ChatBskyConvoGetMessages200ResponseMessagesInner lastMessage = default(ChatBskyConvoGetMessages200ResponseMessagesInner), bool muted = default(bool), int unreadCount = default(int))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ChatBskyConvoDefsConvoView and cannot be null");
            }
            this.Id = id;
            // to ensure "rev" is required (not null)
            if (rev == null)
            {
                throw new ArgumentNullException("rev is a required property for ChatBskyConvoDefsConvoView and cannot be null");
            }
            this.Rev = rev;
            // to ensure "members" is required (not null)
            if (members == null)
            {
                throw new ArgumentNullException("members is a required property for ChatBskyConvoDefsConvoView and cannot be null");
            }
            this.Members = members;
            this.Muted = muted;
            this.UnreadCount = unreadCount;
            this.LastMessage = lastMessage;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Rev
        /// </summary>
        [DataMember(Name = "rev", IsRequired = true, EmitDefaultValue = true)]
        public string Rev { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name = "members", IsRequired = true, EmitDefaultValue = true)]
        public List<ChatBskyActorDefsProfileViewBasic> Members { get; set; }

        /// <summary>
        /// Gets or Sets LastMessage
        /// </summary>
        [DataMember(Name = "lastMessage", EmitDefaultValue = false)]
        public ChatBskyConvoGetMessages200ResponseMessagesInner LastMessage { get; set; }

        /// <summary>
        /// Gets or Sets Muted
        /// </summary>
        [DataMember(Name = "muted", IsRequired = true, EmitDefaultValue = true)]
        public bool Muted { get; set; }

        /// <summary>
        /// Gets or Sets UnreadCount
        /// </summary>
        [DataMember(Name = "unreadCount", IsRequired = true, EmitDefaultValue = true)]
        public int UnreadCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChatBskyConvoDefsConvoView {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Rev: ").Append(Rev).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  LastMessage: ").Append(LastMessage).Append("\n");
            sb.Append("  Muted: ").Append(Muted).Append("\n");
            sb.Append("  UnreadCount: ").Append(UnreadCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
