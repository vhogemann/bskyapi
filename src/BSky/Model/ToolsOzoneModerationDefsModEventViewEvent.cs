/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;
using System.Reflection;

namespace BSky.Model
{
    /// <summary>
    /// ToolsOzoneModerationDefsModEventViewEvent
    /// </summary>
    [JsonConverter(typeof(ToolsOzoneModerationDefsModEventViewEventJsonConverter))]
    [DataContract(Name = "tools_ozone_moderation_defs_modEventView_event")]
    public partial class ToolsOzoneModerationDefsModEventViewEvent : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventViewEvent" /> class
        /// with the <see cref="ToolsOzoneModerationDefsModEventTakedown" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ToolsOzoneModerationDefsModEventTakedown.</param>
        public ToolsOzoneModerationDefsModEventViewEvent(ToolsOzoneModerationDefsModEventTakedown actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventViewEvent" /> class
        /// with the <see cref="ToolsOzoneModerationDefsModEventReverseTakedown" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ToolsOzoneModerationDefsModEventReverseTakedown.</param>
        public ToolsOzoneModerationDefsModEventViewEvent(ToolsOzoneModerationDefsModEventReverseTakedown actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventViewEvent" /> class
        /// with the <see cref="ToolsOzoneModerationDefsModEventComment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ToolsOzoneModerationDefsModEventComment.</param>
        public ToolsOzoneModerationDefsModEventViewEvent(ToolsOzoneModerationDefsModEventComment actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventViewEvent" /> class
        /// with the <see cref="ToolsOzoneModerationDefsModEventReport" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ToolsOzoneModerationDefsModEventReport.</param>
        public ToolsOzoneModerationDefsModEventViewEvent(ToolsOzoneModerationDefsModEventReport actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventViewEvent" /> class
        /// with the <see cref="ToolsOzoneModerationDefsModEventLabel" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ToolsOzoneModerationDefsModEventLabel.</param>
        public ToolsOzoneModerationDefsModEventViewEvent(ToolsOzoneModerationDefsModEventLabel actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventViewEvent" /> class
        /// with the <see cref="ToolsOzoneModerationDefsModEventAcknowledge" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ToolsOzoneModerationDefsModEventAcknowledge.</param>
        public ToolsOzoneModerationDefsModEventViewEvent(ToolsOzoneModerationDefsModEventAcknowledge actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventViewEvent" /> class
        /// with the <see cref="ToolsOzoneModerationDefsModEventEscalate" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ToolsOzoneModerationDefsModEventEscalate.</param>
        public ToolsOzoneModerationDefsModEventViewEvent(ToolsOzoneModerationDefsModEventEscalate actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventViewEvent" /> class
        /// with the <see cref="ToolsOzoneModerationDefsModEventMute" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ToolsOzoneModerationDefsModEventMute.</param>
        public ToolsOzoneModerationDefsModEventViewEvent(ToolsOzoneModerationDefsModEventMute actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventViewEvent" /> class
        /// with the <see cref="ToolsOzoneModerationDefsModEventUnmute" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ToolsOzoneModerationDefsModEventUnmute.</param>
        public ToolsOzoneModerationDefsModEventViewEvent(ToolsOzoneModerationDefsModEventUnmute actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventViewEvent" /> class
        /// with the <see cref="ToolsOzoneModerationDefsModEventMuteReporter" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ToolsOzoneModerationDefsModEventMuteReporter.</param>
        public ToolsOzoneModerationDefsModEventViewEvent(ToolsOzoneModerationDefsModEventMuteReporter actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventViewEvent" /> class
        /// with the <see cref="ToolsOzoneModerationDefsModEventUnmuteReporter" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ToolsOzoneModerationDefsModEventUnmuteReporter.</param>
        public ToolsOzoneModerationDefsModEventViewEvent(ToolsOzoneModerationDefsModEventUnmuteReporter actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventViewEvent" /> class
        /// with the <see cref="ToolsOzoneModerationDefsModEventEmail" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ToolsOzoneModerationDefsModEventEmail.</param>
        public ToolsOzoneModerationDefsModEventViewEvent(ToolsOzoneModerationDefsModEventEmail actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventViewEvent" /> class
        /// with the <see cref="ToolsOzoneModerationDefsModEventResolveAppeal" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ToolsOzoneModerationDefsModEventResolveAppeal.</param>
        public ToolsOzoneModerationDefsModEventViewEvent(ToolsOzoneModerationDefsModEventResolveAppeal actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventViewEvent" /> class
        /// with the <see cref="ToolsOzoneModerationDefsModEventDivert" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ToolsOzoneModerationDefsModEventDivert.</param>
        public ToolsOzoneModerationDefsModEventViewEvent(ToolsOzoneModerationDefsModEventDivert actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventViewEvent" /> class
        /// with the <see cref="ToolsOzoneModerationDefsModEventTag" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ToolsOzoneModerationDefsModEventTag.</param>
        public ToolsOzoneModerationDefsModEventViewEvent(ToolsOzoneModerationDefsModEventTag actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(ToolsOzoneModerationDefsModEventAcknowledge) || value is ToolsOzoneModerationDefsModEventAcknowledge)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ToolsOzoneModerationDefsModEventComment) || value is ToolsOzoneModerationDefsModEventComment)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ToolsOzoneModerationDefsModEventDivert) || value is ToolsOzoneModerationDefsModEventDivert)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ToolsOzoneModerationDefsModEventEmail) || value is ToolsOzoneModerationDefsModEventEmail)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ToolsOzoneModerationDefsModEventEscalate) || value is ToolsOzoneModerationDefsModEventEscalate)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ToolsOzoneModerationDefsModEventLabel) || value is ToolsOzoneModerationDefsModEventLabel)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ToolsOzoneModerationDefsModEventMute) || value is ToolsOzoneModerationDefsModEventMute)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ToolsOzoneModerationDefsModEventMuteReporter) || value is ToolsOzoneModerationDefsModEventMuteReporter)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ToolsOzoneModerationDefsModEventReport) || value is ToolsOzoneModerationDefsModEventReport)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ToolsOzoneModerationDefsModEventResolveAppeal) || value is ToolsOzoneModerationDefsModEventResolveAppeal)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ToolsOzoneModerationDefsModEventReverseTakedown) || value is ToolsOzoneModerationDefsModEventReverseTakedown)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ToolsOzoneModerationDefsModEventTag) || value is ToolsOzoneModerationDefsModEventTag)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ToolsOzoneModerationDefsModEventTakedown) || value is ToolsOzoneModerationDefsModEventTakedown)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ToolsOzoneModerationDefsModEventUnmute) || value is ToolsOzoneModerationDefsModEventUnmute)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ToolsOzoneModerationDefsModEventUnmuteReporter) || value is ToolsOzoneModerationDefsModEventUnmuteReporter)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: ToolsOzoneModerationDefsModEventAcknowledge, ToolsOzoneModerationDefsModEventComment, ToolsOzoneModerationDefsModEventDivert, ToolsOzoneModerationDefsModEventEmail, ToolsOzoneModerationDefsModEventEscalate, ToolsOzoneModerationDefsModEventLabel, ToolsOzoneModerationDefsModEventMute, ToolsOzoneModerationDefsModEventMuteReporter, ToolsOzoneModerationDefsModEventReport, ToolsOzoneModerationDefsModEventResolveAppeal, ToolsOzoneModerationDefsModEventReverseTakedown, ToolsOzoneModerationDefsModEventTag, ToolsOzoneModerationDefsModEventTakedown, ToolsOzoneModerationDefsModEventUnmute, ToolsOzoneModerationDefsModEventUnmuteReporter");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `ToolsOzoneModerationDefsModEventTakedown`. If the actual instance is not `ToolsOzoneModerationDefsModEventTakedown`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventTakedown</returns>
        public ToolsOzoneModerationDefsModEventTakedown GetToolsOzoneModerationDefsModEventTakedown()
        {
            return (ToolsOzoneModerationDefsModEventTakedown)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ToolsOzoneModerationDefsModEventReverseTakedown`. If the actual instance is not `ToolsOzoneModerationDefsModEventReverseTakedown`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventReverseTakedown</returns>
        public ToolsOzoneModerationDefsModEventReverseTakedown GetToolsOzoneModerationDefsModEventReverseTakedown()
        {
            return (ToolsOzoneModerationDefsModEventReverseTakedown)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ToolsOzoneModerationDefsModEventComment`. If the actual instance is not `ToolsOzoneModerationDefsModEventComment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventComment</returns>
        public ToolsOzoneModerationDefsModEventComment GetToolsOzoneModerationDefsModEventComment()
        {
            return (ToolsOzoneModerationDefsModEventComment)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ToolsOzoneModerationDefsModEventReport`. If the actual instance is not `ToolsOzoneModerationDefsModEventReport`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventReport</returns>
        public ToolsOzoneModerationDefsModEventReport GetToolsOzoneModerationDefsModEventReport()
        {
            return (ToolsOzoneModerationDefsModEventReport)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ToolsOzoneModerationDefsModEventLabel`. If the actual instance is not `ToolsOzoneModerationDefsModEventLabel`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventLabel</returns>
        public ToolsOzoneModerationDefsModEventLabel GetToolsOzoneModerationDefsModEventLabel()
        {
            return (ToolsOzoneModerationDefsModEventLabel)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ToolsOzoneModerationDefsModEventAcknowledge`. If the actual instance is not `ToolsOzoneModerationDefsModEventAcknowledge`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventAcknowledge</returns>
        public ToolsOzoneModerationDefsModEventAcknowledge GetToolsOzoneModerationDefsModEventAcknowledge()
        {
            return (ToolsOzoneModerationDefsModEventAcknowledge)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ToolsOzoneModerationDefsModEventEscalate`. If the actual instance is not `ToolsOzoneModerationDefsModEventEscalate`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventEscalate</returns>
        public ToolsOzoneModerationDefsModEventEscalate GetToolsOzoneModerationDefsModEventEscalate()
        {
            return (ToolsOzoneModerationDefsModEventEscalate)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ToolsOzoneModerationDefsModEventMute`. If the actual instance is not `ToolsOzoneModerationDefsModEventMute`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventMute</returns>
        public ToolsOzoneModerationDefsModEventMute GetToolsOzoneModerationDefsModEventMute()
        {
            return (ToolsOzoneModerationDefsModEventMute)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ToolsOzoneModerationDefsModEventUnmute`. If the actual instance is not `ToolsOzoneModerationDefsModEventUnmute`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventUnmute</returns>
        public ToolsOzoneModerationDefsModEventUnmute GetToolsOzoneModerationDefsModEventUnmute()
        {
            return (ToolsOzoneModerationDefsModEventUnmute)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ToolsOzoneModerationDefsModEventMuteReporter`. If the actual instance is not `ToolsOzoneModerationDefsModEventMuteReporter`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventMuteReporter</returns>
        public ToolsOzoneModerationDefsModEventMuteReporter GetToolsOzoneModerationDefsModEventMuteReporter()
        {
            return (ToolsOzoneModerationDefsModEventMuteReporter)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ToolsOzoneModerationDefsModEventUnmuteReporter`. If the actual instance is not `ToolsOzoneModerationDefsModEventUnmuteReporter`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventUnmuteReporter</returns>
        public ToolsOzoneModerationDefsModEventUnmuteReporter GetToolsOzoneModerationDefsModEventUnmuteReporter()
        {
            return (ToolsOzoneModerationDefsModEventUnmuteReporter)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ToolsOzoneModerationDefsModEventEmail`. If the actual instance is not `ToolsOzoneModerationDefsModEventEmail`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventEmail</returns>
        public ToolsOzoneModerationDefsModEventEmail GetToolsOzoneModerationDefsModEventEmail()
        {
            return (ToolsOzoneModerationDefsModEventEmail)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ToolsOzoneModerationDefsModEventResolveAppeal`. If the actual instance is not `ToolsOzoneModerationDefsModEventResolveAppeal`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventResolveAppeal</returns>
        public ToolsOzoneModerationDefsModEventResolveAppeal GetToolsOzoneModerationDefsModEventResolveAppeal()
        {
            return (ToolsOzoneModerationDefsModEventResolveAppeal)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ToolsOzoneModerationDefsModEventDivert`. If the actual instance is not `ToolsOzoneModerationDefsModEventDivert`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventDivert</returns>
        public ToolsOzoneModerationDefsModEventDivert GetToolsOzoneModerationDefsModEventDivert()
        {
            return (ToolsOzoneModerationDefsModEventDivert)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ToolsOzoneModerationDefsModEventTag`. If the actual instance is not `ToolsOzoneModerationDefsModEventTag`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventTag</returns>
        public ToolsOzoneModerationDefsModEventTag GetToolsOzoneModerationDefsModEventTag()
        {
            return (ToolsOzoneModerationDefsModEventTag)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ToolsOzoneModerationDefsModEventViewEvent {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ToolsOzoneModerationDefsModEventViewEvent
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ToolsOzoneModerationDefsModEventViewEvent</returns>
        public static ToolsOzoneModerationDefsModEventViewEvent FromJson(string jsonString)
        {
            ToolsOzoneModerationDefsModEventViewEvent newToolsOzoneModerationDefsModEventViewEvent = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newToolsOzoneModerationDefsModEventViewEvent;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ToolsOzoneModerationDefsModEventAcknowledge).GetProperty("AdditionalProperties") == null)
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventAcknowledge>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings));
                }
                else
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventAcknowledge>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ToolsOzoneModerationDefsModEventAcknowledge");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ToolsOzoneModerationDefsModEventAcknowledge: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ToolsOzoneModerationDefsModEventComment).GetProperty("AdditionalProperties") == null)
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventComment>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings));
                }
                else
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventComment>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ToolsOzoneModerationDefsModEventComment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ToolsOzoneModerationDefsModEventComment: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ToolsOzoneModerationDefsModEventDivert).GetProperty("AdditionalProperties") == null)
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventDivert>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings));
                }
                else
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventDivert>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ToolsOzoneModerationDefsModEventDivert");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ToolsOzoneModerationDefsModEventDivert: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ToolsOzoneModerationDefsModEventEmail).GetProperty("AdditionalProperties") == null)
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventEmail>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings));
                }
                else
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventEmail>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ToolsOzoneModerationDefsModEventEmail");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ToolsOzoneModerationDefsModEventEmail: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ToolsOzoneModerationDefsModEventEscalate).GetProperty("AdditionalProperties") == null)
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventEscalate>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings));
                }
                else
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventEscalate>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ToolsOzoneModerationDefsModEventEscalate");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ToolsOzoneModerationDefsModEventEscalate: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ToolsOzoneModerationDefsModEventLabel).GetProperty("AdditionalProperties") == null)
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventLabel>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings));
                }
                else
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventLabel>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ToolsOzoneModerationDefsModEventLabel");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ToolsOzoneModerationDefsModEventLabel: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ToolsOzoneModerationDefsModEventMute).GetProperty("AdditionalProperties") == null)
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventMute>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings));
                }
                else
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventMute>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ToolsOzoneModerationDefsModEventMute");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ToolsOzoneModerationDefsModEventMute: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ToolsOzoneModerationDefsModEventMuteReporter).GetProperty("AdditionalProperties") == null)
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventMuteReporter>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings));
                }
                else
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventMuteReporter>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ToolsOzoneModerationDefsModEventMuteReporter");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ToolsOzoneModerationDefsModEventMuteReporter: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ToolsOzoneModerationDefsModEventReport).GetProperty("AdditionalProperties") == null)
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventReport>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings));
                }
                else
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventReport>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ToolsOzoneModerationDefsModEventReport");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ToolsOzoneModerationDefsModEventReport: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ToolsOzoneModerationDefsModEventResolveAppeal).GetProperty("AdditionalProperties") == null)
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventResolveAppeal>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings));
                }
                else
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventResolveAppeal>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ToolsOzoneModerationDefsModEventResolveAppeal");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ToolsOzoneModerationDefsModEventResolveAppeal: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ToolsOzoneModerationDefsModEventReverseTakedown).GetProperty("AdditionalProperties") == null)
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventReverseTakedown>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings));
                }
                else
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventReverseTakedown>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ToolsOzoneModerationDefsModEventReverseTakedown");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ToolsOzoneModerationDefsModEventReverseTakedown: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ToolsOzoneModerationDefsModEventTag).GetProperty("AdditionalProperties") == null)
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventTag>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings));
                }
                else
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventTag>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ToolsOzoneModerationDefsModEventTag");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ToolsOzoneModerationDefsModEventTag: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ToolsOzoneModerationDefsModEventTakedown).GetProperty("AdditionalProperties") == null)
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventTakedown>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings));
                }
                else
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventTakedown>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ToolsOzoneModerationDefsModEventTakedown");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ToolsOzoneModerationDefsModEventTakedown: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ToolsOzoneModerationDefsModEventUnmute).GetProperty("AdditionalProperties") == null)
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventUnmute>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings));
                }
                else
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventUnmute>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ToolsOzoneModerationDefsModEventUnmute");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ToolsOzoneModerationDefsModEventUnmute: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ToolsOzoneModerationDefsModEventUnmuteReporter).GetProperty("AdditionalProperties") == null)
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventUnmuteReporter>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.SerializerSettings));
                }
                else
                {
                    newToolsOzoneModerationDefsModEventViewEvent = new ToolsOzoneModerationDefsModEventViewEvent(JsonConvert.DeserializeObject<ToolsOzoneModerationDefsModEventUnmuteReporter>(jsonString, ToolsOzoneModerationDefsModEventViewEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ToolsOzoneModerationDefsModEventUnmuteReporter");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ToolsOzoneModerationDefsModEventUnmuteReporter: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newToolsOzoneModerationDefsModEventViewEvent;
        }


        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for ToolsOzoneModerationDefsModEventViewEvent
    /// </summary>
    public class ToolsOzoneModerationDefsModEventViewEventJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(ToolsOzoneModerationDefsModEventViewEvent).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return ToolsOzoneModerationDefsModEventViewEvent.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return ToolsOzoneModerationDefsModEventViewEvent.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
