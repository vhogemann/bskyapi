/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// ComAtprotoServerCheckAccountStatus200Response
    /// </summary>
    [DataContract(Name = "com_atproto_server_checkAccountStatus_200_response")]
    public partial class ComAtprotoServerCheckAccountStatus200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoServerCheckAccountStatus200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComAtprotoServerCheckAccountStatus200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoServerCheckAccountStatus200Response" /> class.
        /// </summary>
        /// <param name="activated">activated (required).</param>
        /// <param name="validDid">validDid (required).</param>
        /// <param name="repoCommit">repoCommit (required).</param>
        /// <param name="repoRev">repoRev (required).</param>
        /// <param name="repoBlocks">repoBlocks (required).</param>
        /// <param name="indexedRecords">indexedRecords (required).</param>
        /// <param name="privateStateValues">privateStateValues (required).</param>
        /// <param name="expectedBlobs">expectedBlobs (required).</param>
        /// <param name="importedBlobs">importedBlobs (required).</param>
        public ComAtprotoServerCheckAccountStatus200Response(bool activated = default(bool), bool validDid = default(bool), string repoCommit = default(string), string repoRev = default(string), int repoBlocks = default(int), int indexedRecords = default(int), int privateStateValues = default(int), int expectedBlobs = default(int), int importedBlobs = default(int))
        {
            this.Activated = activated;
            this.ValidDid = validDid;
            // to ensure "repoCommit" is required (not null)
            if (repoCommit == null)
            {
                throw new ArgumentNullException("repoCommit is a required property for ComAtprotoServerCheckAccountStatus200Response and cannot be null");
            }
            this.RepoCommit = repoCommit;
            // to ensure "repoRev" is required (not null)
            if (repoRev == null)
            {
                throw new ArgumentNullException("repoRev is a required property for ComAtprotoServerCheckAccountStatus200Response and cannot be null");
            }
            this.RepoRev = repoRev;
            this.RepoBlocks = repoBlocks;
            this.IndexedRecords = indexedRecords;
            this.PrivateStateValues = privateStateValues;
            this.ExpectedBlobs = expectedBlobs;
            this.ImportedBlobs = importedBlobs;
        }

        /// <summary>
        /// Gets or Sets Activated
        /// </summary>
        [DataMember(Name = "activated", IsRequired = true, EmitDefaultValue = true)]
        public bool Activated { get; set; }

        /// <summary>
        /// Gets or Sets ValidDid
        /// </summary>
        [DataMember(Name = "validDid", IsRequired = true, EmitDefaultValue = true)]
        public bool ValidDid { get; set; }

        /// <summary>
        /// Gets or Sets RepoCommit
        /// </summary>
        [DataMember(Name = "repoCommit", IsRequired = true, EmitDefaultValue = true)]
        public string RepoCommit { get; set; }

        /// <summary>
        /// Gets or Sets RepoRev
        /// </summary>
        [DataMember(Name = "repoRev", IsRequired = true, EmitDefaultValue = true)]
        public string RepoRev { get; set; }

        /// <summary>
        /// Gets or Sets RepoBlocks
        /// </summary>
        [DataMember(Name = "repoBlocks", IsRequired = true, EmitDefaultValue = true)]
        public int RepoBlocks { get; set; }

        /// <summary>
        /// Gets or Sets IndexedRecords
        /// </summary>
        [DataMember(Name = "indexedRecords", IsRequired = true, EmitDefaultValue = true)]
        public int IndexedRecords { get; set; }

        /// <summary>
        /// Gets or Sets PrivateStateValues
        /// </summary>
        [DataMember(Name = "privateStateValues", IsRequired = true, EmitDefaultValue = true)]
        public int PrivateStateValues { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedBlobs
        /// </summary>
        [DataMember(Name = "expectedBlobs", IsRequired = true, EmitDefaultValue = true)]
        public int ExpectedBlobs { get; set; }

        /// <summary>
        /// Gets or Sets ImportedBlobs
        /// </summary>
        [DataMember(Name = "importedBlobs", IsRequired = true, EmitDefaultValue = true)]
        public int ImportedBlobs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComAtprotoServerCheckAccountStatus200Response {\n");
            sb.Append("  Activated: ").Append(Activated).Append("\n");
            sb.Append("  ValidDid: ").Append(ValidDid).Append("\n");
            sb.Append("  RepoCommit: ").Append(RepoCommit).Append("\n");
            sb.Append("  RepoRev: ").Append(RepoRev).Append("\n");
            sb.Append("  RepoBlocks: ").Append(RepoBlocks).Append("\n");
            sb.Append("  IndexedRecords: ").Append(IndexedRecords).Append("\n");
            sb.Append("  PrivateStateValues: ").Append(PrivateStateValues).Append("\n");
            sb.Append("  ExpectedBlobs: ").Append(ExpectedBlobs).Append("\n");
            sb.Append("  ImportedBlobs: ").Append(ImportedBlobs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
