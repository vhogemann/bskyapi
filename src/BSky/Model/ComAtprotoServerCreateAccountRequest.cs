/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// ComAtprotoServerCreateAccountRequest
    /// </summary>
    [DataContract(Name = "com_atproto_server_createAccount_request")]
    public partial class ComAtprotoServerCreateAccountRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoServerCreateAccountRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComAtprotoServerCreateAccountRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoServerCreateAccountRequest" /> class.
        /// </summary>
        /// <param name="email">email.</param>
        /// <param name="handle">Requested handle for the account. (required).</param>
        /// <param name="did">Pre-existing atproto DID, being imported to a new account..</param>
        /// <param name="inviteCode">inviteCode.</param>
        /// <param name="verificationCode">verificationCode.</param>
        /// <param name="verificationPhone">verificationPhone.</param>
        /// <param name="password">Initial account password. May need to meet instance-specific password strength requirements..</param>
        /// <param name="recoveryKey">DID PLC rotation key (aka, recovery key) to be included in PLC creation operation..</param>
        /// <param name="plcOp">plcOp.</param>
        public ComAtprotoServerCreateAccountRequest(string email = default(string), string handle = default(string), string did = default(string), string inviteCode = default(string), string verificationCode = default(string), string verificationPhone = default(string), string password = default(string), string recoveryKey = default(string), Object plcOp = default(Object))
        {
            // to ensure "handle" is required (not null)
            if (handle == null)
            {
                throw new ArgumentNullException("handle is a required property for ComAtprotoServerCreateAccountRequest and cannot be null");
            }
            this.Handle = handle;
            this.Email = email;
            this.Did = did;
            this.InviteCode = inviteCode;
            this.VerificationCode = verificationCode;
            this.VerificationPhone = verificationPhone;
            this.Password = password;
            this.RecoveryKey = recoveryKey;
            this.PlcOp = plcOp;
        }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Requested handle for the account.
        /// </summary>
        /// <value>Requested handle for the account.</value>
        [DataMember(Name = "handle", IsRequired = true, EmitDefaultValue = true)]
        public string Handle { get; set; }

        /// <summary>
        /// Pre-existing atproto DID, being imported to a new account.
        /// </summary>
        /// <value>Pre-existing atproto DID, being imported to a new account.</value>
        [DataMember(Name = "did", EmitDefaultValue = false)]
        public string Did { get; set; }

        /// <summary>
        /// Gets or Sets InviteCode
        /// </summary>
        [DataMember(Name = "inviteCode", EmitDefaultValue = false)]
        public string InviteCode { get; set; }

        /// <summary>
        /// Gets or Sets VerificationCode
        /// </summary>
        [DataMember(Name = "verificationCode", EmitDefaultValue = false)]
        public string VerificationCode { get; set; }

        /// <summary>
        /// Gets or Sets VerificationPhone
        /// </summary>
        [DataMember(Name = "verificationPhone", EmitDefaultValue = false)]
        public string VerificationPhone { get; set; }

        /// <summary>
        /// Initial account password. May need to meet instance-specific password strength requirements.
        /// </summary>
        /// <value>Initial account password. May need to meet instance-specific password strength requirements.</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// DID PLC rotation key (aka, recovery key) to be included in PLC creation operation.
        /// </summary>
        /// <value>DID PLC rotation key (aka, recovery key) to be included in PLC creation operation.</value>
        [DataMember(Name = "recoveryKey", EmitDefaultValue = false)]
        public string RecoveryKey { get; set; }

        /// <summary>
        /// Gets or Sets PlcOp
        /// </summary>
        [DataMember(Name = "plcOp", EmitDefaultValue = true)]
        public Object PlcOp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComAtprotoServerCreateAccountRequest {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  Did: ").Append(Did).Append("\n");
            sb.Append("  InviteCode: ").Append(InviteCode).Append("\n");
            sb.Append("  VerificationCode: ").Append(VerificationCode).Append("\n");
            sb.Append("  VerificationPhone: ").Append(VerificationPhone).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  RecoveryKey: ").Append(RecoveryKey).Append("\n");
            sb.Append("  PlcOp: ").Append(PlcOp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
