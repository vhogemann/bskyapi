/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// Represents a change to an account&#39;s status on a host (eg, PDS or Relay). The semantics of this event are that the status is at the host which emitted the event, not necessarily that at the currently active PDS. Eg, a Relay takedown would emit a takedown with active&#x3D;false, even if the PDS is still active.
    /// </summary>
    [DataContract(Name = "com.atproto.sync.subscribeRepos.account")]
    public partial class ComAtprotoSyncSubscribeReposAccount : IValidatableObject
    {
        /// <summary>
        /// If active&#x3D;false, this optional field indicates a reason for why the account is not active.
        /// </summary>
        /// <value>If active&#x3D;false, this optional field indicates a reason for why the account is not active.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Takendown for value: takendown
            /// </summary>
            [EnumMember(Value = "takendown")]
            Takendown = 1,

            /// <summary>
            /// Enum Suspended for value: suspended
            /// </summary>
            [EnumMember(Value = "suspended")]
            Suspended = 2,

            /// <summary>
            /// Enum Deleted for value: deleted
            /// </summary>
            [EnumMember(Value = "deleted")]
            Deleted = 3,

            /// <summary>
            /// Enum Deactivated for value: deactivated
            /// </summary>
            [EnumMember(Value = "deactivated")]
            Deactivated = 4
        }


        /// <summary>
        /// If active&#x3D;false, this optional field indicates a reason for why the account is not active.
        /// </summary>
        /// <value>If active&#x3D;false, this optional field indicates a reason for why the account is not active.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoSyncSubscribeReposAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComAtprotoSyncSubscribeReposAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoSyncSubscribeReposAccount" /> class.
        /// </summary>
        /// <param name="seq">seq (required).</param>
        /// <param name="did">did (required).</param>
        /// <param name="time">time (required).</param>
        /// <param name="active">Indicates that the account has a repository which can be fetched from the host that emitted this event. (required).</param>
        /// <param name="status">If active&#x3D;false, this optional field indicates a reason for why the account is not active..</param>
        public ComAtprotoSyncSubscribeReposAccount(int seq = default(int), string did = default(string), DateTime time = default(DateTime), bool active = default(bool), StatusEnum? status = default(StatusEnum?))
        {
            this.Seq = seq;
            // to ensure "did" is required (not null)
            if (did == null)
            {
                throw new ArgumentNullException("did is a required property for ComAtprotoSyncSubscribeReposAccount and cannot be null");
            }
            this.Did = did;
            this.Time = time;
            this.Active = active;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets Seq
        /// </summary>
        [DataMember(Name = "seq", IsRequired = true, EmitDefaultValue = true)]
        public int Seq { get; set; }

        /// <summary>
        /// Gets or Sets Did
        /// </summary>
        [DataMember(Name = "did", IsRequired = true, EmitDefaultValue = true)]
        public string Did { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Time { get; set; }

        /// <summary>
        /// Indicates that the account has a repository which can be fetched from the host that emitted this event.
        /// </summary>
        /// <value>Indicates that the account has a repository which can be fetched from the host that emitted this event.</value>
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComAtprotoSyncSubscribeReposAccount {\n");
            sb.Append("  Seq: ").Append(Seq).Append("\n");
            sb.Append("  Did: ").Append(Did).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
