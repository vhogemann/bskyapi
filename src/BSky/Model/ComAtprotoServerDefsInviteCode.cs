/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// ComAtprotoServerDefsInviteCode
    /// </summary>
    [DataContract(Name = "com.atproto.server.defs.inviteCode")]
    public partial class ComAtprotoServerDefsInviteCode : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoServerDefsInviteCode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComAtprotoServerDefsInviteCode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoServerDefsInviteCode" /> class.
        /// </summary>
        /// <param name="code">code (required).</param>
        /// <param name="available">available (required).</param>
        /// <param name="disabled">disabled (required).</param>
        /// <param name="forAccount">forAccount (required).</param>
        /// <param name="createdBy">createdBy (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="uses">uses (required).</param>
        public ComAtprotoServerDefsInviteCode(string code = default(string), int available = default(int), bool disabled = default(bool), string forAccount = default(string), string createdBy = default(string), DateTime createdAt = default(DateTime), List<ComAtprotoServerDefsInviteCodeUse> uses = default(List<ComAtprotoServerDefsInviteCodeUse>))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for ComAtprotoServerDefsInviteCode and cannot be null");
            }
            this.Code = code;
            this.Available = available;
            this.Disabled = disabled;
            // to ensure "forAccount" is required (not null)
            if (forAccount == null)
            {
                throw new ArgumentNullException("forAccount is a required property for ComAtprotoServerDefsInviteCode and cannot be null");
            }
            this.ForAccount = forAccount;
            // to ensure "createdBy" is required (not null)
            if (createdBy == null)
            {
                throw new ArgumentNullException("createdBy is a required property for ComAtprotoServerDefsInviteCode and cannot be null");
            }
            this.CreatedBy = createdBy;
            this.CreatedAt = createdAt;
            // to ensure "uses" is required (not null)
            if (uses == null)
            {
                throw new ArgumentNullException("uses is a required property for ComAtprotoServerDefsInviteCode and cannot be null");
            }
            this.Uses = uses;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Available
        /// </summary>
        [DataMember(Name = "available", IsRequired = true, EmitDefaultValue = true)]
        public int Available { get; set; }

        /// <summary>
        /// Gets or Sets Disabled
        /// </summary>
        [DataMember(Name = "disabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Disabled { get; set; }

        /// <summary>
        /// Gets or Sets ForAccount
        /// </summary>
        [DataMember(Name = "forAccount", IsRequired = true, EmitDefaultValue = true)]
        public string ForAccount { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Uses
        /// </summary>
        [DataMember(Name = "uses", IsRequired = true, EmitDefaultValue = true)]
        public List<ComAtprotoServerDefsInviteCodeUse> Uses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComAtprotoServerDefsInviteCode {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  ForAccount: ").Append(ForAccount).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Uses: ").Append(Uses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
