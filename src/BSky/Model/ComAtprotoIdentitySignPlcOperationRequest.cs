/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// ComAtprotoIdentitySignPlcOperationRequest
    /// </summary>
    [DataContract(Name = "com_atproto_identity_signPlcOperation_request")]
    public partial class ComAtprotoIdentitySignPlcOperationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoIdentitySignPlcOperationRequest" /> class.
        /// </summary>
        /// <param name="token">A token received through com.atproto.identity.requestPlcOperationSignature.</param>
        /// <param name="rotationKeys">rotationKeys.</param>
        /// <param name="alsoKnownAs">alsoKnownAs.</param>
        /// <param name="verificationMethods">verificationMethods.</param>
        /// <param name="services">services.</param>
        public ComAtprotoIdentitySignPlcOperationRequest(string token = default(string), List<string> rotationKeys = default(List<string>), List<string> alsoKnownAs = default(List<string>), Object verificationMethods = default(Object), Object services = default(Object))
        {
            this.Token = token;
            this.RotationKeys = rotationKeys;
            this.AlsoKnownAs = alsoKnownAs;
            this.VerificationMethods = verificationMethods;
            this.Services = services;
        }

        /// <summary>
        /// A token received through com.atproto.identity.requestPlcOperationSignature
        /// </summary>
        /// <value>A token received through com.atproto.identity.requestPlcOperationSignature</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets RotationKeys
        /// </summary>
        [DataMember(Name = "rotationKeys", EmitDefaultValue = false)]
        public List<string> RotationKeys { get; set; }

        /// <summary>
        /// Gets or Sets AlsoKnownAs
        /// </summary>
        [DataMember(Name = "alsoKnownAs", EmitDefaultValue = false)]
        public List<string> AlsoKnownAs { get; set; }

        /// <summary>
        /// Gets or Sets VerificationMethods
        /// </summary>
        [DataMember(Name = "verificationMethods", EmitDefaultValue = true)]
        public Object VerificationMethods { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name = "services", EmitDefaultValue = true)]
        public Object Services { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComAtprotoIdentitySignPlcOperationRequest {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  RotationKeys: ").Append(RotationKeys).Append("\n");
            sb.Append("  AlsoKnownAs: ").Append(AlsoKnownAs).Append("\n");
            sb.Append("  VerificationMethods: ").Append(VerificationMethods).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
