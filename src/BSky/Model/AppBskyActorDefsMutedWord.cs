/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// A word that the account owner has muted.
    /// </summary>
    [DataContract(Name = "app.bsky.actor.defs.mutedWord")]
    public partial class AppBskyActorDefsMutedWord : IValidatableObject
    {
        /// <summary>
        /// Groups of users to apply the muted word to. If undefined, applies to all users.
        /// </summary>
        /// <value>Groups of users to apply the muted word to. If undefined, applies to all users.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActorTargetEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,

            /// <summary>
            /// Enum ExcludeFollowing for value: exclude-following
            /// </summary>
            [EnumMember(Value = "exclude-following")]
            ExcludeFollowing = 2
        }


        /// <summary>
        /// Groups of users to apply the muted word to. If undefined, applies to all users.
        /// </summary>
        /// <value>Groups of users to apply the muted word to. If undefined, applies to all users.</value>
        [DataMember(Name = "actorTarget", EmitDefaultValue = false)]
        public ActorTargetEnum? ActorTarget { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyActorDefsMutedWord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppBskyActorDefsMutedWord() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyActorDefsMutedWord" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="value">The muted word itself. (required).</param>
        /// <param name="targets">targets (required).</param>
        /// <param name="actorTarget">Groups of users to apply the muted word to. If undefined, applies to all users. (default to ActorTargetEnum.All).</param>
        /// <param name="expiresAt">The date and time at which the muted word will expire and no longer be applied..</param>
        public AppBskyActorDefsMutedWord(string id = default(string), string value = default(string), List<AppBskyActorDefsMutedWordTarget> targets = default(List<AppBskyActorDefsMutedWordTarget>), ActorTargetEnum? actorTarget = ActorTargetEnum.All, DateTime expiresAt = default(DateTime))
        {
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for AppBskyActorDefsMutedWord and cannot be null");
            }
            this.Value = value;
            // to ensure "targets" is required (not null)
            if (targets == null)
            {
                throw new ArgumentNullException("targets is a required property for AppBskyActorDefsMutedWord and cannot be null");
            }
            this.Targets = targets;
            this.Id = id;
            this.ActorTarget = actorTarget;
            this.ExpiresAt = expiresAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The muted word itself.
        /// </summary>
        /// <value>The muted word itself.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Targets
        /// </summary>
        [DataMember(Name = "targets", IsRequired = true, EmitDefaultValue = true)]
        public List<AppBskyActorDefsMutedWordTarget> Targets { get; set; }

        /// <summary>
        /// The date and time at which the muted word will expire and no longer be applied.
        /// </summary>
        /// <value>The date and time at which the muted word will expire and no longer be applied.</value>
        [DataMember(Name = "expiresAt", EmitDefaultValue = false)]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppBskyActorDefsMutedWord {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  ActorTarget: ").Append(ActorTarget).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if (this.Value != null && this.Value.Length > 10000)
            {
                yield return new ValidationResult("Invalid value for Value, length must be less than 10000.", new [] { "Value" });
            }

            yield break;
        }
    }

}
