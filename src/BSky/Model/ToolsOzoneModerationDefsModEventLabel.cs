/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// Apply/Negate labels on a subject
    /// </summary>
    [DataContract(Name = "tools.ozone.moderation.defs.modEventLabel")]
    public partial class ToolsOzoneModerationDefsModEventLabel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventLabel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolsOzoneModerationDefsModEventLabel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsModEventLabel" /> class.
        /// </summary>
        /// <param name="comment">comment.</param>
        /// <param name="createLabelVals">createLabelVals (required).</param>
        /// <param name="negateLabelVals">negateLabelVals (required).</param>
        public ToolsOzoneModerationDefsModEventLabel(string comment = default(string), List<string> createLabelVals = default(List<string>), List<string> negateLabelVals = default(List<string>))
        {
            // to ensure "createLabelVals" is required (not null)
            if (createLabelVals == null)
            {
                throw new ArgumentNullException("createLabelVals is a required property for ToolsOzoneModerationDefsModEventLabel and cannot be null");
            }
            this.CreateLabelVals = createLabelVals;
            // to ensure "negateLabelVals" is required (not null)
            if (negateLabelVals == null)
            {
                throw new ArgumentNullException("negateLabelVals is a required property for ToolsOzoneModerationDefsModEventLabel and cannot be null");
            }
            this.NegateLabelVals = negateLabelVals;
            this.Comment = comment;
        }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets CreateLabelVals
        /// </summary>
        [DataMember(Name = "createLabelVals", IsRequired = true, EmitDefaultValue = true)]
        public List<string> CreateLabelVals { get; set; }

        /// <summary>
        /// Gets or Sets NegateLabelVals
        /// </summary>
        [DataMember(Name = "negateLabelVals", IsRequired = true, EmitDefaultValue = true)]
        public List<string> NegateLabelVals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolsOzoneModerationDefsModEventLabel {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CreateLabelVals: ").Append(CreateLabelVals).Append("\n");
            sb.Append("  NegateLabelVals: ").Append(NegateLabelVals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
