/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// ToolsOzoneModerationDefsSubjectStatusView
    /// </summary>
    [DataContract(Name = "tools.ozone.moderation.defs.subjectStatusView")]
    public partial class ToolsOzoneModerationDefsSubjectStatusView : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ReviewState
        /// </summary>
        [DataMember(Name = "reviewState", IsRequired = true, EmitDefaultValue = true)]
        public ToolsOzoneModerationDefsSubjectReviewState ReviewState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsSubjectStatusView" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolsOzoneModerationDefsSubjectStatusView() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationDefsSubjectStatusView" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="subject">subject (required).</param>
        /// <param name="subjectBlobCids">subjectBlobCids.</param>
        /// <param name="subjectRepoHandle">subjectRepoHandle.</param>
        /// <param name="updatedAt">Timestamp referencing when the last update was made to the moderation status of the subject (required).</param>
        /// <param name="createdAt">Timestamp referencing the first moderation status impacting event was emitted on the subject (required).</param>
        /// <param name="reviewState">reviewState (required).</param>
        /// <param name="comment">Sticky comment on the subject..</param>
        /// <param name="muteUntil">muteUntil.</param>
        /// <param name="muteReportingUntil">muteReportingUntil.</param>
        /// <param name="lastReviewedBy">lastReviewedBy.</param>
        /// <param name="lastReviewedAt">lastReviewedAt.</param>
        /// <param name="lastReportedAt">lastReportedAt.</param>
        /// <param name="lastAppealedAt">Timestamp referencing when the author of the subject appealed a moderation action.</param>
        /// <param name="takendown">takendown.</param>
        /// <param name="appealed">True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators..</param>
        /// <param name="suspendUntil">suspendUntil.</param>
        /// <param name="tags">tags.</param>
        public ToolsOzoneModerationDefsSubjectStatusView(int id = default(int), ComAtprotoModerationCreateReportRequestSubject subject = default(ComAtprotoModerationCreateReportRequestSubject), List<string> subjectBlobCids = default(List<string>), string subjectRepoHandle = default(string), DateTime updatedAt = default(DateTime), DateTime createdAt = default(DateTime), ToolsOzoneModerationDefsSubjectReviewState reviewState = default(ToolsOzoneModerationDefsSubjectReviewState), string comment = default(string), DateTime muteUntil = default(DateTime), DateTime muteReportingUntil = default(DateTime), string lastReviewedBy = default(string), DateTime lastReviewedAt = default(DateTime), DateTime lastReportedAt = default(DateTime), DateTime lastAppealedAt = default(DateTime), bool takendown = default(bool), bool appealed = default(bool), DateTime suspendUntil = default(DateTime), List<string> tags = default(List<string>))
        {
            this.Id = id;
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new ArgumentNullException("subject is a required property for ToolsOzoneModerationDefsSubjectStatusView and cannot be null");
            }
            this.Subject = subject;
            this.UpdatedAt = updatedAt;
            this.CreatedAt = createdAt;
            this.ReviewState = reviewState;
            this.SubjectBlobCids = subjectBlobCids;
            this.SubjectRepoHandle = subjectRepoHandle;
            this.Comment = comment;
            this.MuteUntil = muteUntil;
            this.MuteReportingUntil = muteReportingUntil;
            this.LastReviewedBy = lastReviewedBy;
            this.LastReviewedAt = lastReviewedAt;
            this.LastReportedAt = lastReportedAt;
            this.LastAppealedAt = lastAppealedAt;
            this.Takendown = takendown;
            this.Appealed = appealed;
            this.SuspendUntil = suspendUntil;
            this.Tags = tags;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", IsRequired = true, EmitDefaultValue = true)]
        public ComAtprotoModerationCreateReportRequestSubject Subject { get; set; }

        /// <summary>
        /// Gets or Sets SubjectBlobCids
        /// </summary>
        [DataMember(Name = "subjectBlobCids", EmitDefaultValue = false)]
        public List<string> SubjectBlobCids { get; set; }

        /// <summary>
        /// Gets or Sets SubjectRepoHandle
        /// </summary>
        [DataMember(Name = "subjectRepoHandle", EmitDefaultValue = false)]
        public string SubjectRepoHandle { get; set; }

        /// <summary>
        /// Timestamp referencing when the last update was made to the moderation status of the subject
        /// </summary>
        /// <value>Timestamp referencing when the last update was made to the moderation status of the subject</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Timestamp referencing the first moderation status impacting event was emitted on the subject
        /// </summary>
        /// <value>Timestamp referencing the first moderation status impacting event was emitted on the subject</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Sticky comment on the subject.
        /// </summary>
        /// <value>Sticky comment on the subject.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets MuteUntil
        /// </summary>
        [DataMember(Name = "muteUntil", EmitDefaultValue = false)]
        public DateTime MuteUntil { get; set; }

        /// <summary>
        /// Gets or Sets MuteReportingUntil
        /// </summary>
        [DataMember(Name = "muteReportingUntil", EmitDefaultValue = false)]
        public DateTime MuteReportingUntil { get; set; }

        /// <summary>
        /// Gets or Sets LastReviewedBy
        /// </summary>
        [DataMember(Name = "lastReviewedBy", EmitDefaultValue = false)]
        public string LastReviewedBy { get; set; }

        /// <summary>
        /// Gets or Sets LastReviewedAt
        /// </summary>
        [DataMember(Name = "lastReviewedAt", EmitDefaultValue = false)]
        public DateTime LastReviewedAt { get; set; }

        /// <summary>
        /// Gets or Sets LastReportedAt
        /// </summary>
        [DataMember(Name = "lastReportedAt", EmitDefaultValue = false)]
        public DateTime LastReportedAt { get; set; }

        /// <summary>
        /// Timestamp referencing when the author of the subject appealed a moderation action
        /// </summary>
        /// <value>Timestamp referencing when the author of the subject appealed a moderation action</value>
        [DataMember(Name = "lastAppealedAt", EmitDefaultValue = false)]
        public DateTime LastAppealedAt { get; set; }

        /// <summary>
        /// Gets or Sets Takendown
        /// </summary>
        [DataMember(Name = "takendown", EmitDefaultValue = true)]
        public bool Takendown { get; set; }

        /// <summary>
        /// True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators.
        /// </summary>
        /// <value>True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators.</value>
        [DataMember(Name = "appealed", EmitDefaultValue = true)]
        public bool Appealed { get; set; }

        /// <summary>
        /// Gets or Sets SuspendUntil
        /// </summary>
        [DataMember(Name = "suspendUntil", EmitDefaultValue = false)]
        public DateTime SuspendUntil { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolsOzoneModerationDefsSubjectStatusView {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  SubjectBlobCids: ").Append(SubjectBlobCids).Append("\n");
            sb.Append("  SubjectRepoHandle: ").Append(SubjectRepoHandle).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ReviewState: ").Append(ReviewState).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  MuteUntil: ").Append(MuteUntil).Append("\n");
            sb.Append("  MuteReportingUntil: ").Append(MuteReportingUntil).Append("\n");
            sb.Append("  LastReviewedBy: ").Append(LastReviewedBy).Append("\n");
            sb.Append("  LastReviewedAt: ").Append(LastReviewedAt).Append("\n");
            sb.Append("  LastReportedAt: ").Append(LastReportedAt).Append("\n");
            sb.Append("  LastAppealedAt: ").Append(LastAppealedAt).Append("\n");
            sb.Append("  Takendown: ").Append(Takendown).Append("\n");
            sb.Append("  Appealed: ").Append(Appealed).Append("\n");
            sb.Append("  SuspendUntil: ").Append(SuspendUntil).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
