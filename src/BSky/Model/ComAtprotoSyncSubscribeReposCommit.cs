/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.
    /// </summary>
    [DataContract(Name = "com.atproto.sync.subscribeRepos.commit")]
    public partial class ComAtprotoSyncSubscribeReposCommit : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoSyncSubscribeReposCommit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComAtprotoSyncSubscribeReposCommit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoSyncSubscribeReposCommit" /> class.
        /// </summary>
        /// <param name="seq">seq (required).</param>
        /// <param name="tooBig">Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data. (required).</param>
        /// <param name="repo">The repo this event comes from. (required).</param>
        /// <param name="commit">commit (required).</param>
        /// <param name="rev">The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event. (required).</param>
        /// <param name="since">The rev of the last emitted commit from this repo (if any). (required).</param>
        /// <param name="blocks">CAR file containing relevant blocks, as a diff since the previous repo state. (required).</param>
        /// <param name="ops">ops (required).</param>
        /// <param name="blobs">blobs (required).</param>
        /// <param name="time">Timestamp of when this message was originally broadcast. (required).</param>
        public ComAtprotoSyncSubscribeReposCommit(int seq = default(int), bool tooBig = default(bool), string repo = default(string), string commit = default(string), string rev = default(string), string since = default(string), byte[] blocks = default(byte[]), List<ComAtprotoSyncSubscribeReposRepoOp> ops = default(List<ComAtprotoSyncSubscribeReposRepoOp>), List<string> blobs = default(List<string>), DateTime time = default(DateTime))
        {
            this.Seq = seq;
            this.TooBig = tooBig;
            // to ensure "repo" is required (not null)
            if (repo == null)
            {
                throw new ArgumentNullException("repo is a required property for ComAtprotoSyncSubscribeReposCommit and cannot be null");
            }
            this.Repo = repo;
            // to ensure "commit" is required (not null)
            if (commit == null)
            {
                throw new ArgumentNullException("commit is a required property for ComAtprotoSyncSubscribeReposCommit and cannot be null");
            }
            this.Commit = commit;
            // to ensure "rev" is required (not null)
            if (rev == null)
            {
                throw new ArgumentNullException("rev is a required property for ComAtprotoSyncSubscribeReposCommit and cannot be null");
            }
            this.Rev = rev;
            // to ensure "since" is required (not null)
            if (since == null)
            {
                throw new ArgumentNullException("since is a required property for ComAtprotoSyncSubscribeReposCommit and cannot be null");
            }
            this.Since = since;
            // to ensure "blocks" is required (not null)
            if (blocks == null)
            {
                throw new ArgumentNullException("blocks is a required property for ComAtprotoSyncSubscribeReposCommit and cannot be null");
            }
            this.Blocks = blocks;
            // to ensure "ops" is required (not null)
            if (ops == null)
            {
                throw new ArgumentNullException("ops is a required property for ComAtprotoSyncSubscribeReposCommit and cannot be null");
            }
            this.Ops = ops;
            // to ensure "blobs" is required (not null)
            if (blobs == null)
            {
                throw new ArgumentNullException("blobs is a required property for ComAtprotoSyncSubscribeReposCommit and cannot be null");
            }
            this.Blobs = blobs;
            this.Time = time;
        }

        /// <summary>
        /// Gets or Sets Seq
        /// </summary>
        [DataMember(Name = "seq", IsRequired = true, EmitDefaultValue = true)]
        public int Seq { get; set; }

        /// <summary>
        /// Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data.
        /// </summary>
        /// <value>Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data.</value>
        [DataMember(Name = "tooBig", IsRequired = true, EmitDefaultValue = true)]
        public bool TooBig { get; set; }

        /// <summary>
        /// The repo this event comes from.
        /// </summary>
        /// <value>The repo this event comes from.</value>
        [DataMember(Name = "repo", IsRequired = true, EmitDefaultValue = true)]
        public string Repo { get; set; }

        /// <summary>
        /// Gets or Sets Commit
        /// </summary>
        [DataMember(Name = "commit", IsRequired = true, EmitDefaultValue = true)]
        public string Commit { get; set; }

        /// <summary>
        /// The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event.
        /// </summary>
        /// <value>The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event.</value>
        [DataMember(Name = "rev", IsRequired = true, EmitDefaultValue = true)]
        public string Rev { get; set; }

        /// <summary>
        /// The rev of the last emitted commit from this repo (if any).
        /// </summary>
        /// <value>The rev of the last emitted commit from this repo (if any).</value>
        [DataMember(Name = "since", IsRequired = true, EmitDefaultValue = true)]
        public string Since { get; set; }

        /// <summary>
        /// CAR file containing relevant blocks, as a diff since the previous repo state.
        /// </summary>
        /// <value>CAR file containing relevant blocks, as a diff since the previous repo state.</value>
        [DataMember(Name = "blocks", IsRequired = true, EmitDefaultValue = true)]
        public byte[] Blocks { get; set; }

        /// <summary>
        /// Gets or Sets Ops
        /// </summary>
        [DataMember(Name = "ops", IsRequired = true, EmitDefaultValue = true)]
        public List<ComAtprotoSyncSubscribeReposRepoOp> Ops { get; set; }

        /// <summary>
        /// Gets or Sets Blobs
        /// </summary>
        [DataMember(Name = "blobs", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Blobs { get; set; }

        /// <summary>
        /// Timestamp of when this message was originally broadcast.
        /// </summary>
        /// <value>Timestamp of when this message was originally broadcast.</value>
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComAtprotoSyncSubscribeReposCommit {\n");
            sb.Append("  Seq: ").Append(Seq).Append("\n");
            sb.Append("  TooBig: ").Append(TooBig).Append("\n");
            sb.Append("  Repo: ").Append(Repo).Append("\n");
            sb.Append("  Commit: ").Append(Commit).Append("\n");
            sb.Append("  Rev: ").Append(Rev).Append("\n");
            sb.Append("  Since: ").Append(Since).Append("\n");
            sb.Append("  Blocks: ").Append(Blocks).Append("\n");
            sb.Append("  Ops: ").Append(Ops).Append("\n");
            sb.Append("  Blobs: ").Append(Blobs).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Blocks (byte[]) maxLength
            if (this.Blocks != null && this.Blocks.Length > 1000000)
            {
                yield return new ValidationResult("Invalid value for Blocks, length must be less than 1000000.", new [] { "Blocks" });
            }

            yield break;
        }
    }

}
