/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// ComAtprotoRepoDescribeRepo200Response
    /// </summary>
    [DataContract(Name = "com_atproto_repo_describeRepo_200_response")]
    public partial class ComAtprotoRepoDescribeRepo200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoRepoDescribeRepo200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComAtprotoRepoDescribeRepo200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoRepoDescribeRepo200Response" /> class.
        /// </summary>
        /// <param name="handle">handle (required).</param>
        /// <param name="did">did (required).</param>
        /// <param name="didDoc">didDoc (required).</param>
        /// <param name="collections">collections (required).</param>
        /// <param name="handleIsCorrect">Indicates if handle is currently valid (resolves bi-directionally) (required).</param>
        public ComAtprotoRepoDescribeRepo200Response(string handle = default(string), string did = default(string), Object didDoc = default(Object), List<string> collections = default(List<string>), bool handleIsCorrect = default(bool))
        {
            // to ensure "handle" is required (not null)
            if (handle == null)
            {
                throw new ArgumentNullException("handle is a required property for ComAtprotoRepoDescribeRepo200Response and cannot be null");
            }
            this.Handle = handle;
            // to ensure "did" is required (not null)
            if (did == null)
            {
                throw new ArgumentNullException("did is a required property for ComAtprotoRepoDescribeRepo200Response and cannot be null");
            }
            this.Did = did;
            // to ensure "didDoc" is required (not null)
            if (didDoc == null)
            {
                throw new ArgumentNullException("didDoc is a required property for ComAtprotoRepoDescribeRepo200Response and cannot be null");
            }
            this.DidDoc = didDoc;
            // to ensure "collections" is required (not null)
            if (collections == null)
            {
                throw new ArgumentNullException("collections is a required property for ComAtprotoRepoDescribeRepo200Response and cannot be null");
            }
            this.Collections = collections;
            this.HandleIsCorrect = handleIsCorrect;
        }

        /// <summary>
        /// Gets or Sets Handle
        /// </summary>
        [DataMember(Name = "handle", IsRequired = true, EmitDefaultValue = true)]
        public string Handle { get; set; }

        /// <summary>
        /// Gets or Sets Did
        /// </summary>
        [DataMember(Name = "did", IsRequired = true, EmitDefaultValue = true)]
        public string Did { get; set; }

        /// <summary>
        /// Gets or Sets DidDoc
        /// </summary>
        [DataMember(Name = "didDoc", IsRequired = true, EmitDefaultValue = true)]
        public Object DidDoc { get; set; }

        /// <summary>
        /// Gets or Sets Collections
        /// </summary>
        [DataMember(Name = "collections", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Collections { get; set; }

        /// <summary>
        /// Indicates if handle is currently valid (resolves bi-directionally)
        /// </summary>
        /// <value>Indicates if handle is currently valid (resolves bi-directionally)</value>
        [DataMember(Name = "handleIsCorrect", IsRequired = true, EmitDefaultValue = true)]
        public bool HandleIsCorrect { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComAtprotoRepoDescribeRepo200Response {\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  Did: ").Append(Did).Append("\n");
            sb.Append("  DidDoc: ").Append(DidDoc).Append("\n");
            sb.Append("  Collections: ").Append(Collections).Append("\n");
            sb.Append("  HandleIsCorrect: ").Append(HandleIsCorrect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
