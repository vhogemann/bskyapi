/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BSky.Client.OpenAPIDateConverter;

namespace BSky.Model
{
    /// <summary>
    /// ComAtprotoAdminSendEmailRequest
    /// </summary>
    [DataContract(Name = "com_atproto_admin_sendEmail_request")]
    public partial class ComAtprotoAdminSendEmailRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminSendEmailRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComAtprotoAdminSendEmailRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminSendEmailRequest" /> class.
        /// </summary>
        /// <param name="recipientDid">recipientDid (required).</param>
        /// <param name="content">content (required).</param>
        /// <param name="subject">subject.</param>
        /// <param name="senderDid">senderDid (required).</param>
        /// <param name="comment">Additional comment by the sender that won&#39;t be used in the email itself but helpful to provide more context for moderators/reviewers.</param>
        public ComAtprotoAdminSendEmailRequest(string recipientDid = default(string), string content = default(string), string subject = default(string), string senderDid = default(string), string comment = default(string))
        {
            // to ensure "recipientDid" is required (not null)
            if (recipientDid == null)
            {
                throw new ArgumentNullException("recipientDid is a required property for ComAtprotoAdminSendEmailRequest and cannot be null");
            }
            this.RecipientDid = recipientDid;
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new ArgumentNullException("content is a required property for ComAtprotoAdminSendEmailRequest and cannot be null");
            }
            this.Content = content;
            // to ensure "senderDid" is required (not null)
            if (senderDid == null)
            {
                throw new ArgumentNullException("senderDid is a required property for ComAtprotoAdminSendEmailRequest and cannot be null");
            }
            this.SenderDid = senderDid;
            this.Subject = subject;
            this.Comment = comment;
        }

        /// <summary>
        /// Gets or Sets RecipientDid
        /// </summary>
        [DataMember(Name = "recipientDid", IsRequired = true, EmitDefaultValue = true)]
        public string RecipientDid { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = true)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets SenderDid
        /// </summary>
        [DataMember(Name = "senderDid", IsRequired = true, EmitDefaultValue = true)]
        public string SenderDid { get; set; }

        /// <summary>
        /// Additional comment by the sender that won&#39;t be used in the email itself but helpful to provide more context for moderators/reviewers
        /// </summary>
        /// <value>Additional comment by the sender that won&#39;t be used in the email itself but helpful to provide more context for moderators/reviewers</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComAtprotoAdminSendEmailRequest {\n");
            sb.Append("  RecipientDid: ").Append(RecipientDid).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  SenderDid: ").Append(SenderDid).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
