/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BSky.Client;
using BSky.Model;

namespace BSky.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolsOzoneTeamApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a member to the ozone team. Requires admin role.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamAddMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneTeamDefsMember</returns>
        ToolsOzoneTeamDefsMember ToolsOzoneTeamAddMember(ToolsOzoneTeamAddMemberRequest toolsOzoneTeamAddMemberRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a member to the ozone team. Requires admin role.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamAddMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneTeamDefsMember</returns>
        ApiResponse<ToolsOzoneTeamDefsMember> ToolsOzoneTeamAddMemberWithHttpInfo(ToolsOzoneTeamAddMemberRequest toolsOzoneTeamAddMemberRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a member from ozone team. Requires admin role.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ToolsOzoneTeamDeleteMember(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a member from ozone team. Requires admin role.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ToolsOzoneTeamDeleteMemberWithHttpInfo(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all members with access to the ozone service.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneTeamListMembers200Response</returns>
        ToolsOzoneTeamListMembers200Response ToolsOzoneTeamListMembers(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all members with access to the ozone service.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneTeamListMembers200Response</returns>
        ApiResponse<ToolsOzoneTeamListMembers200Response> ToolsOzoneTeamListMembersWithHttpInfo(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a member in the ozone service. Requires admin role.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamUpdateMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneTeamDefsMember</returns>
        ToolsOzoneTeamDefsMember ToolsOzoneTeamUpdateMember(ToolsOzoneTeamUpdateMemberRequest toolsOzoneTeamUpdateMemberRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a member in the ozone service. Requires admin role.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamUpdateMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneTeamDefsMember</returns>
        ApiResponse<ToolsOzoneTeamDefsMember> ToolsOzoneTeamUpdateMemberWithHttpInfo(ToolsOzoneTeamUpdateMemberRequest toolsOzoneTeamUpdateMemberRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolsOzoneTeamApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a member to the ozone team. Requires admin role.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamAddMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneTeamDefsMember</returns>
        System.Threading.Tasks.Task<ToolsOzoneTeamDefsMember> ToolsOzoneTeamAddMemberAsync(ToolsOzoneTeamAddMemberRequest toolsOzoneTeamAddMemberRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a member to the ozone team. Requires admin role.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamAddMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneTeamDefsMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolsOzoneTeamDefsMember>> ToolsOzoneTeamAddMemberWithHttpInfoAsync(ToolsOzoneTeamAddMemberRequest toolsOzoneTeamAddMemberRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a member from ozone team. Requires admin role.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ToolsOzoneTeamDeleteMemberAsync(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a member from ozone team. Requires admin role.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ToolsOzoneTeamDeleteMemberWithHttpInfoAsync(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all members with access to the ozone service.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneTeamListMembers200Response</returns>
        System.Threading.Tasks.Task<ToolsOzoneTeamListMembers200Response> ToolsOzoneTeamListMembersAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all members with access to the ozone service.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneTeamListMembers200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolsOzoneTeamListMembers200Response>> ToolsOzoneTeamListMembersWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a member in the ozone service. Requires admin role.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamUpdateMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneTeamDefsMember</returns>
        System.Threading.Tasks.Task<ToolsOzoneTeamDefsMember> ToolsOzoneTeamUpdateMemberAsync(ToolsOzoneTeamUpdateMemberRequest toolsOzoneTeamUpdateMemberRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a member in the ozone service. Requires admin role.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamUpdateMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneTeamDefsMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolsOzoneTeamDefsMember>> ToolsOzoneTeamUpdateMemberWithHttpInfoAsync(ToolsOzoneTeamUpdateMemberRequest toolsOzoneTeamUpdateMemberRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolsOzoneTeamApi : IToolsOzoneTeamApiSync, IToolsOzoneTeamApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ToolsOzoneTeamApi : IToolsOzoneTeamApi
    {
        private BSky.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneTeamApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolsOzoneTeamApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneTeamApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolsOzoneTeamApi(string basePath)
        {
            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                new BSky.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneTeamApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ToolsOzoneTeamApi(BSky.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneTeamApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ToolsOzoneTeamApi(BSky.Client.ISynchronousClient client, BSky.Client.IAsynchronousClient asyncClient, BSky.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BSky.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BSky.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BSky.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BSky.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Add a member to the ozone team. Requires admin role.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamAddMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneTeamDefsMember</returns>
        public ToolsOzoneTeamDefsMember ToolsOzoneTeamAddMember(ToolsOzoneTeamAddMemberRequest toolsOzoneTeamAddMemberRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ToolsOzoneTeamDefsMember> localVarResponse = ToolsOzoneTeamAddMemberWithHttpInfo(toolsOzoneTeamAddMemberRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a member to the ozone team. Requires admin role.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamAddMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneTeamDefsMember</returns>
        public BSky.Client.ApiResponse<ToolsOzoneTeamDefsMember> ToolsOzoneTeamAddMemberWithHttpInfo(ToolsOzoneTeamAddMemberRequest toolsOzoneTeamAddMemberRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolsOzoneTeamAddMemberRequest' is set
            if (toolsOzoneTeamAddMemberRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'toolsOzoneTeamAddMemberRequest' when calling ToolsOzoneTeamApi->ToolsOzoneTeamAddMember");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolsOzoneTeamAddMemberRequest;

            localVarRequestOptions.Operation = "ToolsOzoneTeamApi.ToolsOzoneTeamAddMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolsOzoneTeamDefsMember>("/tools.ozone.team.addMember", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneTeamAddMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a member to the ozone team. Requires admin role.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamAddMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneTeamDefsMember</returns>
        public async System.Threading.Tasks.Task<ToolsOzoneTeamDefsMember> ToolsOzoneTeamAddMemberAsync(ToolsOzoneTeamAddMemberRequest toolsOzoneTeamAddMemberRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ToolsOzoneTeamDefsMember> localVarResponse = await ToolsOzoneTeamAddMemberWithHttpInfoAsync(toolsOzoneTeamAddMemberRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a member to the ozone team. Requires admin role.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamAddMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneTeamDefsMember)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ToolsOzoneTeamDefsMember>> ToolsOzoneTeamAddMemberWithHttpInfoAsync(ToolsOzoneTeamAddMemberRequest toolsOzoneTeamAddMemberRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolsOzoneTeamAddMemberRequest' is set
            if (toolsOzoneTeamAddMemberRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'toolsOzoneTeamAddMemberRequest' when calling ToolsOzoneTeamApi->ToolsOzoneTeamAddMember");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolsOzoneTeamAddMemberRequest;

            localVarRequestOptions.Operation = "ToolsOzoneTeamApi.ToolsOzoneTeamAddMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolsOzoneTeamDefsMember>("/tools.ozone.team.addMember", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneTeamAddMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a member from ozone team. Requires admin role.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ToolsOzoneTeamDeleteMember(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0)
        {
            ToolsOzoneTeamDeleteMemberWithHttpInfo(comAtprotoAdminDeleteAccountRequest);
        }

        /// <summary>
        ///  Delete a member from ozone team. Requires admin role.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ToolsOzoneTeamDeleteMemberWithHttpInfo(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoAdminDeleteAccountRequest' is set
            if (comAtprotoAdminDeleteAccountRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDeleteAccountRequest' when calling ToolsOzoneTeamApi->ToolsOzoneTeamDeleteMember");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminDeleteAccountRequest;

            localVarRequestOptions.Operation = "ToolsOzoneTeamApi.ToolsOzoneTeamDeleteMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tools.ozone.team.deleteMember", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneTeamDeleteMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a member from ozone team. Requires admin role.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ToolsOzoneTeamDeleteMemberAsync(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ToolsOzoneTeamDeleteMemberWithHttpInfoAsync(comAtprotoAdminDeleteAccountRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete a member from ozone team. Requires admin role.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ToolsOzoneTeamDeleteMemberWithHttpInfoAsync(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminDeleteAccountRequest' is set
            if (comAtprotoAdminDeleteAccountRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDeleteAccountRequest' when calling ToolsOzoneTeamApi->ToolsOzoneTeamDeleteMember");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminDeleteAccountRequest;

            localVarRequestOptions.Operation = "ToolsOzoneTeamApi.ToolsOzoneTeamDeleteMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tools.ozone.team.deleteMember", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneTeamDeleteMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List all members with access to the ozone service.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneTeamListMembers200Response</returns>
        public ToolsOzoneTeamListMembers200Response ToolsOzoneTeamListMembers(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ToolsOzoneTeamListMembers200Response> localVarResponse = ToolsOzoneTeamListMembersWithHttpInfo(limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List all members with access to the ozone service.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneTeamListMembers200Response</returns>
        public BSky.Client.ApiResponse<ToolsOzoneTeamListMembers200Response> ToolsOzoneTeamListMembersWithHttpInfo(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ToolsOzoneTeamApi.ToolsOzoneTeamListMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ToolsOzoneTeamListMembers200Response>("/tools.ozone.team.listMembers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneTeamListMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List all members with access to the ozone service.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneTeamListMembers200Response</returns>
        public async System.Threading.Tasks.Task<ToolsOzoneTeamListMembers200Response> ToolsOzoneTeamListMembersAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ToolsOzoneTeamListMembers200Response> localVarResponse = await ToolsOzoneTeamListMembersWithHttpInfoAsync(limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List all members with access to the ozone service.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneTeamListMembers200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ToolsOzoneTeamListMembers200Response>> ToolsOzoneTeamListMembersWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ToolsOzoneTeamApi.ToolsOzoneTeamListMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ToolsOzoneTeamListMembers200Response>("/tools.ozone.team.listMembers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneTeamListMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update a member in the ozone service. Requires admin role.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamUpdateMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneTeamDefsMember</returns>
        public ToolsOzoneTeamDefsMember ToolsOzoneTeamUpdateMember(ToolsOzoneTeamUpdateMemberRequest toolsOzoneTeamUpdateMemberRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ToolsOzoneTeamDefsMember> localVarResponse = ToolsOzoneTeamUpdateMemberWithHttpInfo(toolsOzoneTeamUpdateMemberRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update a member in the ozone service. Requires admin role.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamUpdateMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneTeamDefsMember</returns>
        public BSky.Client.ApiResponse<ToolsOzoneTeamDefsMember> ToolsOzoneTeamUpdateMemberWithHttpInfo(ToolsOzoneTeamUpdateMemberRequest toolsOzoneTeamUpdateMemberRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolsOzoneTeamUpdateMemberRequest' is set
            if (toolsOzoneTeamUpdateMemberRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'toolsOzoneTeamUpdateMemberRequest' when calling ToolsOzoneTeamApi->ToolsOzoneTeamUpdateMember");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolsOzoneTeamUpdateMemberRequest;

            localVarRequestOptions.Operation = "ToolsOzoneTeamApi.ToolsOzoneTeamUpdateMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolsOzoneTeamDefsMember>("/tools.ozone.team.updateMember", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneTeamUpdateMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update a member in the ozone service. Requires admin role.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamUpdateMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneTeamDefsMember</returns>
        public async System.Threading.Tasks.Task<ToolsOzoneTeamDefsMember> ToolsOzoneTeamUpdateMemberAsync(ToolsOzoneTeamUpdateMemberRequest toolsOzoneTeamUpdateMemberRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ToolsOzoneTeamDefsMember> localVarResponse = await ToolsOzoneTeamUpdateMemberWithHttpInfoAsync(toolsOzoneTeamUpdateMemberRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update a member in the ozone service. Requires admin role.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneTeamUpdateMemberRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneTeamDefsMember)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ToolsOzoneTeamDefsMember>> ToolsOzoneTeamUpdateMemberWithHttpInfoAsync(ToolsOzoneTeamUpdateMemberRequest toolsOzoneTeamUpdateMemberRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolsOzoneTeamUpdateMemberRequest' is set
            if (toolsOzoneTeamUpdateMemberRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'toolsOzoneTeamUpdateMemberRequest' when calling ToolsOzoneTeamApi->ToolsOzoneTeamUpdateMember");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolsOzoneTeamUpdateMemberRequest;

            localVarRequestOptions.Operation = "ToolsOzoneTeamApi.ToolsOzoneTeamUpdateMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolsOzoneTeamDefsMember>("/tools.ozone.team.updateMember", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneTeamUpdateMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
