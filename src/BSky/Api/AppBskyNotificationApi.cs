/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BSky.Client;
using BSky.Model;

namespace BSky.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBskyNotificationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count the number of unread notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priority"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyNotificationGetUnreadCount200Response</returns>
        AppBskyNotificationGetUnreadCount200Response AppBskyNotificationGetUnreadCount(bool? priority = default(bool?), DateTime? seenAt = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count the number of unread notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priority"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyNotificationGetUnreadCount200Response</returns>
        ApiResponse<AppBskyNotificationGetUnreadCount200Response> AppBskyNotificationGetUnreadCountWithHttpInfo(bool? priority = default(bool?), DateTime? seenAt = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerate notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="priority"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyNotificationListNotifications200Response</returns>
        AppBskyNotificationListNotifications200Response AppBskyNotificationListNotifications(int? limit = default(int?), bool? priority = default(bool?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerate notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="priority"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyNotificationListNotifications200Response</returns>
        ApiResponse<AppBskyNotificationListNotifications200Response> AppBskyNotificationListNotificationsWithHttpInfo(int? limit = default(int?), bool? priority = default(bool?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set notification-related preferences for an account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationPutPreferencesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AppBskyNotificationPutPreferences(AppBskyNotificationPutPreferencesRequest appBskyNotificationPutPreferencesRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set notification-related preferences for an account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationPutPreferencesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppBskyNotificationPutPreferencesWithHttpInfo(AppBskyNotificationPutPreferencesRequest appBskyNotificationPutPreferencesRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AppBskyNotificationRegisterPush(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppBskyNotificationRegisterPushWithHttpInfo(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify server that the requesting account has seen notifications. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AppBskyNotificationUpdateSeen(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify server that the requesting account has seen notifications. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppBskyNotificationUpdateSeenWithHttpInfo(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBskyNotificationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count the number of unread notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priority"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyNotificationGetUnreadCount200Response</returns>
        System.Threading.Tasks.Task<AppBskyNotificationGetUnreadCount200Response> AppBskyNotificationGetUnreadCountAsync(bool? priority = default(bool?), DateTime? seenAt = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count the number of unread notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priority"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyNotificationGetUnreadCount200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyNotificationGetUnreadCount200Response>> AppBskyNotificationGetUnreadCountWithHttpInfoAsync(bool? priority = default(bool?), DateTime? seenAt = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerate notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="priority"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyNotificationListNotifications200Response</returns>
        System.Threading.Tasks.Task<AppBskyNotificationListNotifications200Response> AppBskyNotificationListNotificationsAsync(int? limit = default(int?), bool? priority = default(bool?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerate notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="priority"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyNotificationListNotifications200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyNotificationListNotifications200Response>> AppBskyNotificationListNotificationsWithHttpInfoAsync(int? limit = default(int?), bool? priority = default(bool?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set notification-related preferences for an account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationPutPreferencesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppBskyNotificationPutPreferencesAsync(AppBskyNotificationPutPreferencesRequest appBskyNotificationPutPreferencesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set notification-related preferences for an account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationPutPreferencesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppBskyNotificationPutPreferencesWithHttpInfoAsync(AppBskyNotificationPutPreferencesRequest appBskyNotificationPutPreferencesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppBskyNotificationRegisterPushAsync(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppBskyNotificationRegisterPushWithHttpInfoAsync(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify server that the requesting account has seen notifications. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppBskyNotificationUpdateSeenAsync(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify server that the requesting account has seen notifications. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppBskyNotificationUpdateSeenWithHttpInfoAsync(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBskyNotificationApi : IAppBskyNotificationApiSync, IAppBskyNotificationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppBskyNotificationApi : IAppBskyNotificationApi
    {
        private BSky.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyNotificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AppBskyNotificationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyNotificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AppBskyNotificationApi(string basePath)
        {
            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                new BSky.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyNotificationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AppBskyNotificationApi(BSky.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyNotificationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AppBskyNotificationApi(BSky.Client.ISynchronousClient client, BSky.Client.IAsynchronousClient asyncClient, BSky.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BSky.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BSky.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BSky.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BSky.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Count the number of unread notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priority"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyNotificationGetUnreadCount200Response</returns>
        public AppBskyNotificationGetUnreadCount200Response AppBskyNotificationGetUnreadCount(bool? priority = default(bool?), DateTime? seenAt = default(DateTime?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyNotificationGetUnreadCount200Response> localVarResponse = AppBskyNotificationGetUnreadCountWithHttpInfo(priority, seenAt);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Count the number of unread notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priority"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyNotificationGetUnreadCount200Response</returns>
        public BSky.Client.ApiResponse<AppBskyNotificationGetUnreadCount200Response> AppBskyNotificationGetUnreadCountWithHttpInfo(bool? priority = default(bool?), DateTime? seenAt = default(DateTime?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "priority", priority));
            }
            if (seenAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "seenAt", seenAt));
            }

            localVarRequestOptions.Operation = "AppBskyNotificationApi.AppBskyNotificationGetUnreadCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyNotificationGetUnreadCount200Response>("/app.bsky.notification.getUnreadCount", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationGetUnreadCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Count the number of unread notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priority"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyNotificationGetUnreadCount200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyNotificationGetUnreadCount200Response> AppBskyNotificationGetUnreadCountAsync(bool? priority = default(bool?), DateTime? seenAt = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyNotificationGetUnreadCount200Response> localVarResponse = await AppBskyNotificationGetUnreadCountWithHttpInfoAsync(priority, seenAt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Count the number of unread notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priority"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyNotificationGetUnreadCount200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyNotificationGetUnreadCount200Response>> AppBskyNotificationGetUnreadCountWithHttpInfoAsync(bool? priority = default(bool?), DateTime? seenAt = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "priority", priority));
            }
            if (seenAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "seenAt", seenAt));
            }

            localVarRequestOptions.Operation = "AppBskyNotificationApi.AppBskyNotificationGetUnreadCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyNotificationGetUnreadCount200Response>("/app.bsky.notification.getUnreadCount", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationGetUnreadCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Enumerate notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="priority"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyNotificationListNotifications200Response</returns>
        public AppBskyNotificationListNotifications200Response AppBskyNotificationListNotifications(int? limit = default(int?), bool? priority = default(bool?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyNotificationListNotifications200Response> localVarResponse = AppBskyNotificationListNotificationsWithHttpInfo(limit, priority, cursor, seenAt);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Enumerate notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="priority"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyNotificationListNotifications200Response</returns>
        public BSky.Client.ApiResponse<AppBskyNotificationListNotifications200Response> AppBskyNotificationListNotificationsWithHttpInfo(int? limit = default(int?), bool? priority = default(bool?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "priority", priority));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (seenAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "seenAt", seenAt));
            }

            localVarRequestOptions.Operation = "AppBskyNotificationApi.AppBskyNotificationListNotifications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyNotificationListNotifications200Response>("/app.bsky.notification.listNotifications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationListNotifications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Enumerate notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="priority"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyNotificationListNotifications200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyNotificationListNotifications200Response> AppBskyNotificationListNotificationsAsync(int? limit = default(int?), bool? priority = default(bool?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyNotificationListNotifications200Response> localVarResponse = await AppBskyNotificationListNotificationsWithHttpInfoAsync(limit, priority, cursor, seenAt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Enumerate notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="priority"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyNotificationListNotifications200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyNotificationListNotifications200Response>> AppBskyNotificationListNotificationsWithHttpInfoAsync(int? limit = default(int?), bool? priority = default(bool?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "priority", priority));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (seenAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "seenAt", seenAt));
            }

            localVarRequestOptions.Operation = "AppBskyNotificationApi.AppBskyNotificationListNotifications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyNotificationListNotifications200Response>("/app.bsky.notification.listNotifications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationListNotifications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Set notification-related preferences for an account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationPutPreferencesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AppBskyNotificationPutPreferences(AppBskyNotificationPutPreferencesRequest appBskyNotificationPutPreferencesRequest, int operationIndex = 0)
        {
            AppBskyNotificationPutPreferencesWithHttpInfo(appBskyNotificationPutPreferencesRequest);
        }

        /// <summary>
        ///  Set notification-related preferences for an account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationPutPreferencesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> AppBskyNotificationPutPreferencesWithHttpInfo(AppBskyNotificationPutPreferencesRequest appBskyNotificationPutPreferencesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'appBskyNotificationPutPreferencesRequest' is set
            if (appBskyNotificationPutPreferencesRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'appBskyNotificationPutPreferencesRequest' when calling AppBskyNotificationApi->AppBskyNotificationPutPreferences");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = appBskyNotificationPutPreferencesRequest;

            localVarRequestOptions.Operation = "AppBskyNotificationApi.AppBskyNotificationPutPreferences";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/app.bsky.notification.putPreferences", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationPutPreferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Set notification-related preferences for an account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationPutPreferencesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppBskyNotificationPutPreferencesAsync(AppBskyNotificationPutPreferencesRequest appBskyNotificationPutPreferencesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AppBskyNotificationPutPreferencesWithHttpInfoAsync(appBskyNotificationPutPreferencesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Set notification-related preferences for an account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationPutPreferencesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> AppBskyNotificationPutPreferencesWithHttpInfoAsync(AppBskyNotificationPutPreferencesRequest appBskyNotificationPutPreferencesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'appBskyNotificationPutPreferencesRequest' is set
            if (appBskyNotificationPutPreferencesRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'appBskyNotificationPutPreferencesRequest' when calling AppBskyNotificationApi->AppBskyNotificationPutPreferences");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = appBskyNotificationPutPreferencesRequest;

            localVarRequestOptions.Operation = "AppBskyNotificationApi.AppBskyNotificationPutPreferences";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/app.bsky.notification.putPreferences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationPutPreferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AppBskyNotificationRegisterPush(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest, int operationIndex = 0)
        {
            AppBskyNotificationRegisterPushWithHttpInfo(appBskyNotificationRegisterPushRequest);
        }

        /// <summary>
        ///  Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> AppBskyNotificationRegisterPushWithHttpInfo(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest, int operationIndex = 0)
        {
            // verify the required parameter 'appBskyNotificationRegisterPushRequest' is set
            if (appBskyNotificationRegisterPushRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'appBskyNotificationRegisterPushRequest' when calling AppBskyNotificationApi->AppBskyNotificationRegisterPush");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = appBskyNotificationRegisterPushRequest;

            localVarRequestOptions.Operation = "AppBskyNotificationApi.AppBskyNotificationRegisterPush";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/app.bsky.notification.registerPush", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationRegisterPush", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppBskyNotificationRegisterPushAsync(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AppBskyNotificationRegisterPushWithHttpInfoAsync(appBskyNotificationRegisterPushRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> AppBskyNotificationRegisterPushWithHttpInfoAsync(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'appBskyNotificationRegisterPushRequest' is set
            if (appBskyNotificationRegisterPushRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'appBskyNotificationRegisterPushRequest' when calling AppBskyNotificationApi->AppBskyNotificationRegisterPush");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = appBskyNotificationRegisterPushRequest;

            localVarRequestOptions.Operation = "AppBskyNotificationApi.AppBskyNotificationRegisterPush";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/app.bsky.notification.registerPush", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationRegisterPush", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Notify server that the requesting account has seen notifications. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AppBskyNotificationUpdateSeen(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest, int operationIndex = 0)
        {
            AppBskyNotificationUpdateSeenWithHttpInfo(appBskyNotificationUpdateSeenRequest);
        }

        /// <summary>
        ///  Notify server that the requesting account has seen notifications. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> AppBskyNotificationUpdateSeenWithHttpInfo(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest, int operationIndex = 0)
        {
            // verify the required parameter 'appBskyNotificationUpdateSeenRequest' is set
            if (appBskyNotificationUpdateSeenRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'appBskyNotificationUpdateSeenRequest' when calling AppBskyNotificationApi->AppBskyNotificationUpdateSeen");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = appBskyNotificationUpdateSeenRequest;

            localVarRequestOptions.Operation = "AppBskyNotificationApi.AppBskyNotificationUpdateSeen";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/app.bsky.notification.updateSeen", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationUpdateSeen", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Notify server that the requesting account has seen notifications. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppBskyNotificationUpdateSeenAsync(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AppBskyNotificationUpdateSeenWithHttpInfoAsync(appBskyNotificationUpdateSeenRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Notify server that the requesting account has seen notifications. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> AppBskyNotificationUpdateSeenWithHttpInfoAsync(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'appBskyNotificationUpdateSeenRequest' is set
            if (appBskyNotificationUpdateSeenRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'appBskyNotificationUpdateSeenRequest' when calling AppBskyNotificationApi->AppBskyNotificationUpdateSeen");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = appBskyNotificationUpdateSeenRequest;

            localVarRequestOptions.Operation = "AppBskyNotificationApi.AppBskyNotificationUpdateSeen";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/app.bsky.notification.updateSeen", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationUpdateSeen", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
