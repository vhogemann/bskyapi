/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BSky.Client;
using BSky.Model;

namespace BSky.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoAdminApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a user account as an administrator.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoAdminDeleteAccount(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a user account as an administrator.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoAdminDeleteAccountWithHttpInfo(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoAdminDisableAccountInvites(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoAdminDisableAccountInvitesWithHttpInfo(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable some set of codes and/or all codes associated with a set of users.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoAdminDisableInviteCodes(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable some set of codes and/or all codes associated with a set of users.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoAdminDisableInviteCodesWithHttpInfo(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-enable an account&#39;s ability to receive invite codes.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoAdminEnableAccountInvites(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-enable an account&#39;s ability to receive invite codes.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoAdminEnableAccountInvitesWithHttpInfo(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about an account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminDefsAccountView</returns>
        ComAtprotoAdminDefsAccountView ComAtprotoAdminGetAccountInfo(string did, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about an account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsAccountView</returns>
        ApiResponse<ComAtprotoAdminDefsAccountView> ComAtprotoAdminGetAccountInfoWithHttpInfo(string did, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about some accounts.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminGetAccountInfos200Response</returns>
        ComAtprotoAdminGetAccountInfos200Response ComAtprotoAdminGetAccountInfos(List<string> dids, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about some accounts.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminGetAccountInfos200Response</returns>
        ApiResponse<ComAtprotoAdminGetAccountInfos200Response> ComAtprotoAdminGetAccountInfosWithHttpInfo(List<string> dids, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get an admin view of invite codes.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminGetInviteCodes200Response</returns>
        ComAtprotoAdminGetInviteCodes200Response ComAtprotoAdminGetInviteCodes(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get an admin view of invite codes.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminGetInviteCodes200Response</returns>
        ApiResponse<ComAtprotoAdminGetInviteCodes200Response> ComAtprotoAdminGetInviteCodesWithHttpInfo(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminGetSubjectStatus200Response</returns>
        ComAtprotoAdminGetSubjectStatus200Response ComAtprotoAdminGetSubjectStatus(string? did = default(string?), string? uri = default(string?), string? blob = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminGetSubjectStatus200Response</returns>
        ApiResponse<ComAtprotoAdminGetSubjectStatus200Response> ComAtprotoAdminGetSubjectStatusWithHttpInfo(string? did = default(string?), string? uri = default(string?), string? blob = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of accounts that matches your search query.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminSearchAccounts200Response</returns>
        ComAtprotoAdminSearchAccounts200Response ComAtprotoAdminSearchAccounts(string? email = default(string?), string? cursor = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of accounts that matches your search query.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminSearchAccounts200Response</returns>
        ApiResponse<ComAtprotoAdminSearchAccounts200Response> ComAtprotoAdminSearchAccountsWithHttpInfo(string? email = default(string?), string? cursor = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send email to a user&#39;s account email address.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminSendEmail200Response</returns>
        ComAtprotoAdminSendEmail200Response ComAtprotoAdminSendEmail(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send email to a user&#39;s account email address.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminSendEmail200Response</returns>
        ApiResponse<ComAtprotoAdminSendEmail200Response> ComAtprotoAdminSendEmailWithHttpInfo(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s email.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoAdminUpdateAccountEmail(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s email.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoAdminUpdateAccountEmailWithHttpInfo(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s handle.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoAdminUpdateAccountHandle(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s handle.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoAdminUpdateAccountHandleWithHttpInfo(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the password for a user account as an administrator.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoAdminUpdateAccountPassword(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the password for a user account as an administrator.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoAdminUpdateAccountPasswordWithHttpInfo(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminUpdateSubjectStatus200Response</returns>
        ComAtprotoAdminUpdateSubjectStatus200Response ComAtprotoAdminUpdateSubjectStatus(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminUpdateSubjectStatus200Response</returns>
        ApiResponse<ComAtprotoAdminUpdateSubjectStatus200Response> ComAtprotoAdminUpdateSubjectStatusWithHttpInfo(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoAdminApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a user account as an administrator.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoAdminDeleteAccountAsync(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a user account as an administrator.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoAdminDeleteAccountWithHttpInfoAsync(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoAdminDisableAccountInvitesAsync(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoAdminDisableAccountInvitesWithHttpInfoAsync(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable some set of codes and/or all codes associated with a set of users.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoAdminDisableInviteCodesAsync(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable some set of codes and/or all codes associated with a set of users.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoAdminDisableInviteCodesWithHttpInfoAsync(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-enable an account&#39;s ability to receive invite codes.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoAdminEnableAccountInvitesAsync(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-enable an account&#39;s ability to receive invite codes.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoAdminEnableAccountInvitesWithHttpInfoAsync(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about an account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsAccountView</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminDefsAccountView> ComAtprotoAdminGetAccountInfoAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about an account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsAccountView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminDefsAccountView>> ComAtprotoAdminGetAccountInfoWithHttpInfoAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about some accounts.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminGetAccountInfos200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminGetAccountInfos200Response> ComAtprotoAdminGetAccountInfosAsync(List<string> dids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about some accounts.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminGetAccountInfos200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminGetAccountInfos200Response>> ComAtprotoAdminGetAccountInfosWithHttpInfoAsync(List<string> dids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get an admin view of invite codes.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminGetInviteCodes200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminGetInviteCodes200Response> ComAtprotoAdminGetInviteCodesAsync(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get an admin view of invite codes.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminGetInviteCodes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminGetInviteCodes200Response>> ComAtprotoAdminGetInviteCodesWithHttpInfoAsync(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminGetSubjectStatus200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminGetSubjectStatus200Response> ComAtprotoAdminGetSubjectStatusAsync(string? did = default(string?), string? uri = default(string?), string? blob = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminGetSubjectStatus200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminGetSubjectStatus200Response>> ComAtprotoAdminGetSubjectStatusWithHttpInfoAsync(string? did = default(string?), string? uri = default(string?), string? blob = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of accounts that matches your search query.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminSearchAccounts200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminSearchAccounts200Response> ComAtprotoAdminSearchAccountsAsync(string? email = default(string?), string? cursor = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of accounts that matches your search query.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminSearchAccounts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminSearchAccounts200Response>> ComAtprotoAdminSearchAccountsWithHttpInfoAsync(string? email = default(string?), string? cursor = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send email to a user&#39;s account email address.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminSendEmail200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminSendEmail200Response> ComAtprotoAdminSendEmailAsync(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send email to a user&#39;s account email address.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminSendEmail200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminSendEmail200Response>> ComAtprotoAdminSendEmailWithHttpInfoAsync(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s email.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoAdminUpdateAccountEmailAsync(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s email.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoAdminUpdateAccountEmailWithHttpInfoAsync(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s handle.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoAdminUpdateAccountHandleAsync(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s handle.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoAdminUpdateAccountHandleWithHttpInfoAsync(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the password for a user account as an administrator.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoAdminUpdateAccountPasswordAsync(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the password for a user account as an administrator.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoAdminUpdateAccountPasswordWithHttpInfoAsync(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminUpdateSubjectStatus200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminUpdateSubjectStatus200Response> ComAtprotoAdminUpdateSubjectStatusAsync(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminUpdateSubjectStatus200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminUpdateSubjectStatus200Response>> ComAtprotoAdminUpdateSubjectStatusWithHttpInfoAsync(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoAdminApi : IComAtprotoAdminApiSync, IComAtprotoAdminApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ComAtprotoAdminApi : IComAtprotoAdminApi
    {
        private BSky.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComAtprotoAdminApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComAtprotoAdminApi(string basePath)
        {
            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                new BSky.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ComAtprotoAdminApi(BSky.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ComAtprotoAdminApi(BSky.Client.ISynchronousClient client, BSky.Client.IAsynchronousClient asyncClient, BSky.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BSky.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BSky.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BSky.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BSky.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Delete a user account as an administrator.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoAdminDeleteAccount(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0)
        {
            ComAtprotoAdminDeleteAccountWithHttpInfo(comAtprotoAdminDeleteAccountRequest);
        }

        /// <summary>
        ///  Delete a user account as an administrator.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoAdminDeleteAccountWithHttpInfo(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoAdminDeleteAccountRequest' is set
            if (comAtprotoAdminDeleteAccountRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDeleteAccountRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminDeleteAccount");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminDeleteAccountRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminDeleteAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.admin.deleteAccount", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminDeleteAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a user account as an administrator.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoAdminDeleteAccountAsync(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoAdminDeleteAccountWithHttpInfoAsync(comAtprotoAdminDeleteAccountRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete a user account as an administrator.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoAdminDeleteAccountWithHttpInfoAsync(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminDeleteAccountRequest' is set
            if (comAtprotoAdminDeleteAccountRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDeleteAccountRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminDeleteAccount");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminDeleteAccountRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminDeleteAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/com.atproto.admin.deleteAccount", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminDeleteAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoAdminDisableAccountInvites(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest, int operationIndex = 0)
        {
            ComAtprotoAdminDisableAccountInvitesWithHttpInfo(comAtprotoAdminDisableAccountInvitesRequest);
        }

        /// <summary>
        ///  Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoAdminDisableAccountInvitesWithHttpInfo(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoAdminDisableAccountInvitesRequest' is set
            if (comAtprotoAdminDisableAccountInvitesRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDisableAccountInvitesRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminDisableAccountInvites");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminDisableAccountInvitesRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminDisableAccountInvites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.admin.disableAccountInvites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminDisableAccountInvites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoAdminDisableAccountInvitesAsync(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoAdminDisableAccountInvitesWithHttpInfoAsync(comAtprotoAdminDisableAccountInvitesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoAdminDisableAccountInvitesWithHttpInfoAsync(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminDisableAccountInvitesRequest' is set
            if (comAtprotoAdminDisableAccountInvitesRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDisableAccountInvitesRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminDisableAccountInvites");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminDisableAccountInvitesRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminDisableAccountInvites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/com.atproto.admin.disableAccountInvites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminDisableAccountInvites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Disable some set of codes and/or all codes associated with a set of users.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoAdminDisableInviteCodes(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest, int operationIndex = 0)
        {
            ComAtprotoAdminDisableInviteCodesWithHttpInfo(comAtprotoAdminDisableInviteCodesRequest);
        }

        /// <summary>
        ///  Disable some set of codes and/or all codes associated with a set of users.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoAdminDisableInviteCodesWithHttpInfo(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoAdminDisableInviteCodesRequest' is set
            if (comAtprotoAdminDisableInviteCodesRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDisableInviteCodesRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminDisableInviteCodes");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminDisableInviteCodesRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminDisableInviteCodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.admin.disableInviteCodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminDisableInviteCodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Disable some set of codes and/or all codes associated with a set of users.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoAdminDisableInviteCodesAsync(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoAdminDisableInviteCodesWithHttpInfoAsync(comAtprotoAdminDisableInviteCodesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Disable some set of codes and/or all codes associated with a set of users.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoAdminDisableInviteCodesWithHttpInfoAsync(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminDisableInviteCodesRequest' is set
            if (comAtprotoAdminDisableInviteCodesRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDisableInviteCodesRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminDisableInviteCodes");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminDisableInviteCodesRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminDisableInviteCodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/com.atproto.admin.disableInviteCodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminDisableInviteCodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Re-enable an account&#39;s ability to receive invite codes.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoAdminEnableAccountInvites(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest, int operationIndex = 0)
        {
            ComAtprotoAdminEnableAccountInvitesWithHttpInfo(comAtprotoAdminEnableAccountInvitesRequest);
        }

        /// <summary>
        ///  Re-enable an account&#39;s ability to receive invite codes.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoAdminEnableAccountInvitesWithHttpInfo(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoAdminEnableAccountInvitesRequest' is set
            if (comAtprotoAdminEnableAccountInvitesRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminEnableAccountInvitesRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminEnableAccountInvites");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminEnableAccountInvitesRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminEnableAccountInvites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.admin.enableAccountInvites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminEnableAccountInvites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Re-enable an account&#39;s ability to receive invite codes.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoAdminEnableAccountInvitesAsync(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoAdminEnableAccountInvitesWithHttpInfoAsync(comAtprotoAdminEnableAccountInvitesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Re-enable an account&#39;s ability to receive invite codes.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoAdminEnableAccountInvitesWithHttpInfoAsync(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminEnableAccountInvitesRequest' is set
            if (comAtprotoAdminEnableAccountInvitesRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminEnableAccountInvitesRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminEnableAccountInvites");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminEnableAccountInvitesRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminEnableAccountInvites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/com.atproto.admin.enableAccountInvites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminEnableAccountInvites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about an account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminDefsAccountView</returns>
        public ComAtprotoAdminDefsAccountView ComAtprotoAdminGetAccountInfo(string did, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoAdminDefsAccountView> localVarResponse = ComAtprotoAdminGetAccountInfoWithHttpInfo(did);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about an account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsAccountView</returns>
        public BSky.Client.ApiResponse<ComAtprotoAdminDefsAccountView> ComAtprotoAdminGetAccountInfoWithHttpInfo(string did, int operationIndex = 0)
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoAdminApi->ComAtprotoAdminGetAccountInfo");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminGetAccountInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminDefsAccountView>("/com.atproto.admin.getAccountInfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetAccountInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about an account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsAccountView</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminDefsAccountView> ComAtprotoAdminGetAccountInfoAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoAdminDefsAccountView> localVarResponse = await ComAtprotoAdminGetAccountInfoWithHttpInfoAsync(did, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about an account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsAccountView)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoAdminDefsAccountView>> ComAtprotoAdminGetAccountInfoWithHttpInfoAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoAdminApi->ComAtprotoAdminGetAccountInfo");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminGetAccountInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComAtprotoAdminDefsAccountView>("/com.atproto.admin.getAccountInfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetAccountInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about some accounts.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminGetAccountInfos200Response</returns>
        public ComAtprotoAdminGetAccountInfos200Response ComAtprotoAdminGetAccountInfos(List<string> dids, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoAdminGetAccountInfos200Response> localVarResponse = ComAtprotoAdminGetAccountInfosWithHttpInfo(dids);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about some accounts.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminGetAccountInfos200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoAdminGetAccountInfos200Response> ComAtprotoAdminGetAccountInfosWithHttpInfo(List<string> dids, int operationIndex = 0)
        {
            // verify the required parameter 'dids' is set
            if (dids == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'dids' when calling ComAtprotoAdminApi->ComAtprotoAdminGetAccountInfos");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "dids", dids));

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminGetAccountInfos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminGetAccountInfos200Response>("/com.atproto.admin.getAccountInfos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetAccountInfos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about some accounts.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminGetAccountInfos200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminGetAccountInfos200Response> ComAtprotoAdminGetAccountInfosAsync(List<string> dids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoAdminGetAccountInfos200Response> localVarResponse = await ComAtprotoAdminGetAccountInfosWithHttpInfoAsync(dids, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about some accounts.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminGetAccountInfos200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoAdminGetAccountInfos200Response>> ComAtprotoAdminGetAccountInfosWithHttpInfoAsync(List<string> dids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'dids' is set
            if (dids == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'dids' when calling ComAtprotoAdminApi->ComAtprotoAdminGetAccountInfos");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "dids", dids));

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminGetAccountInfos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComAtprotoAdminGetAccountInfos200Response>("/com.atproto.admin.getAccountInfos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetAccountInfos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get an admin view of invite codes.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminGetInviteCodes200Response</returns>
        public ComAtprotoAdminGetInviteCodes200Response ComAtprotoAdminGetInviteCodes(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoAdminGetInviteCodes200Response> localVarResponse = ComAtprotoAdminGetInviteCodesWithHttpInfo(sort, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get an admin view of invite codes.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminGetInviteCodes200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoAdminGetInviteCodes200Response> ComAtprotoAdminGetInviteCodesWithHttpInfo(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminGetInviteCodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminGetInviteCodes200Response>("/com.atproto.admin.getInviteCodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetInviteCodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get an admin view of invite codes.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminGetInviteCodes200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminGetInviteCodes200Response> ComAtprotoAdminGetInviteCodesAsync(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoAdminGetInviteCodes200Response> localVarResponse = await ComAtprotoAdminGetInviteCodesWithHttpInfoAsync(sort, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get an admin view of invite codes.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminGetInviteCodes200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoAdminGetInviteCodes200Response>> ComAtprotoAdminGetInviteCodesWithHttpInfoAsync(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminGetInviteCodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComAtprotoAdminGetInviteCodes200Response>("/com.atproto.admin.getInviteCodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetInviteCodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminGetSubjectStatus200Response</returns>
        public ComAtprotoAdminGetSubjectStatus200Response ComAtprotoAdminGetSubjectStatus(string? did = default(string?), string? uri = default(string?), string? blob = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoAdminGetSubjectStatus200Response> localVarResponse = ComAtprotoAdminGetSubjectStatusWithHttpInfo(did, uri, blob);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminGetSubjectStatus200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoAdminGetSubjectStatus200Response> ComAtprotoAdminGetSubjectStatusWithHttpInfo(string? did = default(string?), string? uri = default(string?), string? blob = default(string?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (did != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));
            }
            if (uri != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            }
            if (blob != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "blob", blob));
            }

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminGetSubjectStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminGetSubjectStatus200Response>("/com.atproto.admin.getSubjectStatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetSubjectStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminGetSubjectStatus200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminGetSubjectStatus200Response> ComAtprotoAdminGetSubjectStatusAsync(string? did = default(string?), string? uri = default(string?), string? blob = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoAdminGetSubjectStatus200Response> localVarResponse = await ComAtprotoAdminGetSubjectStatusWithHttpInfoAsync(did, uri, blob, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminGetSubjectStatus200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoAdminGetSubjectStatus200Response>> ComAtprotoAdminGetSubjectStatusWithHttpInfoAsync(string? did = default(string?), string? uri = default(string?), string? blob = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (did != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));
            }
            if (uri != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            }
            if (blob != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "blob", blob));
            }

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminGetSubjectStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComAtprotoAdminGetSubjectStatus200Response>("/com.atproto.admin.getSubjectStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetSubjectStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get list of accounts that matches your search query.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminSearchAccounts200Response</returns>
        public ComAtprotoAdminSearchAccounts200Response ComAtprotoAdminSearchAccounts(string? email = default(string?), string? cursor = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoAdminSearchAccounts200Response> localVarResponse = ComAtprotoAdminSearchAccountsWithHttpInfo(email, cursor, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get list of accounts that matches your search query.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminSearchAccounts200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoAdminSearchAccounts200Response> ComAtprotoAdminSearchAccountsWithHttpInfo(string? email = default(string?), string? cursor = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminSearchAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminSearchAccounts200Response>("/com.atproto.admin.searchAccounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminSearchAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get list of accounts that matches your search query.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminSearchAccounts200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminSearchAccounts200Response> ComAtprotoAdminSearchAccountsAsync(string? email = default(string?), string? cursor = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoAdminSearchAccounts200Response> localVarResponse = await ComAtprotoAdminSearchAccountsWithHttpInfoAsync(email, cursor, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get list of accounts that matches your search query.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminSearchAccounts200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoAdminSearchAccounts200Response>> ComAtprotoAdminSearchAccountsWithHttpInfoAsync(string? email = default(string?), string? cursor = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminSearchAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComAtprotoAdminSearchAccounts200Response>("/com.atproto.admin.searchAccounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminSearchAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Send email to a user&#39;s account email address.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminSendEmail200Response</returns>
        public ComAtprotoAdminSendEmail200Response ComAtprotoAdminSendEmail(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoAdminSendEmail200Response> localVarResponse = ComAtprotoAdminSendEmailWithHttpInfo(comAtprotoAdminSendEmailRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Send email to a user&#39;s account email address.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminSendEmail200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoAdminSendEmail200Response> ComAtprotoAdminSendEmailWithHttpInfo(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoAdminSendEmailRequest' is set
            if (comAtprotoAdminSendEmailRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminSendEmailRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminSendEmail");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminSendEmailRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminSendEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoAdminSendEmail200Response>("/com.atproto.admin.sendEmail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminSendEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Send email to a user&#39;s account email address.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminSendEmail200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminSendEmail200Response> ComAtprotoAdminSendEmailAsync(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoAdminSendEmail200Response> localVarResponse = await ComAtprotoAdminSendEmailWithHttpInfoAsync(comAtprotoAdminSendEmailRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Send email to a user&#39;s account email address.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminSendEmail200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoAdminSendEmail200Response>> ComAtprotoAdminSendEmailWithHttpInfoAsync(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminSendEmailRequest' is set
            if (comAtprotoAdminSendEmailRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminSendEmailRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminSendEmail");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminSendEmailRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminSendEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ComAtprotoAdminSendEmail200Response>("/com.atproto.admin.sendEmail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminSendEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s email.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoAdminUpdateAccountEmail(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest, int operationIndex = 0)
        {
            ComAtprotoAdminUpdateAccountEmailWithHttpInfo(comAtprotoAdminUpdateAccountEmailRequest);
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s email.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoAdminUpdateAccountEmailWithHttpInfo(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoAdminUpdateAccountEmailRequest' is set
            if (comAtprotoAdminUpdateAccountEmailRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminUpdateAccountEmailRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateAccountEmail");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminUpdateAccountEmailRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminUpdateAccountEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.admin.updateAccountEmail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateAccountEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s email.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoAdminUpdateAccountEmailAsync(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoAdminUpdateAccountEmailWithHttpInfoAsync(comAtprotoAdminUpdateAccountEmailRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s email.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoAdminUpdateAccountEmailWithHttpInfoAsync(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminUpdateAccountEmailRequest' is set
            if (comAtprotoAdminUpdateAccountEmailRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminUpdateAccountEmailRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateAccountEmail");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminUpdateAccountEmailRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminUpdateAccountEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/com.atproto.admin.updateAccountEmail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateAccountEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s handle.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoAdminUpdateAccountHandle(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest, int operationIndex = 0)
        {
            ComAtprotoAdminUpdateAccountHandleWithHttpInfo(comAtprotoAdminUpdateAccountHandleRequest);
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s handle.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoAdminUpdateAccountHandleWithHttpInfo(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoAdminUpdateAccountHandleRequest' is set
            if (comAtprotoAdminUpdateAccountHandleRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminUpdateAccountHandleRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateAccountHandle");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminUpdateAccountHandleRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminUpdateAccountHandle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.admin.updateAccountHandle", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateAccountHandle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s handle.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoAdminUpdateAccountHandleAsync(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoAdminUpdateAccountHandleWithHttpInfoAsync(comAtprotoAdminUpdateAccountHandleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s handle.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoAdminUpdateAccountHandleWithHttpInfoAsync(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminUpdateAccountHandleRequest' is set
            if (comAtprotoAdminUpdateAccountHandleRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminUpdateAccountHandleRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateAccountHandle");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminUpdateAccountHandleRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminUpdateAccountHandle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/com.atproto.admin.updateAccountHandle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateAccountHandle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update the password for a user account as an administrator.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoAdminUpdateAccountPassword(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest, int operationIndex = 0)
        {
            ComAtprotoAdminUpdateAccountPasswordWithHttpInfo(comAtprotoAdminUpdateAccountPasswordRequest);
        }

        /// <summary>
        ///  Update the password for a user account as an administrator.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoAdminUpdateAccountPasswordWithHttpInfo(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoAdminUpdateAccountPasswordRequest' is set
            if (comAtprotoAdminUpdateAccountPasswordRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminUpdateAccountPasswordRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateAccountPassword");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminUpdateAccountPasswordRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminUpdateAccountPassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.admin.updateAccountPassword", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateAccountPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update the password for a user account as an administrator.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoAdminUpdateAccountPasswordAsync(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoAdminUpdateAccountPasswordWithHttpInfoAsync(comAtprotoAdminUpdateAccountPasswordRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Update the password for a user account as an administrator.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoAdminUpdateAccountPasswordWithHttpInfoAsync(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminUpdateAccountPasswordRequest' is set
            if (comAtprotoAdminUpdateAccountPasswordRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminUpdateAccountPasswordRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateAccountPassword");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminUpdateAccountPasswordRequest;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminUpdateAccountPassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/com.atproto.admin.updateAccountPassword", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateAccountPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminUpdateSubjectStatus200Response</returns>
        public ComAtprotoAdminUpdateSubjectStatus200Response ComAtprotoAdminUpdateSubjectStatus(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoAdminUpdateSubjectStatus200Response> localVarResponse = ComAtprotoAdminUpdateSubjectStatusWithHttpInfo(comAtprotoAdminGetSubjectStatus200Response);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminUpdateSubjectStatus200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoAdminUpdateSubjectStatus200Response> ComAtprotoAdminUpdateSubjectStatusWithHttpInfo(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoAdminGetSubjectStatus200Response' is set
            if (comAtprotoAdminGetSubjectStatus200Response == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminGetSubjectStatus200Response' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateSubjectStatus");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminGetSubjectStatus200Response;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminUpdateSubjectStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoAdminUpdateSubjectStatus200Response>("/com.atproto.admin.updateSubjectStatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateSubjectStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminUpdateSubjectStatus200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminUpdateSubjectStatus200Response> ComAtprotoAdminUpdateSubjectStatusAsync(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoAdminUpdateSubjectStatus200Response> localVarResponse = await ComAtprotoAdminUpdateSubjectStatusWithHttpInfoAsync(comAtprotoAdminGetSubjectStatus200Response, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminUpdateSubjectStatus200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoAdminUpdateSubjectStatus200Response>> ComAtprotoAdminUpdateSubjectStatusWithHttpInfoAsync(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminGetSubjectStatus200Response' is set
            if (comAtprotoAdminGetSubjectStatus200Response == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminGetSubjectStatus200Response' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateSubjectStatus");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoAdminGetSubjectStatus200Response;

            localVarRequestOptions.Operation = "ComAtprotoAdminApi.ComAtprotoAdminUpdateSubjectStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ComAtprotoAdminUpdateSubjectStatus200Response>("/com.atproto.admin.updateSubjectStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateSubjectStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
