/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BSky.Client;
using BSky.Model;

namespace BSky.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChatBskyConvoApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoDeleteMessageForSelfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoDefsDeletedMessageView</returns>
        ChatBskyConvoDefsDeletedMessageView ChatBskyConvoDeleteMessageForSelf(ChatBskyConvoDeleteMessageForSelfRequest chatBskyConvoDeleteMessageForSelfRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoDeleteMessageForSelfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoDefsDeletedMessageView</returns>
        ApiResponse<ChatBskyConvoDefsDeletedMessageView> ChatBskyConvoDeleteMessageForSelfWithHttpInfo(ChatBskyConvoDeleteMessageForSelfRequest chatBskyConvoDeleteMessageForSelfRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoGetConvo200Response</returns>
        ChatBskyConvoGetConvo200Response ChatBskyConvoGetConvo(string convoId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoGetConvo200Response</returns>
        ApiResponse<ChatBskyConvoGetConvo200Response> ChatBskyConvoGetConvoWithHttpInfo(string convoId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="members"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoGetConvo200Response</returns>
        ChatBskyConvoGetConvo200Response ChatBskyConvoGetConvoForMembers(List<string> members, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="members"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoGetConvo200Response</returns>
        ApiResponse<ChatBskyConvoGetConvo200Response> ChatBskyConvoGetConvoForMembersWithHttpInfo(List<string> members, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoGetLog200Response</returns>
        ChatBskyConvoGetLog200Response ChatBskyConvoGetLog(string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoGetLog200Response</returns>
        ApiResponse<ChatBskyConvoGetLog200Response> ChatBskyConvoGetLogWithHttpInfo(string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoGetMessages200Response</returns>
        ChatBskyConvoGetMessages200Response ChatBskyConvoGetMessages(string convoId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoGetMessages200Response</returns>
        ApiResponse<ChatBskyConvoGetMessages200Response> ChatBskyConvoGetMessagesWithHttpInfo(string convoId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoLeaveConvo200Response</returns>
        ChatBskyConvoLeaveConvo200Response ChatBskyConvoLeaveConvo(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoLeaveConvo200Response</returns>
        ApiResponse<ChatBskyConvoLeaveConvo200Response> ChatBskyConvoLeaveConvoWithHttpInfo(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoListConvos200Response</returns>
        ChatBskyConvoListConvos200Response ChatBskyConvoListConvos(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoListConvos200Response</returns>
        ApiResponse<ChatBskyConvoListConvos200Response> ChatBskyConvoListConvosWithHttpInfo(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoGetConvo200Response</returns>
        ChatBskyConvoGetConvo200Response ChatBskyConvoMuteConvo(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoGetConvo200Response</returns>
        ApiResponse<ChatBskyConvoGetConvo200Response> ChatBskyConvoMuteConvoWithHttpInfo(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoDefsMessageView</returns>
        ChatBskyConvoDefsMessageView ChatBskyConvoSendMessage(ChatBskyConvoSendMessageRequest chatBskyConvoSendMessageRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoDefsMessageView</returns>
        ApiResponse<ChatBskyConvoDefsMessageView> ChatBskyConvoSendMessageWithHttpInfo(ChatBskyConvoSendMessageRequest chatBskyConvoSendMessageRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoSendMessageBatch200Response</returns>
        ChatBskyConvoSendMessageBatch200Response ChatBskyConvoSendMessageBatch(ChatBskyConvoSendMessageBatchRequest chatBskyConvoSendMessageBatchRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoSendMessageBatch200Response</returns>
        ApiResponse<ChatBskyConvoSendMessageBatch200Response> ChatBskyConvoSendMessageBatchWithHttpInfo(ChatBskyConvoSendMessageBatchRequest chatBskyConvoSendMessageBatchRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoGetConvo200Response</returns>
        ChatBskyConvoGetConvo200Response ChatBskyConvoUnmuteConvo(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoGetConvo200Response</returns>
        ApiResponse<ChatBskyConvoGetConvo200Response> ChatBskyConvoUnmuteConvoWithHttpInfo(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoUpdateReadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoGetConvo200Response</returns>
        ChatBskyConvoGetConvo200Response ChatBskyConvoUpdateRead(ChatBskyConvoUpdateReadRequest chatBskyConvoUpdateReadRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoUpdateReadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoGetConvo200Response</returns>
        ApiResponse<ChatBskyConvoGetConvo200Response> ChatBskyConvoUpdateReadWithHttpInfo(ChatBskyConvoUpdateReadRequest chatBskyConvoUpdateReadRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChatBskyConvoApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoDeleteMessageForSelfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoDefsDeletedMessageView</returns>
        System.Threading.Tasks.Task<ChatBskyConvoDefsDeletedMessageView> ChatBskyConvoDeleteMessageForSelfAsync(ChatBskyConvoDeleteMessageForSelfRequest chatBskyConvoDeleteMessageForSelfRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoDeleteMessageForSelfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoDefsDeletedMessageView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatBskyConvoDefsDeletedMessageView>> ChatBskyConvoDeleteMessageForSelfWithHttpInfoAsync(ChatBskyConvoDeleteMessageForSelfRequest chatBskyConvoDeleteMessageForSelfRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoGetConvo200Response</returns>
        System.Threading.Tasks.Task<ChatBskyConvoGetConvo200Response> ChatBskyConvoGetConvoAsync(string convoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoGetConvo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatBskyConvoGetConvo200Response>> ChatBskyConvoGetConvoWithHttpInfoAsync(string convoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="members"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoGetConvo200Response</returns>
        System.Threading.Tasks.Task<ChatBskyConvoGetConvo200Response> ChatBskyConvoGetConvoForMembersAsync(List<string> members, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="members"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoGetConvo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatBskyConvoGetConvo200Response>> ChatBskyConvoGetConvoForMembersWithHttpInfoAsync(List<string> members, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoGetLog200Response</returns>
        System.Threading.Tasks.Task<ChatBskyConvoGetLog200Response> ChatBskyConvoGetLogAsync(string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoGetLog200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatBskyConvoGetLog200Response>> ChatBskyConvoGetLogWithHttpInfoAsync(string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoGetMessages200Response</returns>
        System.Threading.Tasks.Task<ChatBskyConvoGetMessages200Response> ChatBskyConvoGetMessagesAsync(string convoId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoGetMessages200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatBskyConvoGetMessages200Response>> ChatBskyConvoGetMessagesWithHttpInfoAsync(string convoId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoLeaveConvo200Response</returns>
        System.Threading.Tasks.Task<ChatBskyConvoLeaveConvo200Response> ChatBskyConvoLeaveConvoAsync(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoLeaveConvo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatBskyConvoLeaveConvo200Response>> ChatBskyConvoLeaveConvoWithHttpInfoAsync(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoListConvos200Response</returns>
        System.Threading.Tasks.Task<ChatBskyConvoListConvos200Response> ChatBskyConvoListConvosAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoListConvos200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatBskyConvoListConvos200Response>> ChatBskyConvoListConvosWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoGetConvo200Response</returns>
        System.Threading.Tasks.Task<ChatBskyConvoGetConvo200Response> ChatBskyConvoMuteConvoAsync(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoGetConvo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatBskyConvoGetConvo200Response>> ChatBskyConvoMuteConvoWithHttpInfoAsync(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoDefsMessageView</returns>
        System.Threading.Tasks.Task<ChatBskyConvoDefsMessageView> ChatBskyConvoSendMessageAsync(ChatBskyConvoSendMessageRequest chatBskyConvoSendMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoDefsMessageView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatBskyConvoDefsMessageView>> ChatBskyConvoSendMessageWithHttpInfoAsync(ChatBskyConvoSendMessageRequest chatBskyConvoSendMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoSendMessageBatch200Response</returns>
        System.Threading.Tasks.Task<ChatBskyConvoSendMessageBatch200Response> ChatBskyConvoSendMessageBatchAsync(ChatBskyConvoSendMessageBatchRequest chatBskyConvoSendMessageBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoSendMessageBatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatBskyConvoSendMessageBatch200Response>> ChatBskyConvoSendMessageBatchWithHttpInfoAsync(ChatBskyConvoSendMessageBatchRequest chatBskyConvoSendMessageBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoGetConvo200Response</returns>
        System.Threading.Tasks.Task<ChatBskyConvoGetConvo200Response> ChatBskyConvoUnmuteConvoAsync(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoGetConvo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatBskyConvoGetConvo200Response>> ChatBskyConvoUnmuteConvoWithHttpInfoAsync(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoUpdateReadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoGetConvo200Response</returns>
        System.Threading.Tasks.Task<ChatBskyConvoGetConvo200Response> ChatBskyConvoUpdateReadAsync(ChatBskyConvoUpdateReadRequest chatBskyConvoUpdateReadRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoUpdateReadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoGetConvo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatBskyConvoGetConvo200Response>> ChatBskyConvoUpdateReadWithHttpInfoAsync(ChatBskyConvoUpdateReadRequest chatBskyConvoUpdateReadRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChatBskyConvoApi : IChatBskyConvoApiSync, IChatBskyConvoApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChatBskyConvoApi : IChatBskyConvoApi
    {
        private BSky.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatBskyConvoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChatBskyConvoApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatBskyConvoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChatBskyConvoApi(string basePath)
        {
            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                new BSky.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatBskyConvoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChatBskyConvoApi(BSky.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatBskyConvoApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChatBskyConvoApi(BSky.Client.ISynchronousClient client, BSky.Client.IAsynchronousClient asyncClient, BSky.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BSky.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BSky.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BSky.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BSky.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoDeleteMessageForSelfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoDefsDeletedMessageView</returns>
        public ChatBskyConvoDefsDeletedMessageView ChatBskyConvoDeleteMessageForSelf(ChatBskyConvoDeleteMessageForSelfRequest chatBskyConvoDeleteMessageForSelfRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ChatBskyConvoDefsDeletedMessageView> localVarResponse = ChatBskyConvoDeleteMessageForSelfWithHttpInfo(chatBskyConvoDeleteMessageForSelfRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoDeleteMessageForSelfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoDefsDeletedMessageView</returns>
        public BSky.Client.ApiResponse<ChatBskyConvoDefsDeletedMessageView> ChatBskyConvoDeleteMessageForSelfWithHttpInfo(ChatBskyConvoDeleteMessageForSelfRequest chatBskyConvoDeleteMessageForSelfRequest, int operationIndex = 0)
        {
            // verify the required parameter 'chatBskyConvoDeleteMessageForSelfRequest' is set
            if (chatBskyConvoDeleteMessageForSelfRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyConvoDeleteMessageForSelfRequest' when calling ChatBskyConvoApi->ChatBskyConvoDeleteMessageForSelf");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyConvoDeleteMessageForSelfRequest;

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoDeleteMessageForSelf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChatBskyConvoDefsDeletedMessageView>("/chat.bsky.convo.deleteMessageForSelf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoDeleteMessageForSelf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoDeleteMessageForSelfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoDefsDeletedMessageView</returns>
        public async System.Threading.Tasks.Task<ChatBskyConvoDefsDeletedMessageView> ChatBskyConvoDeleteMessageForSelfAsync(ChatBskyConvoDeleteMessageForSelfRequest chatBskyConvoDeleteMessageForSelfRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ChatBskyConvoDefsDeletedMessageView> localVarResponse = await ChatBskyConvoDeleteMessageForSelfWithHttpInfoAsync(chatBskyConvoDeleteMessageForSelfRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoDeleteMessageForSelfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoDefsDeletedMessageView)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ChatBskyConvoDefsDeletedMessageView>> ChatBskyConvoDeleteMessageForSelfWithHttpInfoAsync(ChatBskyConvoDeleteMessageForSelfRequest chatBskyConvoDeleteMessageForSelfRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chatBskyConvoDeleteMessageForSelfRequest' is set
            if (chatBskyConvoDeleteMessageForSelfRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyConvoDeleteMessageForSelfRequest' when calling ChatBskyConvoApi->ChatBskyConvoDeleteMessageForSelf");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyConvoDeleteMessageForSelfRequest;

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoDeleteMessageForSelf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChatBskyConvoDefsDeletedMessageView>("/chat.bsky.convo.deleteMessageForSelf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoDeleteMessageForSelf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoGetConvo200Response</returns>
        public ChatBskyConvoGetConvo200Response ChatBskyConvoGetConvo(string convoId, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response> localVarResponse = ChatBskyConvoGetConvoWithHttpInfo(convoId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoGetConvo200Response</returns>
        public BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response> ChatBskyConvoGetConvoWithHttpInfo(string convoId, int operationIndex = 0)
        {
            // verify the required parameter 'convoId' is set
            if (convoId == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'convoId' when calling ChatBskyConvoApi->ChatBskyConvoGetConvo");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "convoId", convoId));

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoGetConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ChatBskyConvoGetConvo200Response>("/chat.bsky.convo.getConvo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoGetConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoGetConvo200Response</returns>
        public async System.Threading.Tasks.Task<ChatBskyConvoGetConvo200Response> ChatBskyConvoGetConvoAsync(string convoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response> localVarResponse = await ChatBskyConvoGetConvoWithHttpInfoAsync(convoId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoGetConvo200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response>> ChatBskyConvoGetConvoWithHttpInfoAsync(string convoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'convoId' is set
            if (convoId == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'convoId' when calling ChatBskyConvoApi->ChatBskyConvoGetConvo");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "convoId", convoId));

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoGetConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ChatBskyConvoGetConvo200Response>("/chat.bsky.convo.getConvo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoGetConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="members"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoGetConvo200Response</returns>
        public ChatBskyConvoGetConvo200Response ChatBskyConvoGetConvoForMembers(List<string> members, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response> localVarResponse = ChatBskyConvoGetConvoForMembersWithHttpInfo(members);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="members"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoGetConvo200Response</returns>
        public BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response> ChatBskyConvoGetConvoForMembersWithHttpInfo(List<string> members, int operationIndex = 0)
        {
            // verify the required parameter 'members' is set
            if (members == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'members' when calling ChatBskyConvoApi->ChatBskyConvoGetConvoForMembers");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "members", members));

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoGetConvoForMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ChatBskyConvoGetConvo200Response>("/chat.bsky.convo.getConvoForMembers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoGetConvoForMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="members"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoGetConvo200Response</returns>
        public async System.Threading.Tasks.Task<ChatBskyConvoGetConvo200Response> ChatBskyConvoGetConvoForMembersAsync(List<string> members, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response> localVarResponse = await ChatBskyConvoGetConvoForMembersWithHttpInfoAsync(members, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="members"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoGetConvo200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response>> ChatBskyConvoGetConvoForMembersWithHttpInfoAsync(List<string> members, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'members' is set
            if (members == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'members' when calling ChatBskyConvoApi->ChatBskyConvoGetConvoForMembers");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "members", members));

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoGetConvoForMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ChatBskyConvoGetConvo200Response>("/chat.bsky.convo.getConvoForMembers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoGetConvoForMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoGetLog200Response</returns>
        public ChatBskyConvoGetLog200Response ChatBskyConvoGetLog(string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ChatBskyConvoGetLog200Response> localVarResponse = ChatBskyConvoGetLogWithHttpInfo(cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoGetLog200Response</returns>
        public BSky.Client.ApiResponse<ChatBskyConvoGetLog200Response> ChatBskyConvoGetLogWithHttpInfo(string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoGetLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ChatBskyConvoGetLog200Response>("/chat.bsky.convo.getLog", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoGetLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoGetLog200Response</returns>
        public async System.Threading.Tasks.Task<ChatBskyConvoGetLog200Response> ChatBskyConvoGetLogAsync(string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ChatBskyConvoGetLog200Response> localVarResponse = await ChatBskyConvoGetLogWithHttpInfoAsync(cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoGetLog200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ChatBskyConvoGetLog200Response>> ChatBskyConvoGetLogWithHttpInfoAsync(string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoGetLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ChatBskyConvoGetLog200Response>("/chat.bsky.convo.getLog", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoGetLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoGetMessages200Response</returns>
        public ChatBskyConvoGetMessages200Response ChatBskyConvoGetMessages(string convoId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ChatBskyConvoGetMessages200Response> localVarResponse = ChatBskyConvoGetMessagesWithHttpInfo(convoId, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoGetMessages200Response</returns>
        public BSky.Client.ApiResponse<ChatBskyConvoGetMessages200Response> ChatBskyConvoGetMessagesWithHttpInfo(string convoId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'convoId' is set
            if (convoId == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'convoId' when calling ChatBskyConvoApi->ChatBskyConvoGetMessages");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "convoId", convoId));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoGetMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ChatBskyConvoGetMessages200Response>("/chat.bsky.convo.getMessages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoGetMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoGetMessages200Response</returns>
        public async System.Threading.Tasks.Task<ChatBskyConvoGetMessages200Response> ChatBskyConvoGetMessagesAsync(string convoId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ChatBskyConvoGetMessages200Response> localVarResponse = await ChatBskyConvoGetMessagesWithHttpInfoAsync(convoId, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoId"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoGetMessages200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ChatBskyConvoGetMessages200Response>> ChatBskyConvoGetMessagesWithHttpInfoAsync(string convoId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'convoId' is set
            if (convoId == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'convoId' when calling ChatBskyConvoApi->ChatBskyConvoGetMessages");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "convoId", convoId));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoGetMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ChatBskyConvoGetMessages200Response>("/chat.bsky.convo.getMessages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoGetMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoLeaveConvo200Response</returns>
        public ChatBskyConvoLeaveConvo200Response ChatBskyConvoLeaveConvo(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ChatBskyConvoLeaveConvo200Response> localVarResponse = ChatBskyConvoLeaveConvoWithHttpInfo(chatBskyConvoLeaveConvoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoLeaveConvo200Response</returns>
        public BSky.Client.ApiResponse<ChatBskyConvoLeaveConvo200Response> ChatBskyConvoLeaveConvoWithHttpInfo(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0)
        {
            // verify the required parameter 'chatBskyConvoLeaveConvoRequest' is set
            if (chatBskyConvoLeaveConvoRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyConvoLeaveConvoRequest' when calling ChatBskyConvoApi->ChatBskyConvoLeaveConvo");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyConvoLeaveConvoRequest;

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoLeaveConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChatBskyConvoLeaveConvo200Response>("/chat.bsky.convo.leaveConvo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoLeaveConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoLeaveConvo200Response</returns>
        public async System.Threading.Tasks.Task<ChatBskyConvoLeaveConvo200Response> ChatBskyConvoLeaveConvoAsync(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ChatBskyConvoLeaveConvo200Response> localVarResponse = await ChatBskyConvoLeaveConvoWithHttpInfoAsync(chatBskyConvoLeaveConvoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoLeaveConvo200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ChatBskyConvoLeaveConvo200Response>> ChatBskyConvoLeaveConvoWithHttpInfoAsync(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chatBskyConvoLeaveConvoRequest' is set
            if (chatBskyConvoLeaveConvoRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyConvoLeaveConvoRequest' when calling ChatBskyConvoApi->ChatBskyConvoLeaveConvo");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyConvoLeaveConvoRequest;

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoLeaveConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChatBskyConvoLeaveConvo200Response>("/chat.bsky.convo.leaveConvo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoLeaveConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoListConvos200Response</returns>
        public ChatBskyConvoListConvos200Response ChatBskyConvoListConvos(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ChatBskyConvoListConvos200Response> localVarResponse = ChatBskyConvoListConvosWithHttpInfo(limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoListConvos200Response</returns>
        public BSky.Client.ApiResponse<ChatBskyConvoListConvos200Response> ChatBskyConvoListConvosWithHttpInfo(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoListConvos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ChatBskyConvoListConvos200Response>("/chat.bsky.convo.listConvos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoListConvos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoListConvos200Response</returns>
        public async System.Threading.Tasks.Task<ChatBskyConvoListConvos200Response> ChatBskyConvoListConvosAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ChatBskyConvoListConvos200Response> localVarResponse = await ChatBskyConvoListConvosWithHttpInfoAsync(limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoListConvos200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ChatBskyConvoListConvos200Response>> ChatBskyConvoListConvosWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoListConvos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ChatBskyConvoListConvos200Response>("/chat.bsky.convo.listConvos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoListConvos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoGetConvo200Response</returns>
        public ChatBskyConvoGetConvo200Response ChatBskyConvoMuteConvo(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response> localVarResponse = ChatBskyConvoMuteConvoWithHttpInfo(chatBskyConvoLeaveConvoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoGetConvo200Response</returns>
        public BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response> ChatBskyConvoMuteConvoWithHttpInfo(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0)
        {
            // verify the required parameter 'chatBskyConvoLeaveConvoRequest' is set
            if (chatBskyConvoLeaveConvoRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyConvoLeaveConvoRequest' when calling ChatBskyConvoApi->ChatBskyConvoMuteConvo");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyConvoLeaveConvoRequest;

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoMuteConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChatBskyConvoGetConvo200Response>("/chat.bsky.convo.muteConvo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoMuteConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoGetConvo200Response</returns>
        public async System.Threading.Tasks.Task<ChatBskyConvoGetConvo200Response> ChatBskyConvoMuteConvoAsync(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response> localVarResponse = await ChatBskyConvoMuteConvoWithHttpInfoAsync(chatBskyConvoLeaveConvoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoGetConvo200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response>> ChatBskyConvoMuteConvoWithHttpInfoAsync(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chatBskyConvoLeaveConvoRequest' is set
            if (chatBskyConvoLeaveConvoRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyConvoLeaveConvoRequest' when calling ChatBskyConvoApi->ChatBskyConvoMuteConvo");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyConvoLeaveConvoRequest;

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoMuteConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChatBskyConvoGetConvo200Response>("/chat.bsky.convo.muteConvo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoMuteConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoDefsMessageView</returns>
        public ChatBskyConvoDefsMessageView ChatBskyConvoSendMessage(ChatBskyConvoSendMessageRequest chatBskyConvoSendMessageRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ChatBskyConvoDefsMessageView> localVarResponse = ChatBskyConvoSendMessageWithHttpInfo(chatBskyConvoSendMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoDefsMessageView</returns>
        public BSky.Client.ApiResponse<ChatBskyConvoDefsMessageView> ChatBskyConvoSendMessageWithHttpInfo(ChatBskyConvoSendMessageRequest chatBskyConvoSendMessageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'chatBskyConvoSendMessageRequest' is set
            if (chatBskyConvoSendMessageRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyConvoSendMessageRequest' when calling ChatBskyConvoApi->ChatBskyConvoSendMessage");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyConvoSendMessageRequest;

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoSendMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChatBskyConvoDefsMessageView>("/chat.bsky.convo.sendMessage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoSendMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoDefsMessageView</returns>
        public async System.Threading.Tasks.Task<ChatBskyConvoDefsMessageView> ChatBskyConvoSendMessageAsync(ChatBskyConvoSendMessageRequest chatBskyConvoSendMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ChatBskyConvoDefsMessageView> localVarResponse = await ChatBskyConvoSendMessageWithHttpInfoAsync(chatBskyConvoSendMessageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoDefsMessageView)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ChatBskyConvoDefsMessageView>> ChatBskyConvoSendMessageWithHttpInfoAsync(ChatBskyConvoSendMessageRequest chatBskyConvoSendMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chatBskyConvoSendMessageRequest' is set
            if (chatBskyConvoSendMessageRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyConvoSendMessageRequest' when calling ChatBskyConvoApi->ChatBskyConvoSendMessage");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyConvoSendMessageRequest;

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoSendMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChatBskyConvoDefsMessageView>("/chat.bsky.convo.sendMessage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoSendMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoSendMessageBatch200Response</returns>
        public ChatBskyConvoSendMessageBatch200Response ChatBskyConvoSendMessageBatch(ChatBskyConvoSendMessageBatchRequest chatBskyConvoSendMessageBatchRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ChatBskyConvoSendMessageBatch200Response> localVarResponse = ChatBskyConvoSendMessageBatchWithHttpInfo(chatBskyConvoSendMessageBatchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoSendMessageBatch200Response</returns>
        public BSky.Client.ApiResponse<ChatBskyConvoSendMessageBatch200Response> ChatBskyConvoSendMessageBatchWithHttpInfo(ChatBskyConvoSendMessageBatchRequest chatBskyConvoSendMessageBatchRequest, int operationIndex = 0)
        {
            // verify the required parameter 'chatBskyConvoSendMessageBatchRequest' is set
            if (chatBskyConvoSendMessageBatchRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyConvoSendMessageBatchRequest' when calling ChatBskyConvoApi->ChatBskyConvoSendMessageBatch");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyConvoSendMessageBatchRequest;

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoSendMessageBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChatBskyConvoSendMessageBatch200Response>("/chat.bsky.convo.sendMessageBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoSendMessageBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoSendMessageBatch200Response</returns>
        public async System.Threading.Tasks.Task<ChatBskyConvoSendMessageBatch200Response> ChatBskyConvoSendMessageBatchAsync(ChatBskyConvoSendMessageBatchRequest chatBskyConvoSendMessageBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ChatBskyConvoSendMessageBatch200Response> localVarResponse = await ChatBskyConvoSendMessageBatchWithHttpInfoAsync(chatBskyConvoSendMessageBatchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoSendMessageBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoSendMessageBatch200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ChatBskyConvoSendMessageBatch200Response>> ChatBskyConvoSendMessageBatchWithHttpInfoAsync(ChatBskyConvoSendMessageBatchRequest chatBskyConvoSendMessageBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chatBskyConvoSendMessageBatchRequest' is set
            if (chatBskyConvoSendMessageBatchRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyConvoSendMessageBatchRequest' when calling ChatBskyConvoApi->ChatBskyConvoSendMessageBatch");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyConvoSendMessageBatchRequest;

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoSendMessageBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChatBskyConvoSendMessageBatch200Response>("/chat.bsky.convo.sendMessageBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoSendMessageBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoGetConvo200Response</returns>
        public ChatBskyConvoGetConvo200Response ChatBskyConvoUnmuteConvo(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response> localVarResponse = ChatBskyConvoUnmuteConvoWithHttpInfo(chatBskyConvoLeaveConvoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoGetConvo200Response</returns>
        public BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response> ChatBskyConvoUnmuteConvoWithHttpInfo(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0)
        {
            // verify the required parameter 'chatBskyConvoLeaveConvoRequest' is set
            if (chatBskyConvoLeaveConvoRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyConvoLeaveConvoRequest' when calling ChatBskyConvoApi->ChatBskyConvoUnmuteConvo");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyConvoLeaveConvoRequest;

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoUnmuteConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChatBskyConvoGetConvo200Response>("/chat.bsky.convo.unmuteConvo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoUnmuteConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoGetConvo200Response</returns>
        public async System.Threading.Tasks.Task<ChatBskyConvoGetConvo200Response> ChatBskyConvoUnmuteConvoAsync(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response> localVarResponse = await ChatBskyConvoUnmuteConvoWithHttpInfoAsync(chatBskyConvoLeaveConvoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoLeaveConvoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoGetConvo200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response>> ChatBskyConvoUnmuteConvoWithHttpInfoAsync(ChatBskyConvoLeaveConvoRequest chatBskyConvoLeaveConvoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chatBskyConvoLeaveConvoRequest' is set
            if (chatBskyConvoLeaveConvoRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyConvoLeaveConvoRequest' when calling ChatBskyConvoApi->ChatBskyConvoUnmuteConvo");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyConvoLeaveConvoRequest;

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoUnmuteConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChatBskyConvoGetConvo200Response>("/chat.bsky.convo.unmuteConvo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoUnmuteConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoUpdateReadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyConvoGetConvo200Response</returns>
        public ChatBskyConvoGetConvo200Response ChatBskyConvoUpdateRead(ChatBskyConvoUpdateReadRequest chatBskyConvoUpdateReadRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response> localVarResponse = ChatBskyConvoUpdateReadWithHttpInfo(chatBskyConvoUpdateReadRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoUpdateReadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyConvoGetConvo200Response</returns>
        public BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response> ChatBskyConvoUpdateReadWithHttpInfo(ChatBskyConvoUpdateReadRequest chatBskyConvoUpdateReadRequest, int operationIndex = 0)
        {
            // verify the required parameter 'chatBskyConvoUpdateReadRequest' is set
            if (chatBskyConvoUpdateReadRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyConvoUpdateReadRequest' when calling ChatBskyConvoApi->ChatBskyConvoUpdateRead");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyConvoUpdateReadRequest;

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoUpdateRead";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChatBskyConvoGetConvo200Response>("/chat.bsky.convo.updateRead", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoUpdateRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoUpdateReadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyConvoGetConvo200Response</returns>
        public async System.Threading.Tasks.Task<ChatBskyConvoGetConvo200Response> ChatBskyConvoUpdateReadAsync(ChatBskyConvoUpdateReadRequest chatBskyConvoUpdateReadRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response> localVarResponse = await ChatBskyConvoUpdateReadWithHttpInfoAsync(chatBskyConvoUpdateReadRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyConvoUpdateReadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyConvoGetConvo200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ChatBskyConvoGetConvo200Response>> ChatBskyConvoUpdateReadWithHttpInfoAsync(ChatBskyConvoUpdateReadRequest chatBskyConvoUpdateReadRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chatBskyConvoUpdateReadRequest' is set
            if (chatBskyConvoUpdateReadRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyConvoUpdateReadRequest' when calling ChatBskyConvoApi->ChatBskyConvoUpdateRead");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyConvoUpdateReadRequest;

            localVarRequestOptions.Operation = "ChatBskyConvoApi.ChatBskyConvoUpdateRead";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChatBskyConvoGetConvo200Response>("/chat.bsky.convo.updateRead", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyConvoUpdateRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
