/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BSky.Client;
using BSky.Model;

namespace BSky.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBskyFeedApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedDescribeFeedGenerator200Response</returns>
        AppBskyFeedDescribeFeedGenerator200Response AppBskyFeedDescribeFeedGenerator(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedDescribeFeedGenerator200Response</returns>
        ApiResponse<AppBskyFeedDescribeFeedGenerator200Response> AppBskyFeedDescribeFeedGeneratorWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetActorFeeds200Response</returns>
        AppBskyFeedGetActorFeeds200Response AppBskyFeedGetActorFeeds(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorFeeds200Response</returns>
        ApiResponse<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetActorFeedsWithHttpInfo(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        AppBskyFeedGetActorLikes200Response AppBskyFeedGetActorLikes(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetActorLikesWithHttpInfo(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        AppBskyFeedGetActorLikes200Response AppBskyFeedGetAuthorFeed(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetAuthorFeedWithHttpInfo(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        AppBskyFeedGetActorLikes200Response AppBskyFeedGetFeed(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetFeedWithHttpInfo(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a feed generator. Implemented by AppView.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetFeedGenerator200Response</returns>
        AppBskyFeedGetFeedGenerator200Response AppBskyFeedGetFeedGenerator(string feed, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a feed generator. Implemented by AppView.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetFeedGenerator200Response</returns>
        ApiResponse<AppBskyFeedGetFeedGenerator200Response> AppBskyFeedGetFeedGeneratorWithHttpInfo(string feed, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a list of feed generators.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetFeedGenerators200Response</returns>
        AppBskyFeedGetFeedGenerators200Response AppBskyFeedGetFeedGenerators(List<string> feeds, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a list of feed generators.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetFeedGenerators200Response</returns>
        ApiResponse<AppBskyFeedGetFeedGenerators200Response> AppBskyFeedGetFeedGeneratorsWithHttpInfo(List<string> feeds, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">Reference to feed generator record describing the specific feed being requested.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetFeedSkeleton200Response</returns>
        AppBskyFeedGetFeedSkeleton200Response AppBskyFeedGetFeedSkeleton(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">Reference to feed generator record describing the specific feed being requested.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetFeedSkeleton200Response</returns>
        ApiResponse<AppBskyFeedGetFeedSkeleton200Response> AppBskyFeedGetFeedSkeletonWithHttpInfo(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get like records which reference a subject (by AT-URI and CID).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetLikes200Response</returns>
        AppBskyFeedGetLikes200Response AppBskyFeedGetLikes(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get like records which reference a subject (by AT-URI and CID).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetLikes200Response</returns>
        ApiResponse<AppBskyFeedGetLikes200Response> AppBskyFeedGetLikesWithHttpInfo(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        AppBskyFeedGetActorLikes200Response AppBskyFeedGetListFeed(string list, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetListFeedWithHttpInfo(string list, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetPostThread200Response</returns>
        AppBskyFeedGetPostThread200Response AppBskyFeedGetPostThread(string uri, int? depth = default(int?), int? parentHeight = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetPostThread200Response</returns>
        ApiResponse<AppBskyFeedGetPostThread200Response> AppBskyFeedGetPostThreadWithHttpInfo(string uri, int? depth = default(int?), int? parentHeight = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetPosts200Response</returns>
        AppBskyFeedGetPosts200Response AppBskyFeedGetPosts(List<string> uris, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetPosts200Response</returns>
        ApiResponse<AppBskyFeedGetPosts200Response> AppBskyFeedGetPostsWithHttpInfo(List<string> uris, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of quotes for a given post.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to quotes of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetQuotes200Response</returns>
        AppBskyFeedGetQuotes200Response AppBskyFeedGetQuotes(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of quotes for a given post.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to quotes of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetQuotes200Response</returns>
        ApiResponse<AppBskyFeedGetQuotes200Response> AppBskyFeedGetQuotesWithHttpInfo(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of reposts for a given post.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetRepostedBy200Response</returns>
        AppBskyFeedGetRepostedBy200Response AppBskyFeedGetRepostedBy(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of reposts for a given post.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetRepostedBy200Response</returns>
        ApiResponse<AppBskyFeedGetRepostedBy200Response> AppBskyFeedGetRepostedByWithHttpInfo(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of suggested feeds (feed generators) for the requesting account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetActorFeeds200Response</returns>
        AppBskyFeedGetActorFeeds200Response AppBskyFeedGetSuggestedFeeds(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of suggested feeds (feed generators) for the requesting account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorFeeds200Response</returns>
        ApiResponse<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetSuggestedFeedsWithHttpInfo(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        AppBskyFeedGetActorLikes200Response AppBskyFeedGetTimeline(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetTimelineWithHttpInfo(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find posts matching search criteria, returning views of those posts.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="sort">Specifies the ranking order of results. (optional, default to latest)</param>
        /// <param name="since">Filter results for posts after the indicated datetime (inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYYY-MM-DD). (optional)</param>
        /// <param name="until">Filter results for posts before the indicated datetime (not inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYY-MM-DD). (optional)</param>
        /// <param name="mentions">Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions. (optional)</param>
        /// <param name="author">Filter to posts by the given account. Handles are resolved to DID before query-time. (optional)</param>
        /// <param name="lang">Filter to posts in the given language. Expected to be based on post language field, though server may override language detection. (optional)</param>
        /// <param name="domain">Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization. (optional)</param>
        /// <param name="url">Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching. (optional)</param>
        /// <param name="tag">Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with &#39;AND&#39; matching. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedSearchPosts200Response</returns>
        AppBskyFeedSearchPosts200Response AppBskyFeedSearchPosts(string q, string? sort = default(string?), string? since = default(string?), string? until = default(string?), string? mentions = default(string?), string? author = default(string?), string? lang = default(string?), string? domain = default(string?), string? url = default(string?), List<string>? tag = default(List<string>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find posts matching search criteria, returning views of those posts.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="sort">Specifies the ranking order of results. (optional, default to latest)</param>
        /// <param name="since">Filter results for posts after the indicated datetime (inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYYY-MM-DD). (optional)</param>
        /// <param name="until">Filter results for posts before the indicated datetime (not inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYY-MM-DD). (optional)</param>
        /// <param name="mentions">Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions. (optional)</param>
        /// <param name="author">Filter to posts by the given account. Handles are resolved to DID before query-time. (optional)</param>
        /// <param name="lang">Filter to posts in the given language. Expected to be based on post language field, though server may override language detection. (optional)</param>
        /// <param name="domain">Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization. (optional)</param>
        /// <param name="url">Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching. (optional)</param>
        /// <param name="tag">Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with &#39;AND&#39; matching. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedSearchPosts200Response</returns>
        ApiResponse<AppBskyFeedSearchPosts200Response> AppBskyFeedSearchPostsWithHttpInfo(string q, string? sort = default(string?), string? since = default(string?), string? until = default(string?), string? mentions = default(string?), string? author = default(string?), string? lang = default(string?), string? domain = default(string?), string? url = default(string?), List<string>? tag = default(List<string>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send information about interactions with feed items back to the feed generator that served them.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyFeedSendInteractionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedSendInteractions200Response</returns>
        AppBskyFeedSendInteractions200Response AppBskyFeedSendInteractions(AppBskyFeedSendInteractionsRequest appBskyFeedSendInteractionsRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send information about interactions with feed items back to the feed generator that served them.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyFeedSendInteractionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedSendInteractions200Response</returns>
        ApiResponse<AppBskyFeedSendInteractions200Response> AppBskyFeedSendInteractionsWithHttpInfo(AppBskyFeedSendInteractionsRequest appBskyFeedSendInteractionsRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBskyFeedApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedDescribeFeedGenerator200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedDescribeFeedGenerator200Response> AppBskyFeedDescribeFeedGeneratorAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedDescribeFeedGenerator200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedDescribeFeedGenerator200Response>> AppBskyFeedDescribeFeedGeneratorWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorFeeds200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetActorFeedsAsync(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorFeeds200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetActorFeeds200Response>> AppBskyFeedGetActorFeedsWithHttpInfoAsync(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetActorLikesAsync(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetActorLikesWithHttpInfoAsync(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetAuthorFeedAsync(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetAuthorFeedWithHttpInfoAsync(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetFeedAsync(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetFeedWithHttpInfoAsync(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a feed generator. Implemented by AppView.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetFeedGenerator200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetFeedGenerator200Response> AppBskyFeedGetFeedGeneratorAsync(string feed, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a feed generator. Implemented by AppView.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetFeedGenerator200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetFeedGenerator200Response>> AppBskyFeedGetFeedGeneratorWithHttpInfoAsync(string feed, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a list of feed generators.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetFeedGenerators200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetFeedGenerators200Response> AppBskyFeedGetFeedGeneratorsAsync(List<string> feeds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a list of feed generators.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetFeedGenerators200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetFeedGenerators200Response>> AppBskyFeedGetFeedGeneratorsWithHttpInfoAsync(List<string> feeds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">Reference to feed generator record describing the specific feed being requested.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetFeedSkeleton200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetFeedSkeleton200Response> AppBskyFeedGetFeedSkeletonAsync(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">Reference to feed generator record describing the specific feed being requested.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetFeedSkeleton200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetFeedSkeleton200Response>> AppBskyFeedGetFeedSkeletonWithHttpInfoAsync(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get like records which reference a subject (by AT-URI and CID).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetLikes200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetLikes200Response> AppBskyFeedGetLikesAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get like records which reference a subject (by AT-URI and CID).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetLikes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetLikes200Response>> AppBskyFeedGetLikesWithHttpInfoAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetListFeedAsync(string list, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetListFeedWithHttpInfoAsync(string list, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetPostThread200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetPostThread200Response> AppBskyFeedGetPostThreadAsync(string uri, int? depth = default(int?), int? parentHeight = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetPostThread200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetPostThread200Response>> AppBskyFeedGetPostThreadWithHttpInfoAsync(string uri, int? depth = default(int?), int? parentHeight = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetPosts200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetPosts200Response> AppBskyFeedGetPostsAsync(List<string> uris, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetPosts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetPosts200Response>> AppBskyFeedGetPostsWithHttpInfoAsync(List<string> uris, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of quotes for a given post.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to quotes of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetQuotes200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetQuotes200Response> AppBskyFeedGetQuotesAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of quotes for a given post.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to quotes of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetQuotes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetQuotes200Response>> AppBskyFeedGetQuotesWithHttpInfoAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of reposts for a given post.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetRepostedBy200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetRepostedBy200Response> AppBskyFeedGetRepostedByAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of reposts for a given post.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetRepostedBy200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetRepostedBy200Response>> AppBskyFeedGetRepostedByWithHttpInfoAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of suggested feeds (feed generators) for the requesting account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorFeeds200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetSuggestedFeedsAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of suggested feeds (feed generators) for the requesting account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorFeeds200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetActorFeeds200Response>> AppBskyFeedGetSuggestedFeedsWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetTimelineAsync(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetTimelineWithHttpInfoAsync(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find posts matching search criteria, returning views of those posts.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="sort">Specifies the ranking order of results. (optional, default to latest)</param>
        /// <param name="since">Filter results for posts after the indicated datetime (inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYYY-MM-DD). (optional)</param>
        /// <param name="until">Filter results for posts before the indicated datetime (not inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYY-MM-DD). (optional)</param>
        /// <param name="mentions">Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions. (optional)</param>
        /// <param name="author">Filter to posts by the given account. Handles are resolved to DID before query-time. (optional)</param>
        /// <param name="lang">Filter to posts in the given language. Expected to be based on post language field, though server may override language detection. (optional)</param>
        /// <param name="domain">Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization. (optional)</param>
        /// <param name="url">Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching. (optional)</param>
        /// <param name="tag">Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with &#39;AND&#39; matching. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedSearchPosts200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedSearchPosts200Response> AppBskyFeedSearchPostsAsync(string q, string? sort = default(string?), string? since = default(string?), string? until = default(string?), string? mentions = default(string?), string? author = default(string?), string? lang = default(string?), string? domain = default(string?), string? url = default(string?), List<string>? tag = default(List<string>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find posts matching search criteria, returning views of those posts.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="sort">Specifies the ranking order of results. (optional, default to latest)</param>
        /// <param name="since">Filter results for posts after the indicated datetime (inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYYY-MM-DD). (optional)</param>
        /// <param name="until">Filter results for posts before the indicated datetime (not inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYY-MM-DD). (optional)</param>
        /// <param name="mentions">Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions. (optional)</param>
        /// <param name="author">Filter to posts by the given account. Handles are resolved to DID before query-time. (optional)</param>
        /// <param name="lang">Filter to posts in the given language. Expected to be based on post language field, though server may override language detection. (optional)</param>
        /// <param name="domain">Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization. (optional)</param>
        /// <param name="url">Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching. (optional)</param>
        /// <param name="tag">Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with &#39;AND&#39; matching. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedSearchPosts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedSearchPosts200Response>> AppBskyFeedSearchPostsWithHttpInfoAsync(string q, string? sort = default(string?), string? since = default(string?), string? until = default(string?), string? mentions = default(string?), string? author = default(string?), string? lang = default(string?), string? domain = default(string?), string? url = default(string?), List<string>? tag = default(List<string>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send information about interactions with feed items back to the feed generator that served them.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyFeedSendInteractionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedSendInteractions200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedSendInteractions200Response> AppBskyFeedSendInteractionsAsync(AppBskyFeedSendInteractionsRequest appBskyFeedSendInteractionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send information about interactions with feed items back to the feed generator that served them.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyFeedSendInteractionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedSendInteractions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedSendInteractions200Response>> AppBskyFeedSendInteractionsWithHttpInfoAsync(AppBskyFeedSendInteractionsRequest appBskyFeedSendInteractionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBskyFeedApi : IAppBskyFeedApiSync, IAppBskyFeedApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppBskyFeedApi : IAppBskyFeedApi
    {
        private BSky.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyFeedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AppBskyFeedApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyFeedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AppBskyFeedApi(string basePath)
        {
            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                new BSky.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyFeedApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AppBskyFeedApi(BSky.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyFeedApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AppBskyFeedApi(BSky.Client.ISynchronousClient client, BSky.Client.IAsynchronousClient asyncClient, BSky.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BSky.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BSky.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BSky.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BSky.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedDescribeFeedGenerator200Response</returns>
        public AppBskyFeedDescribeFeedGenerator200Response AppBskyFeedDescribeFeedGenerator(int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedDescribeFeedGenerator200Response> localVarResponse = AppBskyFeedDescribeFeedGeneratorWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedDescribeFeedGenerator200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedDescribeFeedGenerator200Response> AppBskyFeedDescribeFeedGeneratorWithHttpInfo(int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedDescribeFeedGenerator";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedDescribeFeedGenerator200Response>("/app.bsky.feed.describeFeedGenerator", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedDescribeFeedGenerator", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedDescribeFeedGenerator200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedDescribeFeedGenerator200Response> AppBskyFeedDescribeFeedGeneratorAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedDescribeFeedGenerator200Response> localVarResponse = await AppBskyFeedDescribeFeedGeneratorWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedDescribeFeedGenerator200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedDescribeFeedGenerator200Response>> AppBskyFeedDescribeFeedGeneratorWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedDescribeFeedGenerator";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedDescribeFeedGenerator200Response>("/app.bsky.feed.describeFeedGenerator", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedDescribeFeedGenerator", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetActorFeeds200Response</returns>
        public AppBskyFeedGetActorFeeds200Response AppBskyFeedGetActorFeeds(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response> localVarResponse = AppBskyFeedGetActorFeedsWithHttpInfo(actor, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorFeeds200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetActorFeedsWithHttpInfo(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'actor' when calling AppBskyFeedApi->AppBskyFeedGetActorFeeds");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetActorFeeds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetActorFeeds200Response>("/app.bsky.feed.getActorFeeds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetActorFeeds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorFeeds200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetActorFeedsAsync(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response> localVarResponse = await AppBskyFeedGetActorFeedsWithHttpInfoAsync(actor, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorFeeds200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response>> AppBskyFeedGetActorFeedsWithHttpInfoAsync(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'actor' when calling AppBskyFeedApi->AppBskyFeedGetActorFeeds");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetActorFeeds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedGetActorFeeds200Response>("/app.bsky.feed.getActorFeeds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetActorFeeds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        public AppBskyFeedGetActorLikes200Response AppBskyFeedGetActorLikes(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = AppBskyFeedGetActorLikesWithHttpInfo(actor, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetActorLikesWithHttpInfo(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'actor' when calling AppBskyFeedApi->AppBskyFeedGetActorLikes");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetActorLikes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getActorLikes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetActorLikes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetActorLikesAsync(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = await AppBskyFeedGetActorLikesWithHttpInfoAsync(actor, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetActorLikesWithHttpInfoAsync(string actor, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'actor' when calling AppBskyFeedApi->AppBskyFeedGetActorLikes");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetActorLikes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getActorLikes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetActorLikes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        public AppBskyFeedGetActorLikes200Response AppBskyFeedGetAuthorFeed(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = AppBskyFeedGetAuthorFeedWithHttpInfo(actor, limit, cursor, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetAuthorFeedWithHttpInfo(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'actor' when calling AppBskyFeedApi->AppBskyFeedGetAuthorFeed");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetAuthorFeed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getAuthorFeed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetAuthorFeed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetAuthorFeedAsync(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = await AppBskyFeedGetAuthorFeedWithHttpInfoAsync(actor, limit, cursor, filter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetAuthorFeedWithHttpInfoAsync(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'actor' when calling AppBskyFeedApi->AppBskyFeedGetAuthorFeed");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetAuthorFeed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getAuthorFeed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetAuthorFeed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        public AppBskyFeedGetActorLikes200Response AppBskyFeedGetFeed(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = AppBskyFeedGetFeedWithHttpInfo(feed, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetFeedWithHttpInfo(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'feed' is set
            if (feed == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'feed' when calling AppBskyFeedApi->AppBskyFeedGetFeed");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "feed", feed));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetFeed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getFeed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetFeed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetFeedAsync(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = await AppBskyFeedGetFeedWithHttpInfoAsync(feed, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetFeedWithHttpInfoAsync(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'feed' is set
            if (feed == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'feed' when calling AppBskyFeedApi->AppBskyFeedGetFeed");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "feed", feed));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetFeed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getFeed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetFeed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a feed generator. Implemented by AppView.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetFeedGenerator200Response</returns>
        public AppBskyFeedGetFeedGenerator200Response AppBskyFeedGetFeedGenerator(string feed, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedGetFeedGenerator200Response> localVarResponse = AppBskyFeedGetFeedGeneratorWithHttpInfo(feed);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a feed generator. Implemented by AppView.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetFeedGenerator200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedGetFeedGenerator200Response> AppBskyFeedGetFeedGeneratorWithHttpInfo(string feed, int operationIndex = 0)
        {
            // verify the required parameter 'feed' is set
            if (feed == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'feed' when calling AppBskyFeedApi->AppBskyFeedGetFeedGenerator");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "feed", feed));

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetFeedGenerator";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetFeedGenerator200Response>("/app.bsky.feed.getFeedGenerator", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetFeedGenerator", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a feed generator. Implemented by AppView.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetFeedGenerator200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetFeedGenerator200Response> AppBskyFeedGetFeedGeneratorAsync(string feed, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedGetFeedGenerator200Response> localVarResponse = await AppBskyFeedGetFeedGeneratorWithHttpInfoAsync(feed, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a feed generator. Implemented by AppView.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetFeedGenerator200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedGetFeedGenerator200Response>> AppBskyFeedGetFeedGeneratorWithHttpInfoAsync(string feed, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'feed' is set
            if (feed == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'feed' when calling AppBskyFeedApi->AppBskyFeedGetFeedGenerator");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "feed", feed));

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetFeedGenerator";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedGetFeedGenerator200Response>("/app.bsky.feed.getFeedGenerator", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetFeedGenerator", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a list of feed generators.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetFeedGenerators200Response</returns>
        public AppBskyFeedGetFeedGenerators200Response AppBskyFeedGetFeedGenerators(List<string> feeds, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedGetFeedGenerators200Response> localVarResponse = AppBskyFeedGetFeedGeneratorsWithHttpInfo(feeds);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a list of feed generators.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetFeedGenerators200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedGetFeedGenerators200Response> AppBskyFeedGetFeedGeneratorsWithHttpInfo(List<string> feeds, int operationIndex = 0)
        {
            // verify the required parameter 'feeds' is set
            if (feeds == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'feeds' when calling AppBskyFeedApi->AppBskyFeedGetFeedGenerators");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "feeds", feeds));

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetFeedGenerators";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetFeedGenerators200Response>("/app.bsky.feed.getFeedGenerators", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetFeedGenerators", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a list of feed generators.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetFeedGenerators200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetFeedGenerators200Response> AppBskyFeedGetFeedGeneratorsAsync(List<string> feeds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedGetFeedGenerators200Response> localVarResponse = await AppBskyFeedGetFeedGeneratorsWithHttpInfoAsync(feeds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a list of feed generators.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetFeedGenerators200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedGetFeedGenerators200Response>> AppBskyFeedGetFeedGeneratorsWithHttpInfoAsync(List<string> feeds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'feeds' is set
            if (feeds == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'feeds' when calling AppBskyFeedApi->AppBskyFeedGetFeedGenerators");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "feeds", feeds));

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetFeedGenerators";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedGetFeedGenerators200Response>("/app.bsky.feed.getFeedGenerators", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetFeedGenerators", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">Reference to feed generator record describing the specific feed being requested.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetFeedSkeleton200Response</returns>
        public AppBskyFeedGetFeedSkeleton200Response AppBskyFeedGetFeedSkeleton(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedGetFeedSkeleton200Response> localVarResponse = AppBskyFeedGetFeedSkeletonWithHttpInfo(feed, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">Reference to feed generator record describing the specific feed being requested.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetFeedSkeleton200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedGetFeedSkeleton200Response> AppBskyFeedGetFeedSkeletonWithHttpInfo(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'feed' is set
            if (feed == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'feed' when calling AppBskyFeedApi->AppBskyFeedGetFeedSkeleton");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "feed", feed));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetFeedSkeleton";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetFeedSkeleton200Response>("/app.bsky.feed.getFeedSkeleton", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetFeedSkeleton", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">Reference to feed generator record describing the specific feed being requested.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetFeedSkeleton200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetFeedSkeleton200Response> AppBskyFeedGetFeedSkeletonAsync(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedGetFeedSkeleton200Response> localVarResponse = await AppBskyFeedGetFeedSkeletonWithHttpInfoAsync(feed, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">Reference to feed generator record describing the specific feed being requested.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetFeedSkeleton200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedGetFeedSkeleton200Response>> AppBskyFeedGetFeedSkeletonWithHttpInfoAsync(string feed, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'feed' is set
            if (feed == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'feed' when calling AppBskyFeedApi->AppBskyFeedGetFeedSkeleton");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "feed", feed));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetFeedSkeleton";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedGetFeedSkeleton200Response>("/app.bsky.feed.getFeedSkeleton", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetFeedSkeleton", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get like records which reference a subject (by AT-URI and CID).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetLikes200Response</returns>
        public AppBskyFeedGetLikes200Response AppBskyFeedGetLikes(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedGetLikes200Response> localVarResponse = AppBskyFeedGetLikesWithHttpInfo(uri, cid, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get like records which reference a subject (by AT-URI and CID).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetLikes200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedGetLikes200Response> AppBskyFeedGetLikesWithHttpInfo(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'uri' when calling AppBskyFeedApi->AppBskyFeedGetLikes");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetLikes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetLikes200Response>("/app.bsky.feed.getLikes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetLikes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get like records which reference a subject (by AT-URI and CID).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetLikes200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetLikes200Response> AppBskyFeedGetLikesAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedGetLikes200Response> localVarResponse = await AppBskyFeedGetLikesWithHttpInfoAsync(uri, cid, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get like records which reference a subject (by AT-URI and CID).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetLikes200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedGetLikes200Response>> AppBskyFeedGetLikesWithHttpInfoAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'uri' when calling AppBskyFeedApi->AppBskyFeedGetLikes");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetLikes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedGetLikes200Response>("/app.bsky.feed.getLikes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetLikes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        public AppBskyFeedGetActorLikes200Response AppBskyFeedGetListFeed(string list, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = AppBskyFeedGetListFeedWithHttpInfo(list, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetListFeedWithHttpInfo(string list, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'list' is set
            if (list == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'list' when calling AppBskyFeedApi->AppBskyFeedGetListFeed");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetListFeed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getListFeed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetListFeed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetListFeedAsync(string list, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = await AppBskyFeedGetListFeedWithHttpInfoAsync(list, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetListFeedWithHttpInfoAsync(string list, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'list' when calling AppBskyFeedApi->AppBskyFeedGetListFeed");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetListFeed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getListFeed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetListFeed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetPostThread200Response</returns>
        public AppBskyFeedGetPostThread200Response AppBskyFeedGetPostThread(string uri, int? depth = default(int?), int? parentHeight = default(int?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedGetPostThread200Response> localVarResponse = AppBskyFeedGetPostThreadWithHttpInfo(uri, depth, parentHeight);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetPostThread200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedGetPostThread200Response> AppBskyFeedGetPostThreadWithHttpInfo(string uri, int? depth = default(int?), int? parentHeight = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'uri' when calling AppBskyFeedApi->AppBskyFeedGetPostThread");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (depth != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "depth", depth));
            }
            if (parentHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "parentHeight", parentHeight));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetPostThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetPostThread200Response>("/app.bsky.feed.getPostThread", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetPostThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetPostThread200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetPostThread200Response> AppBskyFeedGetPostThreadAsync(string uri, int? depth = default(int?), int? parentHeight = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedGetPostThread200Response> localVarResponse = await AppBskyFeedGetPostThreadWithHttpInfoAsync(uri, depth, parentHeight, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetPostThread200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedGetPostThread200Response>> AppBskyFeedGetPostThreadWithHttpInfoAsync(string uri, int? depth = default(int?), int? parentHeight = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'uri' when calling AppBskyFeedApi->AppBskyFeedGetPostThread");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (depth != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "depth", depth));
            }
            if (parentHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "parentHeight", parentHeight));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetPostThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedGetPostThread200Response>("/app.bsky.feed.getPostThread", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetPostThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetPosts200Response</returns>
        public AppBskyFeedGetPosts200Response AppBskyFeedGetPosts(List<string> uris, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedGetPosts200Response> localVarResponse = AppBskyFeedGetPostsWithHttpInfo(uris);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetPosts200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedGetPosts200Response> AppBskyFeedGetPostsWithHttpInfo(List<string> uris, int operationIndex = 0)
        {
            // verify the required parameter 'uris' is set
            if (uris == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'uris' when calling AppBskyFeedApi->AppBskyFeedGetPosts");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "uris", uris));

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetPosts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetPosts200Response>("/app.bsky.feed.getPosts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetPosts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetPosts200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetPosts200Response> AppBskyFeedGetPostsAsync(List<string> uris, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedGetPosts200Response> localVarResponse = await AppBskyFeedGetPostsWithHttpInfoAsync(uris, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetPosts200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedGetPosts200Response>> AppBskyFeedGetPostsWithHttpInfoAsync(List<string> uris, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'uris' is set
            if (uris == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'uris' when calling AppBskyFeedApi->AppBskyFeedGetPosts");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "uris", uris));

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetPosts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedGetPosts200Response>("/app.bsky.feed.getPosts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetPosts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of quotes for a given post.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to quotes of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetQuotes200Response</returns>
        public AppBskyFeedGetQuotes200Response AppBskyFeedGetQuotes(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedGetQuotes200Response> localVarResponse = AppBskyFeedGetQuotesWithHttpInfo(uri, cid, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of quotes for a given post.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to quotes of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetQuotes200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedGetQuotes200Response> AppBskyFeedGetQuotesWithHttpInfo(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'uri' when calling AppBskyFeedApi->AppBskyFeedGetQuotes");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetQuotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetQuotes200Response>("/app.bsky.feed.getQuotes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetQuotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of quotes for a given post.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to quotes of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetQuotes200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetQuotes200Response> AppBskyFeedGetQuotesAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedGetQuotes200Response> localVarResponse = await AppBskyFeedGetQuotesWithHttpInfoAsync(uri, cid, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of quotes for a given post.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to quotes of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetQuotes200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedGetQuotes200Response>> AppBskyFeedGetQuotesWithHttpInfoAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'uri' when calling AppBskyFeedApi->AppBskyFeedGetQuotes");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetQuotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedGetQuotes200Response>("/app.bsky.feed.getQuotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetQuotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of reposts for a given post.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetRepostedBy200Response</returns>
        public AppBskyFeedGetRepostedBy200Response AppBskyFeedGetRepostedBy(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedGetRepostedBy200Response> localVarResponse = AppBskyFeedGetRepostedByWithHttpInfo(uri, cid, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of reposts for a given post.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetRepostedBy200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedGetRepostedBy200Response> AppBskyFeedGetRepostedByWithHttpInfo(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'uri' when calling AppBskyFeedApi->AppBskyFeedGetRepostedBy");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetRepostedBy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetRepostedBy200Response>("/app.bsky.feed.getRepostedBy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetRepostedBy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of reposts for a given post.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetRepostedBy200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetRepostedBy200Response> AppBskyFeedGetRepostedByAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedGetRepostedBy200Response> localVarResponse = await AppBskyFeedGetRepostedByWithHttpInfoAsync(uri, cid, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of reposts for a given post.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetRepostedBy200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedGetRepostedBy200Response>> AppBskyFeedGetRepostedByWithHttpInfoAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'uri' when calling AppBskyFeedApi->AppBskyFeedGetRepostedBy");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetRepostedBy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedGetRepostedBy200Response>("/app.bsky.feed.getRepostedBy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetRepostedBy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of suggested feeds (feed generators) for the requesting account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetActorFeeds200Response</returns>
        public AppBskyFeedGetActorFeeds200Response AppBskyFeedGetSuggestedFeeds(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response> localVarResponse = AppBskyFeedGetSuggestedFeedsWithHttpInfo(limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of suggested feeds (feed generators) for the requesting account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorFeeds200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetSuggestedFeedsWithHttpInfo(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetSuggestedFeeds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetActorFeeds200Response>("/app.bsky.feed.getSuggestedFeeds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetSuggestedFeeds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of suggested feeds (feed generators) for the requesting account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorFeeds200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetSuggestedFeedsAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response> localVarResponse = await AppBskyFeedGetSuggestedFeedsWithHttpInfoAsync(limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of suggested feeds (feed generators) for the requesting account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorFeeds200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response>> AppBskyFeedGetSuggestedFeedsWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetSuggestedFeeds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedGetActorFeeds200Response>("/app.bsky.feed.getSuggestedFeeds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetSuggestedFeeds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        public AppBskyFeedGetActorLikes200Response AppBskyFeedGetTimeline(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = AppBskyFeedGetTimelineWithHttpInfo(algorithm, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetTimelineWithHttpInfo(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (algorithm != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "algorithm", algorithm));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetTimeline";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getTimeline", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetTimeline", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetTimelineAsync(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = await AppBskyFeedGetTimelineWithHttpInfoAsync(algorithm, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetTimelineWithHttpInfoAsync(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (algorithm != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "algorithm", algorithm));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedGetTimeline";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getTimeline", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetTimeline", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Find posts matching search criteria, returning views of those posts.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="sort">Specifies the ranking order of results. (optional, default to latest)</param>
        /// <param name="since">Filter results for posts after the indicated datetime (inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYYY-MM-DD). (optional)</param>
        /// <param name="until">Filter results for posts before the indicated datetime (not inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYY-MM-DD). (optional)</param>
        /// <param name="mentions">Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions. (optional)</param>
        /// <param name="author">Filter to posts by the given account. Handles are resolved to DID before query-time. (optional)</param>
        /// <param name="lang">Filter to posts in the given language. Expected to be based on post language field, though server may override language detection. (optional)</param>
        /// <param name="domain">Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization. (optional)</param>
        /// <param name="url">Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching. (optional)</param>
        /// <param name="tag">Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with &#39;AND&#39; matching. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedSearchPosts200Response</returns>
        public AppBskyFeedSearchPosts200Response AppBskyFeedSearchPosts(string q, string? sort = default(string?), string? since = default(string?), string? until = default(string?), string? mentions = default(string?), string? author = default(string?), string? lang = default(string?), string? domain = default(string?), string? url = default(string?), List<string>? tag = default(List<string>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedSearchPosts200Response> localVarResponse = AppBskyFeedSearchPostsWithHttpInfo(q, sort, since, until, mentions, author, lang, domain, url, tag, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Find posts matching search criteria, returning views of those posts.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="sort">Specifies the ranking order of results. (optional, default to latest)</param>
        /// <param name="since">Filter results for posts after the indicated datetime (inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYYY-MM-DD). (optional)</param>
        /// <param name="until">Filter results for posts before the indicated datetime (not inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYY-MM-DD). (optional)</param>
        /// <param name="mentions">Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions. (optional)</param>
        /// <param name="author">Filter to posts by the given account. Handles are resolved to DID before query-time. (optional)</param>
        /// <param name="lang">Filter to posts in the given language. Expected to be based on post language field, though server may override language detection. (optional)</param>
        /// <param name="domain">Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization. (optional)</param>
        /// <param name="url">Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching. (optional)</param>
        /// <param name="tag">Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with &#39;AND&#39; matching. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedSearchPosts200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedSearchPosts200Response> AppBskyFeedSearchPostsWithHttpInfo(string q, string? sort = default(string?), string? since = default(string?), string? until = default(string?), string? mentions = default(string?), string? author = default(string?), string? lang = default(string?), string? domain = default(string?), string? url = default(string?), List<string>? tag = default(List<string>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'q' when calling AppBskyFeedApi->AppBskyFeedSearchPosts");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (until != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "until", until));
            }
            if (mentions != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "mentions", mentions));
            }
            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (lang != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "lang", lang));
            }
            if (domain != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "domain", domain));
            }
            if (url != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedSearchPosts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedSearchPosts200Response>("/app.bsky.feed.searchPosts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedSearchPosts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Find posts matching search criteria, returning views of those posts.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="sort">Specifies the ranking order of results. (optional, default to latest)</param>
        /// <param name="since">Filter results for posts after the indicated datetime (inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYYY-MM-DD). (optional)</param>
        /// <param name="until">Filter results for posts before the indicated datetime (not inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYY-MM-DD). (optional)</param>
        /// <param name="mentions">Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions. (optional)</param>
        /// <param name="author">Filter to posts by the given account. Handles are resolved to DID before query-time. (optional)</param>
        /// <param name="lang">Filter to posts in the given language. Expected to be based on post language field, though server may override language detection. (optional)</param>
        /// <param name="domain">Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization. (optional)</param>
        /// <param name="url">Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching. (optional)</param>
        /// <param name="tag">Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with &#39;AND&#39; matching. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedSearchPosts200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedSearchPosts200Response> AppBskyFeedSearchPostsAsync(string q, string? sort = default(string?), string? since = default(string?), string? until = default(string?), string? mentions = default(string?), string? author = default(string?), string? lang = default(string?), string? domain = default(string?), string? url = default(string?), List<string>? tag = default(List<string>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedSearchPosts200Response> localVarResponse = await AppBskyFeedSearchPostsWithHttpInfoAsync(q, sort, since, until, mentions, author, lang, domain, url, tag, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Find posts matching search criteria, returning views of those posts.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="sort">Specifies the ranking order of results. (optional, default to latest)</param>
        /// <param name="since">Filter results for posts after the indicated datetime (inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYYY-MM-DD). (optional)</param>
        /// <param name="until">Filter results for posts before the indicated datetime (not inclusive). Expected to use &#39;sortAt&#39; timestamp, which may not match &#39;createdAt&#39;. Can be a datetime, or just an ISO date (YYY-MM-DD). (optional)</param>
        /// <param name="mentions">Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions. (optional)</param>
        /// <param name="author">Filter to posts by the given account. Handles are resolved to DID before query-time. (optional)</param>
        /// <param name="lang">Filter to posts in the given language. Expected to be based on post language field, though server may override language detection. (optional)</param>
        /// <param name="domain">Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization. (optional)</param>
        /// <param name="url">Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching. (optional)</param>
        /// <param name="tag">Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with &#39;AND&#39; matching. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedSearchPosts200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedSearchPosts200Response>> AppBskyFeedSearchPostsWithHttpInfoAsync(string q, string? sort = default(string?), string? since = default(string?), string? until = default(string?), string? mentions = default(string?), string? author = default(string?), string? lang = default(string?), string? domain = default(string?), string? url = default(string?), List<string>? tag = default(List<string>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'q' when calling AppBskyFeedApi->AppBskyFeedSearchPosts");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (until != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "until", until));
            }
            if (mentions != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "mentions", mentions));
            }
            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (lang != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "lang", lang));
            }
            if (domain != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "domain", domain));
            }
            if (url != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedSearchPosts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyFeedSearchPosts200Response>("/app.bsky.feed.searchPosts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedSearchPosts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Send information about interactions with feed items back to the feed generator that served them.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyFeedSendInteractionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyFeedSendInteractions200Response</returns>
        public AppBskyFeedSendInteractions200Response AppBskyFeedSendInteractions(AppBskyFeedSendInteractionsRequest appBskyFeedSendInteractionsRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyFeedSendInteractions200Response> localVarResponse = AppBskyFeedSendInteractionsWithHttpInfo(appBskyFeedSendInteractionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Send information about interactions with feed items back to the feed generator that served them.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyFeedSendInteractionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyFeedSendInteractions200Response</returns>
        public BSky.Client.ApiResponse<AppBskyFeedSendInteractions200Response> AppBskyFeedSendInteractionsWithHttpInfo(AppBskyFeedSendInteractionsRequest appBskyFeedSendInteractionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'appBskyFeedSendInteractionsRequest' is set
            if (appBskyFeedSendInteractionsRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'appBskyFeedSendInteractionsRequest' when calling AppBskyFeedApi->AppBskyFeedSendInteractions");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = appBskyFeedSendInteractionsRequest;

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedSendInteractions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AppBskyFeedSendInteractions200Response>("/app.bsky.feed.sendInteractions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedSendInteractions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Send information about interactions with feed items back to the feed generator that served them.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyFeedSendInteractionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedSendInteractions200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedSendInteractions200Response> AppBskyFeedSendInteractionsAsync(AppBskyFeedSendInteractionsRequest appBskyFeedSendInteractionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyFeedSendInteractions200Response> localVarResponse = await AppBskyFeedSendInteractionsWithHttpInfoAsync(appBskyFeedSendInteractionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Send information about interactions with feed items back to the feed generator that served them.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyFeedSendInteractionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedSendInteractions200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyFeedSendInteractions200Response>> AppBskyFeedSendInteractionsWithHttpInfoAsync(AppBskyFeedSendInteractionsRequest appBskyFeedSendInteractionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'appBskyFeedSendInteractionsRequest' is set
            if (appBskyFeedSendInteractionsRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'appBskyFeedSendInteractionsRequest' when calling AppBskyFeedApi->AppBskyFeedSendInteractions");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = appBskyFeedSendInteractionsRequest;

            localVarRequestOptions.Operation = "AppBskyFeedApi.AppBskyFeedSendInteractions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AppBskyFeedSendInteractions200Response>("/app.bsky.feed.sendInteractions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedSendInteractions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
