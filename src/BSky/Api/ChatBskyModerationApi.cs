/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BSky.Client;
using BSky.Model;

namespace BSky.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChatBskyModerationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyModerationGetActorMetadata200Response</returns>
        ChatBskyModerationGetActorMetadata200Response ChatBskyModerationGetActorMetadata(string actor, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyModerationGetActorMetadata200Response</returns>
        ApiResponse<ChatBskyModerationGetActorMetadata200Response> ChatBskyModerationGetActorMetadataWithHttpInfo(string actor, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId"></param>
        /// <param name="convoId">Conversation that the message is from. NOTE: this field will eventually be required. (optional)</param>
        /// <param name="before"> (optional, default to 5)</param>
        /// <param name="after"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyModerationGetMessageContext200Response</returns>
        ChatBskyModerationGetMessageContext200Response ChatBskyModerationGetMessageContext(string messageId, string? convoId = default(string?), int? before = default(int?), int? after = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId"></param>
        /// <param name="convoId">Conversation that the message is from. NOTE: this field will eventually be required. (optional)</param>
        /// <param name="before"> (optional, default to 5)</param>
        /// <param name="after"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyModerationGetMessageContext200Response</returns>
        ApiResponse<ChatBskyModerationGetMessageContext200Response> ChatBskyModerationGetMessageContextWithHttpInfo(string messageId, string? convoId = default(string?), int? before = default(int?), int? after = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyModerationUpdateActorAccessRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ChatBskyModerationUpdateActorAccess(ChatBskyModerationUpdateActorAccessRequest chatBskyModerationUpdateActorAccessRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyModerationUpdateActorAccessRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChatBskyModerationUpdateActorAccessWithHttpInfo(ChatBskyModerationUpdateActorAccessRequest chatBskyModerationUpdateActorAccessRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChatBskyModerationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyModerationGetActorMetadata200Response</returns>
        System.Threading.Tasks.Task<ChatBskyModerationGetActorMetadata200Response> ChatBskyModerationGetActorMetadataAsync(string actor, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyModerationGetActorMetadata200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatBskyModerationGetActorMetadata200Response>> ChatBskyModerationGetActorMetadataWithHttpInfoAsync(string actor, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId"></param>
        /// <param name="convoId">Conversation that the message is from. NOTE: this field will eventually be required. (optional)</param>
        /// <param name="before"> (optional, default to 5)</param>
        /// <param name="after"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyModerationGetMessageContext200Response</returns>
        System.Threading.Tasks.Task<ChatBskyModerationGetMessageContext200Response> ChatBskyModerationGetMessageContextAsync(string messageId, string? convoId = default(string?), int? before = default(int?), int? after = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId"></param>
        /// <param name="convoId">Conversation that the message is from. NOTE: this field will eventually be required. (optional)</param>
        /// <param name="before"> (optional, default to 5)</param>
        /// <param name="after"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyModerationGetMessageContext200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatBskyModerationGetMessageContext200Response>> ChatBskyModerationGetMessageContextWithHttpInfoAsync(string messageId, string? convoId = default(string?), int? before = default(int?), int? after = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyModerationUpdateActorAccessRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChatBskyModerationUpdateActorAccessAsync(ChatBskyModerationUpdateActorAccessRequest chatBskyModerationUpdateActorAccessRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyModerationUpdateActorAccessRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChatBskyModerationUpdateActorAccessWithHttpInfoAsync(ChatBskyModerationUpdateActorAccessRequest chatBskyModerationUpdateActorAccessRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChatBskyModerationApi : IChatBskyModerationApiSync, IChatBskyModerationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChatBskyModerationApi : IChatBskyModerationApi
    {
        private BSky.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatBskyModerationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChatBskyModerationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatBskyModerationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChatBskyModerationApi(string basePath)
        {
            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                new BSky.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatBskyModerationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChatBskyModerationApi(BSky.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatBskyModerationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChatBskyModerationApi(BSky.Client.ISynchronousClient client, BSky.Client.IAsynchronousClient asyncClient, BSky.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BSky.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BSky.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BSky.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BSky.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyModerationGetActorMetadata200Response</returns>
        public ChatBskyModerationGetActorMetadata200Response ChatBskyModerationGetActorMetadata(string actor, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ChatBskyModerationGetActorMetadata200Response> localVarResponse = ChatBskyModerationGetActorMetadataWithHttpInfo(actor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyModerationGetActorMetadata200Response</returns>
        public BSky.Client.ApiResponse<ChatBskyModerationGetActorMetadata200Response> ChatBskyModerationGetActorMetadataWithHttpInfo(string actor, int operationIndex = 0)
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'actor' when calling ChatBskyModerationApi->ChatBskyModerationGetActorMetadata");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));

            localVarRequestOptions.Operation = "ChatBskyModerationApi.ChatBskyModerationGetActorMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ChatBskyModerationGetActorMetadata200Response>("/chat.bsky.moderation.getActorMetadata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyModerationGetActorMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyModerationGetActorMetadata200Response</returns>
        public async System.Threading.Tasks.Task<ChatBskyModerationGetActorMetadata200Response> ChatBskyModerationGetActorMetadataAsync(string actor, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ChatBskyModerationGetActorMetadata200Response> localVarResponse = await ChatBskyModerationGetActorMetadataWithHttpInfoAsync(actor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyModerationGetActorMetadata200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ChatBskyModerationGetActorMetadata200Response>> ChatBskyModerationGetActorMetadataWithHttpInfoAsync(string actor, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'actor' when calling ChatBskyModerationApi->ChatBskyModerationGetActorMetadata");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));

            localVarRequestOptions.Operation = "ChatBskyModerationApi.ChatBskyModerationGetActorMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ChatBskyModerationGetActorMetadata200Response>("/chat.bsky.moderation.getActorMetadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyModerationGetActorMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId"></param>
        /// <param name="convoId">Conversation that the message is from. NOTE: this field will eventually be required. (optional)</param>
        /// <param name="before"> (optional, default to 5)</param>
        /// <param name="after"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatBskyModerationGetMessageContext200Response</returns>
        public ChatBskyModerationGetMessageContext200Response ChatBskyModerationGetMessageContext(string messageId, string? convoId = default(string?), int? before = default(int?), int? after = default(int?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ChatBskyModerationGetMessageContext200Response> localVarResponse = ChatBskyModerationGetMessageContextWithHttpInfo(messageId, convoId, before, after);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId"></param>
        /// <param name="convoId">Conversation that the message is from. NOTE: this field will eventually be required. (optional)</param>
        /// <param name="before"> (optional, default to 5)</param>
        /// <param name="after"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatBskyModerationGetMessageContext200Response</returns>
        public BSky.Client.ApiResponse<ChatBskyModerationGetMessageContext200Response> ChatBskyModerationGetMessageContextWithHttpInfo(string messageId, string? convoId = default(string?), int? before = default(int?), int? after = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'messageId' when calling ChatBskyModerationApi->ChatBskyModerationGetMessageContext");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (convoId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "convoId", convoId));
            }
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }

            localVarRequestOptions.Operation = "ChatBskyModerationApi.ChatBskyModerationGetMessageContext";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ChatBskyModerationGetMessageContext200Response>("/chat.bsky.moderation.getMessageContext", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyModerationGetMessageContext", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId"></param>
        /// <param name="convoId">Conversation that the message is from. NOTE: this field will eventually be required. (optional)</param>
        /// <param name="before"> (optional, default to 5)</param>
        /// <param name="after"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatBskyModerationGetMessageContext200Response</returns>
        public async System.Threading.Tasks.Task<ChatBskyModerationGetMessageContext200Response> ChatBskyModerationGetMessageContextAsync(string messageId, string? convoId = default(string?), int? before = default(int?), int? after = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ChatBskyModerationGetMessageContext200Response> localVarResponse = await ChatBskyModerationGetMessageContextWithHttpInfoAsync(messageId, convoId, before, after, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId"></param>
        /// <param name="convoId">Conversation that the message is from. NOTE: this field will eventually be required. (optional)</param>
        /// <param name="before"> (optional, default to 5)</param>
        /// <param name="after"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatBskyModerationGetMessageContext200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ChatBskyModerationGetMessageContext200Response>> ChatBskyModerationGetMessageContextWithHttpInfoAsync(string messageId, string? convoId = default(string?), int? before = default(int?), int? after = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'messageId' when calling ChatBskyModerationApi->ChatBskyModerationGetMessageContext");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (convoId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "convoId", convoId));
            }
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }

            localVarRequestOptions.Operation = "ChatBskyModerationApi.ChatBskyModerationGetMessageContext";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ChatBskyModerationGetMessageContext200Response>("/chat.bsky.moderation.getMessageContext", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyModerationGetMessageContext", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyModerationUpdateActorAccessRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ChatBskyModerationUpdateActorAccess(ChatBskyModerationUpdateActorAccessRequest chatBskyModerationUpdateActorAccessRequest, int operationIndex = 0)
        {
            ChatBskyModerationUpdateActorAccessWithHttpInfo(chatBskyModerationUpdateActorAccessRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyModerationUpdateActorAccessRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ChatBskyModerationUpdateActorAccessWithHttpInfo(ChatBskyModerationUpdateActorAccessRequest chatBskyModerationUpdateActorAccessRequest, int operationIndex = 0)
        {
            // verify the required parameter 'chatBskyModerationUpdateActorAccessRequest' is set
            if (chatBskyModerationUpdateActorAccessRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyModerationUpdateActorAccessRequest' when calling ChatBskyModerationApi->ChatBskyModerationUpdateActorAccess");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyModerationUpdateActorAccessRequest;

            localVarRequestOptions.Operation = "ChatBskyModerationApi.ChatBskyModerationUpdateActorAccess";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/chat.bsky.moderation.updateActorAccess", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyModerationUpdateActorAccess", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyModerationUpdateActorAccessRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChatBskyModerationUpdateActorAccessAsync(ChatBskyModerationUpdateActorAccessRequest chatBskyModerationUpdateActorAccessRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ChatBskyModerationUpdateActorAccessWithHttpInfoAsync(chatBskyModerationUpdateActorAccessRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatBskyModerationUpdateActorAccessRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ChatBskyModerationUpdateActorAccessWithHttpInfoAsync(ChatBskyModerationUpdateActorAccessRequest chatBskyModerationUpdateActorAccessRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chatBskyModerationUpdateActorAccessRequest' is set
            if (chatBskyModerationUpdateActorAccessRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'chatBskyModerationUpdateActorAccessRequest' when calling ChatBskyModerationApi->ChatBskyModerationUpdateActorAccess");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chatBskyModerationUpdateActorAccessRequest;

            localVarRequestOptions.Operation = "ChatBskyModerationApi.ChatBskyModerationUpdateActorAccess";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/chat.bsky.moderation.updateActorAccess", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatBskyModerationUpdateActorAccess", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
