/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BSky.Client;
using BSky.Model;

namespace BSky.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoSyncApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the account.</param>
        /// <param name="cid">The CID of the blob to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoSyncGetBlob(string did, string cid, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the account.</param>
        /// <param name="cid">The CID of the blob to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoSyncGetBlobWithHttpInfo(string did, string cid, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="cids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoSyncGetBlocks(string did, List<string> cids, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="cids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoSyncGetBlocksWithHttpInfo(string did, List<string> cids, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the current commit CID &amp; revision of the specified repo. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoSyncGetLatestCommit200Response</returns>
        ComAtprotoSyncGetLatestCommit200Response ComAtprotoSyncGetLatestCommit(string did, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the current commit CID &amp; revision of the specified repo. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoSyncGetLatestCommit200Response</returns>
        ApiResponse<ComAtprotoSyncGetLatestCommit200Response> ComAtprotoSyncGetLatestCommitWithHttpInfo(string did, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="collection"></param>
        /// <param name="rkey">Record Key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoSyncGetRecord(string did, string collection, string rkey, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="collection"></param>
        /// <param name="rkey">Record Key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoSyncGetRecordWithHttpInfo(string did, string collection, string rkey, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download a repository export as CAR file. Optionally only a &#39;diff&#39; since a previous revision. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">The revision (&#39;rev&#39;) of the repo to create a diff from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoSyncGetRepo(string did, string? since = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download a repository export as CAR file. Optionally only a &#39;diff&#39; since a previous revision. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">The revision (&#39;rev&#39;) of the repo to create a diff from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoSyncGetRepoWithHttpInfo(string did, string? since = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoSyncGetRepoStatus200Response</returns>
        ComAtprotoSyncGetRepoStatus200Response ComAtprotoSyncGetRepoStatus(string did, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoSyncGetRepoStatus200Response</returns>
        ApiResponse<ComAtprotoSyncGetRepoStatus200Response> ComAtprotoSyncGetRepoStatusWithHttpInfo(string did, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">Optional revision of the repo to list blobs since. (optional)</param>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoSyncListBlobs200Response</returns>
        ComAtprotoSyncListBlobs200Response ComAtprotoSyncListBlobs(string did, string? since = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">Optional revision of the repo to list blobs since. (optional)</param>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoSyncListBlobs200Response</returns>
        ApiResponse<ComAtprotoSyncListBlobs200Response> ComAtprotoSyncListBlobsWithHttpInfo(string did, string? since = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoSyncListRepos200Response</returns>
        ComAtprotoSyncListRepos200Response ComAtprotoSyncListRepos(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoSyncListRepos200Response</returns>
        ApiResponse<ComAtprotoSyncListRepos200Response> ComAtprotoSyncListReposWithHttpInfo(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncNotifyOfUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoSyncNotifyOfUpdate(ComAtprotoSyncNotifyOfUpdateRequest comAtprotoSyncNotifyOfUpdateRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncNotifyOfUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoSyncNotifyOfUpdateWithHttpInfo(ComAtprotoSyncNotifyOfUpdateRequest comAtprotoSyncNotifyOfUpdateRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncRequestCrawlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoSyncRequestCrawl(ComAtprotoSyncRequestCrawlRequest comAtprotoSyncRequestCrawlRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncRequestCrawlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoSyncRequestCrawlWithHttpInfo(ComAtprotoSyncRequestCrawlRequest comAtprotoSyncRequestCrawlRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoSyncApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the account.</param>
        /// <param name="cid">The CID of the blob to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoSyncGetBlobAsync(string did, string cid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the account.</param>
        /// <param name="cid">The CID of the blob to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoSyncGetBlobWithHttpInfoAsync(string did, string cid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="cids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoSyncGetBlocksAsync(string did, List<string> cids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="cids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoSyncGetBlocksWithHttpInfoAsync(string did, List<string> cids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the current commit CID &amp; revision of the specified repo. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoSyncGetLatestCommit200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoSyncGetLatestCommit200Response> ComAtprotoSyncGetLatestCommitAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the current commit CID &amp; revision of the specified repo. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoSyncGetLatestCommit200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoSyncGetLatestCommit200Response>> ComAtprotoSyncGetLatestCommitWithHttpInfoAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="collection"></param>
        /// <param name="rkey">Record Key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoSyncGetRecordAsync(string did, string collection, string rkey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="collection"></param>
        /// <param name="rkey">Record Key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoSyncGetRecordWithHttpInfoAsync(string did, string collection, string rkey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download a repository export as CAR file. Optionally only a &#39;diff&#39; since a previous revision. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">The revision (&#39;rev&#39;) of the repo to create a diff from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoSyncGetRepoAsync(string did, string? since = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download a repository export as CAR file. Optionally only a &#39;diff&#39; since a previous revision. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">The revision (&#39;rev&#39;) of the repo to create a diff from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoSyncGetRepoWithHttpInfoAsync(string did, string? since = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoSyncGetRepoStatus200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoSyncGetRepoStatus200Response> ComAtprotoSyncGetRepoStatusAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoSyncGetRepoStatus200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoSyncGetRepoStatus200Response>> ComAtprotoSyncGetRepoStatusWithHttpInfoAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">Optional revision of the repo to list blobs since. (optional)</param>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoSyncListBlobs200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoSyncListBlobs200Response> ComAtprotoSyncListBlobsAsync(string did, string? since = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">Optional revision of the repo to list blobs since. (optional)</param>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoSyncListBlobs200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoSyncListBlobs200Response>> ComAtprotoSyncListBlobsWithHttpInfoAsync(string did, string? since = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoSyncListRepos200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoSyncListRepos200Response> ComAtprotoSyncListReposAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoSyncListRepos200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoSyncListRepos200Response>> ComAtprotoSyncListReposWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncNotifyOfUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoSyncNotifyOfUpdateAsync(ComAtprotoSyncNotifyOfUpdateRequest comAtprotoSyncNotifyOfUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncNotifyOfUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoSyncNotifyOfUpdateWithHttpInfoAsync(ComAtprotoSyncNotifyOfUpdateRequest comAtprotoSyncNotifyOfUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncRequestCrawlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoSyncRequestCrawlAsync(ComAtprotoSyncRequestCrawlRequest comAtprotoSyncRequestCrawlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncRequestCrawlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoSyncRequestCrawlWithHttpInfoAsync(ComAtprotoSyncRequestCrawlRequest comAtprotoSyncRequestCrawlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoSyncApi : IComAtprotoSyncApiSync, IComAtprotoSyncApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ComAtprotoSyncApi : IComAtprotoSyncApi
    {
        private BSky.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoSyncApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComAtprotoSyncApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoSyncApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComAtprotoSyncApi(string basePath)
        {
            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                new BSky.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoSyncApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ComAtprotoSyncApi(BSky.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoSyncApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ComAtprotoSyncApi(BSky.Client.ISynchronousClient client, BSky.Client.IAsynchronousClient asyncClient, BSky.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BSky.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BSky.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BSky.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BSky.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the account.</param>
        /// <param name="cid">The CID of the blob to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoSyncGetBlob(string did, string cid, int operationIndex = 0)
        {
            ComAtprotoSyncGetBlobWithHttpInfo(did, cid);
        }

        /// <summary>
        ///  Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the account.</param>
        /// <param name="cid">The CID of the blob to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoSyncGetBlobWithHttpInfo(string did, string cid, int operationIndex = 0)
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoSyncApi->ComAtprotoSyncGetBlob");
            }

            // verify the required parameter 'cid' is set
            if (cid == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'cid' when calling ComAtprotoSyncApi->ComAtprotoSyncGetBlob");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*",
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncGetBlob";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/com.atproto.sync.getBlob", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncGetBlob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the account.</param>
        /// <param name="cid">The CID of the blob to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoSyncGetBlobAsync(string did, string cid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoSyncGetBlobWithHttpInfoAsync(did, cid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the account.</param>
        /// <param name="cid">The CID of the blob to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoSyncGetBlobWithHttpInfoAsync(string did, string cid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoSyncApi->ComAtprotoSyncGetBlob");
            }

            // verify the required parameter 'cid' is set
            if (cid == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'cid' when calling ComAtprotoSyncApi->ComAtprotoSyncGetBlob");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*",
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncGetBlob";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/com.atproto.sync.getBlob", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncGetBlob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="cids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoSyncGetBlocks(string did, List<string> cids, int operationIndex = 0)
        {
            ComAtprotoSyncGetBlocksWithHttpInfo(did, cids);
        }

        /// <summary>
        ///  Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="cids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoSyncGetBlocksWithHttpInfo(string did, List<string> cids, int operationIndex = 0)
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoSyncApi->ComAtprotoSyncGetBlocks");
            }

            // verify the required parameter 'cids' is set
            if (cids == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'cids' when calling ComAtprotoSyncApi->ComAtprotoSyncGetBlocks");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.ipld.car",
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "cids", cids));

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncGetBlocks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/com.atproto.sync.getBlocks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncGetBlocks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="cids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoSyncGetBlocksAsync(string did, List<string> cids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoSyncGetBlocksWithHttpInfoAsync(did, cids, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="cids"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoSyncGetBlocksWithHttpInfoAsync(string did, List<string> cids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoSyncApi->ComAtprotoSyncGetBlocks");
            }

            // verify the required parameter 'cids' is set
            if (cids == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'cids' when calling ComAtprotoSyncApi->ComAtprotoSyncGetBlocks");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.ipld.car",
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "cids", cids));

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncGetBlocks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/com.atproto.sync.getBlocks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncGetBlocks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the current commit CID &amp; revision of the specified repo. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoSyncGetLatestCommit200Response</returns>
        public ComAtprotoSyncGetLatestCommit200Response ComAtprotoSyncGetLatestCommit(string did, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoSyncGetLatestCommit200Response> localVarResponse = ComAtprotoSyncGetLatestCommitWithHttpInfo(did);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the current commit CID &amp; revision of the specified repo. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoSyncGetLatestCommit200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoSyncGetLatestCommit200Response> ComAtprotoSyncGetLatestCommitWithHttpInfo(string did, int operationIndex = 0)
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoSyncApi->ComAtprotoSyncGetLatestCommit");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncGetLatestCommit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoSyncGetLatestCommit200Response>("/com.atproto.sync.getLatestCommit", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncGetLatestCommit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the current commit CID &amp; revision of the specified repo. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoSyncGetLatestCommit200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoSyncGetLatestCommit200Response> ComAtprotoSyncGetLatestCommitAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoSyncGetLatestCommit200Response> localVarResponse = await ComAtprotoSyncGetLatestCommitWithHttpInfoAsync(did, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the current commit CID &amp; revision of the specified repo. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoSyncGetLatestCommit200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoSyncGetLatestCommit200Response>> ComAtprotoSyncGetLatestCommitWithHttpInfoAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoSyncApi->ComAtprotoSyncGetLatestCommit");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncGetLatestCommit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComAtprotoSyncGetLatestCommit200Response>("/com.atproto.sync.getLatestCommit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncGetLatestCommit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="collection"></param>
        /// <param name="rkey">Record Key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoSyncGetRecord(string did, string collection, string rkey, int operationIndex = 0)
        {
            ComAtprotoSyncGetRecordWithHttpInfo(did, collection, rkey);
        }

        /// <summary>
        ///  Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="collection"></param>
        /// <param name="rkey">Record Key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoSyncGetRecordWithHttpInfo(string did, string collection, string rkey, int operationIndex = 0)
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoSyncApi->ComAtprotoSyncGetRecord");
            }

            // verify the required parameter 'collection' is set
            if (collection == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'collection' when calling ComAtprotoSyncApi->ComAtprotoSyncGetRecord");
            }

            // verify the required parameter 'rkey' is set
            if (rkey == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'rkey' when calling ComAtprotoSyncApi->ComAtprotoSyncGetRecord");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.ipld.car",
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "collection", collection));
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "rkey", rkey));

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncGetRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/com.atproto.sync.getRecord", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncGetRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="collection"></param>
        /// <param name="rkey">Record Key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoSyncGetRecordAsync(string did, string collection, string rkey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoSyncGetRecordWithHttpInfoAsync(did, collection, rkey, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="collection"></param>
        /// <param name="rkey">Record Key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoSyncGetRecordWithHttpInfoAsync(string did, string collection, string rkey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoSyncApi->ComAtprotoSyncGetRecord");
            }

            // verify the required parameter 'collection' is set
            if (collection == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'collection' when calling ComAtprotoSyncApi->ComAtprotoSyncGetRecord");
            }

            // verify the required parameter 'rkey' is set
            if (rkey == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'rkey' when calling ComAtprotoSyncApi->ComAtprotoSyncGetRecord");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.ipld.car",
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "collection", collection));
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "rkey", rkey));

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncGetRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/com.atproto.sync.getRecord", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncGetRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Download a repository export as CAR file. Optionally only a &#39;diff&#39; since a previous revision. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">The revision (&#39;rev&#39;) of the repo to create a diff from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoSyncGetRepo(string did, string? since = default(string?), int operationIndex = 0)
        {
            ComAtprotoSyncGetRepoWithHttpInfo(did, since);
        }

        /// <summary>
        ///  Download a repository export as CAR file. Optionally only a &#39;diff&#39; since a previous revision. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">The revision (&#39;rev&#39;) of the repo to create a diff from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoSyncGetRepoWithHttpInfo(string did, string? since = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoSyncApi->ComAtprotoSyncGetRepo");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.ipld.car",
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncGetRepo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/com.atproto.sync.getRepo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncGetRepo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Download a repository export as CAR file. Optionally only a &#39;diff&#39; since a previous revision. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">The revision (&#39;rev&#39;) of the repo to create a diff from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoSyncGetRepoAsync(string did, string? since = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoSyncGetRepoWithHttpInfoAsync(did, since, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Download a repository export as CAR file. Optionally only a &#39;diff&#39; since a previous revision. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">The revision (&#39;rev&#39;) of the repo to create a diff from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoSyncGetRepoWithHttpInfoAsync(string did, string? since = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoSyncApi->ComAtprotoSyncGetRepo");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.ipld.car",
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncGetRepo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/com.atproto.sync.getRepo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncGetRepo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoSyncGetRepoStatus200Response</returns>
        public ComAtprotoSyncGetRepoStatus200Response ComAtprotoSyncGetRepoStatus(string did, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoSyncGetRepoStatus200Response> localVarResponse = ComAtprotoSyncGetRepoStatusWithHttpInfo(did);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoSyncGetRepoStatus200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoSyncGetRepoStatus200Response> ComAtprotoSyncGetRepoStatusWithHttpInfo(string did, int operationIndex = 0)
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoSyncApi->ComAtprotoSyncGetRepoStatus");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncGetRepoStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoSyncGetRepoStatus200Response>("/com.atproto.sync.getRepoStatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncGetRepoStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoSyncGetRepoStatus200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoSyncGetRepoStatus200Response> ComAtprotoSyncGetRepoStatusAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoSyncGetRepoStatus200Response> localVarResponse = await ComAtprotoSyncGetRepoStatusWithHttpInfoAsync(did, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoSyncGetRepoStatus200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoSyncGetRepoStatus200Response>> ComAtprotoSyncGetRepoStatusWithHttpInfoAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoSyncApi->ComAtprotoSyncGetRepoStatus");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncGetRepoStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComAtprotoSyncGetRepoStatus200Response>("/com.atproto.sync.getRepoStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncGetRepoStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">Optional revision of the repo to list blobs since. (optional)</param>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoSyncListBlobs200Response</returns>
        public ComAtprotoSyncListBlobs200Response ComAtprotoSyncListBlobs(string did, string? since = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoSyncListBlobs200Response> localVarResponse = ComAtprotoSyncListBlobsWithHttpInfo(did, since, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">Optional revision of the repo to list blobs since. (optional)</param>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoSyncListBlobs200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoSyncListBlobs200Response> ComAtprotoSyncListBlobsWithHttpInfo(string did, string? since = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoSyncApi->ComAtprotoSyncListBlobs");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncListBlobs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoSyncListBlobs200Response>("/com.atproto.sync.listBlobs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncListBlobs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">Optional revision of the repo to list blobs since. (optional)</param>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoSyncListBlobs200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoSyncListBlobs200Response> ComAtprotoSyncListBlobsAsync(string did, string? since = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoSyncListBlobs200Response> localVarResponse = await ComAtprotoSyncListBlobsWithHttpInfoAsync(did, since, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">Optional revision of the repo to list blobs since. (optional)</param>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoSyncListBlobs200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoSyncListBlobs200Response>> ComAtprotoSyncListBlobsWithHttpInfoAsync(string did, string? since = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoSyncApi->ComAtprotoSyncListBlobs");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncListBlobs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComAtprotoSyncListBlobs200Response>("/com.atproto.sync.listBlobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncListBlobs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoSyncListRepos200Response</returns>
        public ComAtprotoSyncListRepos200Response ComAtprotoSyncListRepos(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoSyncListRepos200Response> localVarResponse = ComAtprotoSyncListReposWithHttpInfo(limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoSyncListRepos200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoSyncListRepos200Response> ComAtprotoSyncListReposWithHttpInfo(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncListRepos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoSyncListRepos200Response>("/com.atproto.sync.listRepos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncListRepos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoSyncListRepos200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoSyncListRepos200Response> ComAtprotoSyncListReposAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoSyncListRepos200Response> localVarResponse = await ComAtprotoSyncListReposWithHttpInfoAsync(limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoSyncListRepos200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoSyncListRepos200Response>> ComAtprotoSyncListReposWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncListRepos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComAtprotoSyncListRepos200Response>("/com.atproto.sync.listRepos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncListRepos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncNotifyOfUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoSyncNotifyOfUpdate(ComAtprotoSyncNotifyOfUpdateRequest comAtprotoSyncNotifyOfUpdateRequest, int operationIndex = 0)
        {
            ComAtprotoSyncNotifyOfUpdateWithHttpInfo(comAtprotoSyncNotifyOfUpdateRequest);
        }

        /// <summary>
        ///  Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncNotifyOfUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoSyncNotifyOfUpdateWithHttpInfo(ComAtprotoSyncNotifyOfUpdateRequest comAtprotoSyncNotifyOfUpdateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoSyncNotifyOfUpdateRequest' is set
            if (comAtprotoSyncNotifyOfUpdateRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoSyncNotifyOfUpdateRequest' when calling ComAtprotoSyncApi->ComAtprotoSyncNotifyOfUpdate");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoSyncNotifyOfUpdateRequest;

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncNotifyOfUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.sync.notifyOfUpdate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncNotifyOfUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncNotifyOfUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoSyncNotifyOfUpdateAsync(ComAtprotoSyncNotifyOfUpdateRequest comAtprotoSyncNotifyOfUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoSyncNotifyOfUpdateWithHttpInfoAsync(comAtprotoSyncNotifyOfUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncNotifyOfUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoSyncNotifyOfUpdateWithHttpInfoAsync(ComAtprotoSyncNotifyOfUpdateRequest comAtprotoSyncNotifyOfUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoSyncNotifyOfUpdateRequest' is set
            if (comAtprotoSyncNotifyOfUpdateRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoSyncNotifyOfUpdateRequest' when calling ComAtprotoSyncApi->ComAtprotoSyncNotifyOfUpdate");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoSyncNotifyOfUpdateRequest;

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncNotifyOfUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/com.atproto.sync.notifyOfUpdate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncNotifyOfUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncRequestCrawlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoSyncRequestCrawl(ComAtprotoSyncRequestCrawlRequest comAtprotoSyncRequestCrawlRequest, int operationIndex = 0)
        {
            ComAtprotoSyncRequestCrawlWithHttpInfo(comAtprotoSyncRequestCrawlRequest);
        }

        /// <summary>
        ///  Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncRequestCrawlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoSyncRequestCrawlWithHttpInfo(ComAtprotoSyncRequestCrawlRequest comAtprotoSyncRequestCrawlRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoSyncRequestCrawlRequest' is set
            if (comAtprotoSyncRequestCrawlRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoSyncRequestCrawlRequest' when calling ComAtprotoSyncApi->ComAtprotoSyncRequestCrawl");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoSyncRequestCrawlRequest;

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncRequestCrawl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.sync.requestCrawl", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncRequestCrawl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncRequestCrawlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoSyncRequestCrawlAsync(ComAtprotoSyncRequestCrawlRequest comAtprotoSyncRequestCrawlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoSyncRequestCrawlWithHttpInfoAsync(comAtprotoSyncRequestCrawlRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoSyncRequestCrawlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoSyncRequestCrawlWithHttpInfoAsync(ComAtprotoSyncRequestCrawlRequest comAtprotoSyncRequestCrawlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoSyncRequestCrawlRequest' is set
            if (comAtprotoSyncRequestCrawlRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoSyncRequestCrawlRequest' when calling ComAtprotoSyncApi->ComAtprotoSyncRequestCrawl");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoSyncRequestCrawlRequest;

            localVarRequestOptions.Operation = "ComAtprotoSyncApi.ComAtprotoSyncRequestCrawl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/com.atproto.sync.requestCrawl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoSyncRequestCrawl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
