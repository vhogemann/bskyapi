/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BSky.Client;
using BSky.Model;

namespace BSky.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoIdentityApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Describe the credentials that should be included in the DID doc of an account that is migrating to this service.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoIdentityGetRecommendedDidCredentials200Response</returns>
        ComAtprotoIdentityGetRecommendedDidCredentials200Response ComAtprotoIdentityGetRecommendedDidCredentials(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Describe the credentials that should be included in the DID doc of an account that is migrating to this service.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoIdentityGetRecommendedDidCredentials200Response</returns>
        ApiResponse<ComAtprotoIdentityGetRecommendedDidCredentials200Response> ComAtprotoIdentityGetRecommendedDidCredentialsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request an email with a code to in order to request a signed PLC operation. Requires Auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoIdentityRequestPlcOperationSignature(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request an email with a code to in order to request a signed PLC operation. Requires Auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoIdentityRequestPlcOperationSignatureWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resolves a handle (domain name) to a DID.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">The handle to resolve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminDeleteAccountRequest</returns>
        ComAtprotoAdminDeleteAccountRequest ComAtprotoIdentityResolveHandle(string handle, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resolves a handle (domain name) to a DID.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">The handle to resolve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminDeleteAccountRequest</returns>
        ApiResponse<ComAtprotoAdminDeleteAccountRequest> ComAtprotoIdentityResolveHandleWithHttpInfo(string handle, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Signs a PLC operation to update some value(s) in the requesting DID&#39;s document.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoIdentitySignPlcOperation200Response</returns>
        ComAtprotoIdentitySignPlcOperation200Response ComAtprotoIdentitySignPlcOperation(ComAtprotoIdentitySignPlcOperationRequest comAtprotoIdentitySignPlcOperationRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Signs a PLC operation to update some value(s) in the requesting DID&#39;s document.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoIdentitySignPlcOperation200Response</returns>
        ApiResponse<ComAtprotoIdentitySignPlcOperation200Response> ComAtprotoIdentitySignPlcOperationWithHttpInfo(ComAtprotoIdentitySignPlcOperationRequest comAtprotoIdentitySignPlcOperationRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validates a PLC operation to ensure that it doesn&#39;t violate a service&#39;s constraints or get the identity into a bad state, then submits it to the PLC registry
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperation200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoIdentitySubmitPlcOperation(ComAtprotoIdentitySignPlcOperation200Response comAtprotoIdentitySignPlcOperation200Response, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validates a PLC operation to ensure that it doesn&#39;t violate a service&#39;s constraints or get the identity into a bad state, then submits it to the PLC registry
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperation200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoIdentitySubmitPlcOperationWithHttpInfo(ComAtprotoIdentitySignPlcOperation200Response comAtprotoIdentitySignPlcOperation200Response, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the current account&#39;s handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentityUpdateHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoIdentityUpdateHandle(ComAtprotoIdentityUpdateHandleRequest comAtprotoIdentityUpdateHandleRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the current account&#39;s handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentityUpdateHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoIdentityUpdateHandleWithHttpInfo(ComAtprotoIdentityUpdateHandleRequest comAtprotoIdentityUpdateHandleRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoIdentityApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Describe the credentials that should be included in the DID doc of an account that is migrating to this service.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoIdentityGetRecommendedDidCredentials200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoIdentityGetRecommendedDidCredentials200Response> ComAtprotoIdentityGetRecommendedDidCredentialsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Describe the credentials that should be included in the DID doc of an account that is migrating to this service.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoIdentityGetRecommendedDidCredentials200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoIdentityGetRecommendedDidCredentials200Response>> ComAtprotoIdentityGetRecommendedDidCredentialsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request an email with a code to in order to request a signed PLC operation. Requires Auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoIdentityRequestPlcOperationSignatureAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request an email with a code to in order to request a signed PLC operation. Requires Auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoIdentityRequestPlcOperationSignatureWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resolves a handle (domain name) to a DID.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">The handle to resolve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDeleteAccountRequest</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminDeleteAccountRequest> ComAtprotoIdentityResolveHandleAsync(string handle, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resolves a handle (domain name) to a DID.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">The handle to resolve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDeleteAccountRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminDeleteAccountRequest>> ComAtprotoIdentityResolveHandleWithHttpInfoAsync(string handle, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Signs a PLC operation to update some value(s) in the requesting DID&#39;s document.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoIdentitySignPlcOperation200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoIdentitySignPlcOperation200Response> ComAtprotoIdentitySignPlcOperationAsync(ComAtprotoIdentitySignPlcOperationRequest comAtprotoIdentitySignPlcOperationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Signs a PLC operation to update some value(s) in the requesting DID&#39;s document.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoIdentitySignPlcOperation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoIdentitySignPlcOperation200Response>> ComAtprotoIdentitySignPlcOperationWithHttpInfoAsync(ComAtprotoIdentitySignPlcOperationRequest comAtprotoIdentitySignPlcOperationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validates a PLC operation to ensure that it doesn&#39;t violate a service&#39;s constraints or get the identity into a bad state, then submits it to the PLC registry
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperation200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoIdentitySubmitPlcOperationAsync(ComAtprotoIdentitySignPlcOperation200Response comAtprotoIdentitySignPlcOperation200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validates a PLC operation to ensure that it doesn&#39;t violate a service&#39;s constraints or get the identity into a bad state, then submits it to the PLC registry
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperation200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoIdentitySubmitPlcOperationWithHttpInfoAsync(ComAtprotoIdentitySignPlcOperation200Response comAtprotoIdentitySignPlcOperation200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the current account&#39;s handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentityUpdateHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoIdentityUpdateHandleAsync(ComAtprotoIdentityUpdateHandleRequest comAtprotoIdentityUpdateHandleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the current account&#39;s handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentityUpdateHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoIdentityUpdateHandleWithHttpInfoAsync(ComAtprotoIdentityUpdateHandleRequest comAtprotoIdentityUpdateHandleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoIdentityApi : IComAtprotoIdentityApiSync, IComAtprotoIdentityApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ComAtprotoIdentityApi : IComAtprotoIdentityApi
    {
        private BSky.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoIdentityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComAtprotoIdentityApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoIdentityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComAtprotoIdentityApi(string basePath)
        {
            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                new BSky.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoIdentityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ComAtprotoIdentityApi(BSky.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoIdentityApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ComAtprotoIdentityApi(BSky.Client.ISynchronousClient client, BSky.Client.IAsynchronousClient asyncClient, BSky.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BSky.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BSky.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BSky.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BSky.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Describe the credentials that should be included in the DID doc of an account that is migrating to this service.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoIdentityGetRecommendedDidCredentials200Response</returns>
        public ComAtprotoIdentityGetRecommendedDidCredentials200Response ComAtprotoIdentityGetRecommendedDidCredentials(int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoIdentityGetRecommendedDidCredentials200Response> localVarResponse = ComAtprotoIdentityGetRecommendedDidCredentialsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Describe the credentials that should be included in the DID doc of an account that is migrating to this service.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoIdentityGetRecommendedDidCredentials200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoIdentityGetRecommendedDidCredentials200Response> ComAtprotoIdentityGetRecommendedDidCredentialsWithHttpInfo(int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ComAtprotoIdentityApi.ComAtprotoIdentityGetRecommendedDidCredentials";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoIdentityGetRecommendedDidCredentials200Response>("/com.atproto.identity.getRecommendedDidCredentials", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoIdentityGetRecommendedDidCredentials", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Describe the credentials that should be included in the DID doc of an account that is migrating to this service.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoIdentityGetRecommendedDidCredentials200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoIdentityGetRecommendedDidCredentials200Response> ComAtprotoIdentityGetRecommendedDidCredentialsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoIdentityGetRecommendedDidCredentials200Response> localVarResponse = await ComAtprotoIdentityGetRecommendedDidCredentialsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Describe the credentials that should be included in the DID doc of an account that is migrating to this service.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoIdentityGetRecommendedDidCredentials200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoIdentityGetRecommendedDidCredentials200Response>> ComAtprotoIdentityGetRecommendedDidCredentialsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ComAtprotoIdentityApi.ComAtprotoIdentityGetRecommendedDidCredentials";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComAtprotoIdentityGetRecommendedDidCredentials200Response>("/com.atproto.identity.getRecommendedDidCredentials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoIdentityGetRecommendedDidCredentials", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request an email with a code to in order to request a signed PLC operation. Requires Auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoIdentityRequestPlcOperationSignature(int operationIndex = 0)
        {
            ComAtprotoIdentityRequestPlcOperationSignatureWithHttpInfo();
        }

        /// <summary>
        ///  Request an email with a code to in order to request a signed PLC operation. Requires Auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoIdentityRequestPlcOperationSignatureWithHttpInfo(int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ComAtprotoIdentityApi.ComAtprotoIdentityRequestPlcOperationSignature";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.identity.requestPlcOperationSignature", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoIdentityRequestPlcOperationSignature", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request an email with a code to in order to request a signed PLC operation. Requires Auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoIdentityRequestPlcOperationSignatureAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoIdentityRequestPlcOperationSignatureWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Request an email with a code to in order to request a signed PLC operation. Requires Auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoIdentityRequestPlcOperationSignatureWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ComAtprotoIdentityApi.ComAtprotoIdentityRequestPlcOperationSignature";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/com.atproto.identity.requestPlcOperationSignature", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoIdentityRequestPlcOperationSignature", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Resolves a handle (domain name) to a DID.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">The handle to resolve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoAdminDeleteAccountRequest</returns>
        public ComAtprotoAdminDeleteAccountRequest ComAtprotoIdentityResolveHandle(string handle, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoAdminDeleteAccountRequest> localVarResponse = ComAtprotoIdentityResolveHandleWithHttpInfo(handle);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Resolves a handle (domain name) to a DID.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">The handle to resolve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoAdminDeleteAccountRequest</returns>
        public BSky.Client.ApiResponse<ComAtprotoAdminDeleteAccountRequest> ComAtprotoIdentityResolveHandleWithHttpInfo(string handle, int operationIndex = 0)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'handle' when calling ComAtprotoIdentityApi->ComAtprotoIdentityResolveHandle");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "handle", handle));

            localVarRequestOptions.Operation = "ComAtprotoIdentityApi.ComAtprotoIdentityResolveHandle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminDeleteAccountRequest>("/com.atproto.identity.resolveHandle", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoIdentityResolveHandle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Resolves a handle (domain name) to a DID.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">The handle to resolve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDeleteAccountRequest</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminDeleteAccountRequest> ComAtprotoIdentityResolveHandleAsync(string handle, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoAdminDeleteAccountRequest> localVarResponse = await ComAtprotoIdentityResolveHandleWithHttpInfoAsync(handle, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Resolves a handle (domain name) to a DID.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">The handle to resolve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDeleteAccountRequest)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoAdminDeleteAccountRequest>> ComAtprotoIdentityResolveHandleWithHttpInfoAsync(string handle, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'handle' when calling ComAtprotoIdentityApi->ComAtprotoIdentityResolveHandle");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "handle", handle));

            localVarRequestOptions.Operation = "ComAtprotoIdentityApi.ComAtprotoIdentityResolveHandle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComAtprotoAdminDeleteAccountRequest>("/com.atproto.identity.resolveHandle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoIdentityResolveHandle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Signs a PLC operation to update some value(s) in the requesting DID&#39;s document.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoIdentitySignPlcOperation200Response</returns>
        public ComAtprotoIdentitySignPlcOperation200Response ComAtprotoIdentitySignPlcOperation(ComAtprotoIdentitySignPlcOperationRequest comAtprotoIdentitySignPlcOperationRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoIdentitySignPlcOperation200Response> localVarResponse = ComAtprotoIdentitySignPlcOperationWithHttpInfo(comAtprotoIdentitySignPlcOperationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Signs a PLC operation to update some value(s) in the requesting DID&#39;s document.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoIdentitySignPlcOperation200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoIdentitySignPlcOperation200Response> ComAtprotoIdentitySignPlcOperationWithHttpInfo(ComAtprotoIdentitySignPlcOperationRequest comAtprotoIdentitySignPlcOperationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoIdentitySignPlcOperationRequest' is set
            if (comAtprotoIdentitySignPlcOperationRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoIdentitySignPlcOperationRequest' when calling ComAtprotoIdentityApi->ComAtprotoIdentitySignPlcOperation");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoIdentitySignPlcOperationRequest;

            localVarRequestOptions.Operation = "ComAtprotoIdentityApi.ComAtprotoIdentitySignPlcOperation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoIdentitySignPlcOperation200Response>("/com.atproto.identity.signPlcOperation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoIdentitySignPlcOperation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Signs a PLC operation to update some value(s) in the requesting DID&#39;s document.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoIdentitySignPlcOperation200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoIdentitySignPlcOperation200Response> ComAtprotoIdentitySignPlcOperationAsync(ComAtprotoIdentitySignPlcOperationRequest comAtprotoIdentitySignPlcOperationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoIdentitySignPlcOperation200Response> localVarResponse = await ComAtprotoIdentitySignPlcOperationWithHttpInfoAsync(comAtprotoIdentitySignPlcOperationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Signs a PLC operation to update some value(s) in the requesting DID&#39;s document.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoIdentitySignPlcOperation200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoIdentitySignPlcOperation200Response>> ComAtprotoIdentitySignPlcOperationWithHttpInfoAsync(ComAtprotoIdentitySignPlcOperationRequest comAtprotoIdentitySignPlcOperationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoIdentitySignPlcOperationRequest' is set
            if (comAtprotoIdentitySignPlcOperationRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoIdentitySignPlcOperationRequest' when calling ComAtprotoIdentityApi->ComAtprotoIdentitySignPlcOperation");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoIdentitySignPlcOperationRequest;

            localVarRequestOptions.Operation = "ComAtprotoIdentityApi.ComAtprotoIdentitySignPlcOperation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ComAtprotoIdentitySignPlcOperation200Response>("/com.atproto.identity.signPlcOperation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoIdentitySignPlcOperation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validates a PLC operation to ensure that it doesn&#39;t violate a service&#39;s constraints or get the identity into a bad state, then submits it to the PLC registry
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperation200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoIdentitySubmitPlcOperation(ComAtprotoIdentitySignPlcOperation200Response comAtprotoIdentitySignPlcOperation200Response, int operationIndex = 0)
        {
            ComAtprotoIdentitySubmitPlcOperationWithHttpInfo(comAtprotoIdentitySignPlcOperation200Response);
        }

        /// <summary>
        ///  Validates a PLC operation to ensure that it doesn&#39;t violate a service&#39;s constraints or get the identity into a bad state, then submits it to the PLC registry
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperation200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoIdentitySubmitPlcOperationWithHttpInfo(ComAtprotoIdentitySignPlcOperation200Response comAtprotoIdentitySignPlcOperation200Response, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoIdentitySignPlcOperation200Response' is set
            if (comAtprotoIdentitySignPlcOperation200Response == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoIdentitySignPlcOperation200Response' when calling ComAtprotoIdentityApi->ComAtprotoIdentitySubmitPlcOperation");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoIdentitySignPlcOperation200Response;

            localVarRequestOptions.Operation = "ComAtprotoIdentityApi.ComAtprotoIdentitySubmitPlcOperation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.identity.submitPlcOperation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoIdentitySubmitPlcOperation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validates a PLC operation to ensure that it doesn&#39;t violate a service&#39;s constraints or get the identity into a bad state, then submits it to the PLC registry
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperation200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoIdentitySubmitPlcOperationAsync(ComAtprotoIdentitySignPlcOperation200Response comAtprotoIdentitySignPlcOperation200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoIdentitySubmitPlcOperationWithHttpInfoAsync(comAtprotoIdentitySignPlcOperation200Response, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Validates a PLC operation to ensure that it doesn&#39;t violate a service&#39;s constraints or get the identity into a bad state, then submits it to the PLC registry
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentitySignPlcOperation200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoIdentitySubmitPlcOperationWithHttpInfoAsync(ComAtprotoIdentitySignPlcOperation200Response comAtprotoIdentitySignPlcOperation200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoIdentitySignPlcOperation200Response' is set
            if (comAtprotoIdentitySignPlcOperation200Response == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoIdentitySignPlcOperation200Response' when calling ComAtprotoIdentityApi->ComAtprotoIdentitySubmitPlcOperation");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoIdentitySignPlcOperation200Response;

            localVarRequestOptions.Operation = "ComAtprotoIdentityApi.ComAtprotoIdentitySubmitPlcOperation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/com.atproto.identity.submitPlcOperation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoIdentitySubmitPlcOperation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates the current account&#39;s handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentityUpdateHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoIdentityUpdateHandle(ComAtprotoIdentityUpdateHandleRequest comAtprotoIdentityUpdateHandleRequest, int operationIndex = 0)
        {
            ComAtprotoIdentityUpdateHandleWithHttpInfo(comAtprotoIdentityUpdateHandleRequest);
        }

        /// <summary>
        ///  Updates the current account&#39;s handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentityUpdateHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoIdentityUpdateHandleWithHttpInfo(ComAtprotoIdentityUpdateHandleRequest comAtprotoIdentityUpdateHandleRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoIdentityUpdateHandleRequest' is set
            if (comAtprotoIdentityUpdateHandleRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoIdentityUpdateHandleRequest' when calling ComAtprotoIdentityApi->ComAtprotoIdentityUpdateHandle");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoIdentityUpdateHandleRequest;

            localVarRequestOptions.Operation = "ComAtprotoIdentityApi.ComAtprotoIdentityUpdateHandle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.identity.updateHandle", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoIdentityUpdateHandle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates the current account&#39;s handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentityUpdateHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoIdentityUpdateHandleAsync(ComAtprotoIdentityUpdateHandleRequest comAtprotoIdentityUpdateHandleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoIdentityUpdateHandleWithHttpInfoAsync(comAtprotoIdentityUpdateHandleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Updates the current account&#39;s handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoIdentityUpdateHandleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoIdentityUpdateHandleWithHttpInfoAsync(ComAtprotoIdentityUpdateHandleRequest comAtprotoIdentityUpdateHandleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoIdentityUpdateHandleRequest' is set
            if (comAtprotoIdentityUpdateHandleRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoIdentityUpdateHandleRequest' when calling ComAtprotoIdentityApi->ComAtprotoIdentityUpdateHandle");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoIdentityUpdateHandleRequest;

            localVarRequestOptions.Operation = "ComAtprotoIdentityApi.ComAtprotoIdentityUpdateHandle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/com.atproto.identity.updateHandle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoIdentityUpdateHandle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
