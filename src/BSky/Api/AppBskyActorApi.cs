/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BSky.Client;
using BSky.Model;

namespace BSky.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBskyActorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyActorGetPreferences200Response</returns>
        AppBskyActorGetPreferences200Response AppBskyActorGetPreferences(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyActorGetPreferences200Response</returns>
        ApiResponse<AppBskyActorGetPreferences200Response> AppBskyActorGetPreferencesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor">Handle or DID of account to fetch profile of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyActorDefsProfileViewDetailed</returns>
        AppBskyActorDefsProfileViewDetailed AppBskyActorGetProfile(string actor, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor">Handle or DID of account to fetch profile of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyActorDefsProfileViewDetailed</returns>
        ApiResponse<AppBskyActorDefsProfileViewDetailed> AppBskyActorGetProfileWithHttpInfo(string actor, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get detailed profile views of multiple actors.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actors"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyActorGetProfiles200Response</returns>
        AppBskyActorGetProfiles200Response AppBskyActorGetProfiles(List<string> actors, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get detailed profile views of multiple actors.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actors"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyActorGetProfiles200Response</returns>
        ApiResponse<AppBskyActorGetProfiles200Response> AppBskyActorGetProfilesWithHttpInfo(List<string> actors, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyActorGetSuggestions200Response</returns>
        AppBskyActorGetSuggestions200Response AppBskyActorGetSuggestions(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyActorGetSuggestions200Response</returns>
        ApiResponse<AppBskyActorGetSuggestions200Response> AppBskyActorGetSuggestionsWithHttpInfo(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the private preferences attached to the account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyActorGetPreferences200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AppBskyActorPutPreferences(AppBskyActorGetPreferences200Response appBskyActorGetPreferences200Response, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the private preferences attached to the account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyActorGetPreferences200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppBskyActorPutPreferencesWithHttpInfo(AppBskyActorGetPreferences200Response appBskyActorGetPreferences200Response, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find actors (profiles) matching search criteria. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyActorGetSuggestions200Response</returns>
        AppBskyActorGetSuggestions200Response AppBskyActorSearchActors(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find actors (profiles) matching search criteria. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyActorGetSuggestions200Response</returns>
        ApiResponse<AppBskyActorGetSuggestions200Response> AppBskyActorSearchActorsWithHttpInfo(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query prefix; not a full query string. (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyActorSearchActorsTypeahead200Response</returns>
        AppBskyActorSearchActorsTypeahead200Response AppBskyActorSearchActorsTypeahead(string? q = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query prefix; not a full query string. (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyActorSearchActorsTypeahead200Response</returns>
        ApiResponse<AppBskyActorSearchActorsTypeahead200Response> AppBskyActorSearchActorsTypeaheadWithHttpInfo(string? q = default(string?), int? limit = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBskyActorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyActorGetPreferences200Response</returns>
        System.Threading.Tasks.Task<AppBskyActorGetPreferences200Response> AppBskyActorGetPreferencesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyActorGetPreferences200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyActorGetPreferences200Response>> AppBskyActorGetPreferencesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor">Handle or DID of account to fetch profile of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyActorDefsProfileViewDetailed</returns>
        System.Threading.Tasks.Task<AppBskyActorDefsProfileViewDetailed> AppBskyActorGetProfileAsync(string actor, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor">Handle or DID of account to fetch profile of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyActorDefsProfileViewDetailed)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyActorDefsProfileViewDetailed>> AppBskyActorGetProfileWithHttpInfoAsync(string actor, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get detailed profile views of multiple actors.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actors"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyActorGetProfiles200Response</returns>
        System.Threading.Tasks.Task<AppBskyActorGetProfiles200Response> AppBskyActorGetProfilesAsync(List<string> actors, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get detailed profile views of multiple actors.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actors"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyActorGetProfiles200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyActorGetProfiles200Response>> AppBskyActorGetProfilesWithHttpInfoAsync(List<string> actors, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyActorGetSuggestions200Response</returns>
        System.Threading.Tasks.Task<AppBskyActorGetSuggestions200Response> AppBskyActorGetSuggestionsAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyActorGetSuggestions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyActorGetSuggestions200Response>> AppBskyActorGetSuggestionsWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the private preferences attached to the account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyActorGetPreferences200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppBskyActorPutPreferencesAsync(AppBskyActorGetPreferences200Response appBskyActorGetPreferences200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the private preferences attached to the account.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyActorGetPreferences200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppBskyActorPutPreferencesWithHttpInfoAsync(AppBskyActorGetPreferences200Response appBskyActorGetPreferences200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find actors (profiles) matching search criteria. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyActorGetSuggestions200Response</returns>
        System.Threading.Tasks.Task<AppBskyActorGetSuggestions200Response> AppBskyActorSearchActorsAsync(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find actors (profiles) matching search criteria. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyActorGetSuggestions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyActorGetSuggestions200Response>> AppBskyActorSearchActorsWithHttpInfoAsync(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query prefix; not a full query string. (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyActorSearchActorsTypeahead200Response</returns>
        System.Threading.Tasks.Task<AppBskyActorSearchActorsTypeahead200Response> AppBskyActorSearchActorsTypeaheadAsync(string? q = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query prefix; not a full query string. (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyActorSearchActorsTypeahead200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyActorSearchActorsTypeahead200Response>> AppBskyActorSearchActorsTypeaheadWithHttpInfoAsync(string? q = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBskyActorApi : IAppBskyActorApiSync, IAppBskyActorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppBskyActorApi : IAppBskyActorApi
    {
        private BSky.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyActorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AppBskyActorApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyActorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AppBskyActorApi(string basePath)
        {
            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                new BSky.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyActorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AppBskyActorApi(BSky.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyActorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AppBskyActorApi(BSky.Client.ISynchronousClient client, BSky.Client.IAsynchronousClient asyncClient, BSky.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BSky.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BSky.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BSky.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BSky.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyActorGetPreferences200Response</returns>
        public AppBskyActorGetPreferences200Response AppBskyActorGetPreferences(int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyActorGetPreferences200Response> localVarResponse = AppBskyActorGetPreferencesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyActorGetPreferences200Response</returns>
        public BSky.Client.ApiResponse<AppBskyActorGetPreferences200Response> AppBskyActorGetPreferencesWithHttpInfo(int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AppBskyActorApi.AppBskyActorGetPreferences";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyActorGetPreferences200Response>("/app.bsky.actor.getPreferences", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyActorGetPreferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyActorGetPreferences200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyActorGetPreferences200Response> AppBskyActorGetPreferencesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyActorGetPreferences200Response> localVarResponse = await AppBskyActorGetPreferencesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyActorGetPreferences200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyActorGetPreferences200Response>> AppBskyActorGetPreferencesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AppBskyActorApi.AppBskyActorGetPreferences";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyActorGetPreferences200Response>("/app.bsky.actor.getPreferences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyActorGetPreferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor">Handle or DID of account to fetch profile of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyActorDefsProfileViewDetailed</returns>
        public AppBskyActorDefsProfileViewDetailed AppBskyActorGetProfile(string actor, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyActorDefsProfileViewDetailed> localVarResponse = AppBskyActorGetProfileWithHttpInfo(actor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor">Handle or DID of account to fetch profile of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyActorDefsProfileViewDetailed</returns>
        public BSky.Client.ApiResponse<AppBskyActorDefsProfileViewDetailed> AppBskyActorGetProfileWithHttpInfo(string actor, int operationIndex = 0)
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'actor' when calling AppBskyActorApi->AppBskyActorGetProfile");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));

            localVarRequestOptions.Operation = "AppBskyActorApi.AppBskyActorGetProfile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyActorDefsProfileViewDetailed>("/app.bsky.actor.getProfile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyActorGetProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor">Handle or DID of account to fetch profile of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyActorDefsProfileViewDetailed</returns>
        public async System.Threading.Tasks.Task<AppBskyActorDefsProfileViewDetailed> AppBskyActorGetProfileAsync(string actor, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyActorDefsProfileViewDetailed> localVarResponse = await AppBskyActorGetProfileWithHttpInfoAsync(actor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor">Handle or DID of account to fetch profile of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyActorDefsProfileViewDetailed)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyActorDefsProfileViewDetailed>> AppBskyActorGetProfileWithHttpInfoAsync(string actor, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'actor' when calling AppBskyActorApi->AppBskyActorGetProfile");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));

            localVarRequestOptions.Operation = "AppBskyActorApi.AppBskyActorGetProfile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyActorDefsProfileViewDetailed>("/app.bsky.actor.getProfile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyActorGetProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get detailed profile views of multiple actors.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actors"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyActorGetProfiles200Response</returns>
        public AppBskyActorGetProfiles200Response AppBskyActorGetProfiles(List<string> actors, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyActorGetProfiles200Response> localVarResponse = AppBskyActorGetProfilesWithHttpInfo(actors);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get detailed profile views of multiple actors.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actors"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyActorGetProfiles200Response</returns>
        public BSky.Client.ApiResponse<AppBskyActorGetProfiles200Response> AppBskyActorGetProfilesWithHttpInfo(List<string> actors, int operationIndex = 0)
        {
            // verify the required parameter 'actors' is set
            if (actors == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'actors' when calling AppBskyActorApi->AppBskyActorGetProfiles");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "actors", actors));

            localVarRequestOptions.Operation = "AppBskyActorApi.AppBskyActorGetProfiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyActorGetProfiles200Response>("/app.bsky.actor.getProfiles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyActorGetProfiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get detailed profile views of multiple actors.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actors"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyActorGetProfiles200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyActorGetProfiles200Response> AppBskyActorGetProfilesAsync(List<string> actors, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyActorGetProfiles200Response> localVarResponse = await AppBskyActorGetProfilesWithHttpInfoAsync(actors, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get detailed profile views of multiple actors.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actors"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyActorGetProfiles200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyActorGetProfiles200Response>> AppBskyActorGetProfilesWithHttpInfoAsync(List<string> actors, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'actors' is set
            if (actors == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'actors' when calling AppBskyActorApi->AppBskyActorGetProfiles");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "actors", actors));

            localVarRequestOptions.Operation = "AppBskyActorApi.AppBskyActorGetProfiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyActorGetProfiles200Response>("/app.bsky.actor.getProfiles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyActorGetProfiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyActorGetSuggestions200Response</returns>
        public AppBskyActorGetSuggestions200Response AppBskyActorGetSuggestions(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyActorGetSuggestions200Response> localVarResponse = AppBskyActorGetSuggestionsWithHttpInfo(limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyActorGetSuggestions200Response</returns>
        public BSky.Client.ApiResponse<AppBskyActorGetSuggestions200Response> AppBskyActorGetSuggestionsWithHttpInfo(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyActorApi.AppBskyActorGetSuggestions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyActorGetSuggestions200Response>("/app.bsky.actor.getSuggestions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyActorGetSuggestions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyActorGetSuggestions200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyActorGetSuggestions200Response> AppBskyActorGetSuggestionsAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyActorGetSuggestions200Response> localVarResponse = await AppBskyActorGetSuggestionsWithHttpInfoAsync(limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyActorGetSuggestions200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyActorGetSuggestions200Response>> AppBskyActorGetSuggestionsWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyActorApi.AppBskyActorGetSuggestions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyActorGetSuggestions200Response>("/app.bsky.actor.getSuggestions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyActorGetSuggestions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Set the private preferences attached to the account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyActorGetPreferences200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AppBskyActorPutPreferences(AppBskyActorGetPreferences200Response appBskyActorGetPreferences200Response, int operationIndex = 0)
        {
            AppBskyActorPutPreferencesWithHttpInfo(appBskyActorGetPreferences200Response);
        }

        /// <summary>
        ///  Set the private preferences attached to the account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyActorGetPreferences200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> AppBskyActorPutPreferencesWithHttpInfo(AppBskyActorGetPreferences200Response appBskyActorGetPreferences200Response, int operationIndex = 0)
        {
            // verify the required parameter 'appBskyActorGetPreferences200Response' is set
            if (appBskyActorGetPreferences200Response == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'appBskyActorGetPreferences200Response' when calling AppBskyActorApi->AppBskyActorPutPreferences");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = appBskyActorGetPreferences200Response;

            localVarRequestOptions.Operation = "AppBskyActorApi.AppBskyActorPutPreferences";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/app.bsky.actor.putPreferences", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyActorPutPreferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Set the private preferences attached to the account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyActorGetPreferences200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppBskyActorPutPreferencesAsync(AppBskyActorGetPreferences200Response appBskyActorGetPreferences200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AppBskyActorPutPreferencesWithHttpInfoAsync(appBskyActorGetPreferences200Response, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Set the private preferences attached to the account.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyActorGetPreferences200Response"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> AppBskyActorPutPreferencesWithHttpInfoAsync(AppBskyActorGetPreferences200Response appBskyActorGetPreferences200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'appBskyActorGetPreferences200Response' is set
            if (appBskyActorGetPreferences200Response == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'appBskyActorGetPreferences200Response' when calling AppBskyActorApi->AppBskyActorPutPreferences");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = appBskyActorGetPreferences200Response;

            localVarRequestOptions.Operation = "AppBskyActorApi.AppBskyActorPutPreferences";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/app.bsky.actor.putPreferences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyActorPutPreferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Find actors (profiles) matching search criteria. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyActorGetSuggestions200Response</returns>
        public AppBskyActorGetSuggestions200Response AppBskyActorSearchActors(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyActorGetSuggestions200Response> localVarResponse = AppBskyActorSearchActorsWithHttpInfo(q, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Find actors (profiles) matching search criteria. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyActorGetSuggestions200Response</returns>
        public BSky.Client.ApiResponse<AppBskyActorGetSuggestions200Response> AppBskyActorSearchActorsWithHttpInfo(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyActorApi.AppBskyActorSearchActors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyActorGetSuggestions200Response>("/app.bsky.actor.searchActors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyActorSearchActors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Find actors (profiles) matching search criteria. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyActorGetSuggestions200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyActorGetSuggestions200Response> AppBskyActorSearchActorsAsync(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyActorGetSuggestions200Response> localVarResponse = await AppBskyActorSearchActorsWithHttpInfoAsync(q, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Find actors (profiles) matching search criteria. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. (optional)</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyActorGetSuggestions200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyActorGetSuggestions200Response>> AppBskyActorSearchActorsWithHttpInfoAsync(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "AppBskyActorApi.AppBskyActorSearchActors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyActorGetSuggestions200Response>("/app.bsky.actor.searchActors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyActorSearchActors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query prefix; not a full query string. (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppBskyActorSearchActorsTypeahead200Response</returns>
        public AppBskyActorSearchActorsTypeahead200Response AppBskyActorSearchActorsTypeahead(string? q = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<AppBskyActorSearchActorsTypeahead200Response> localVarResponse = AppBskyActorSearchActorsTypeaheadWithHttpInfo(q, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query prefix; not a full query string. (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppBskyActorSearchActorsTypeahead200Response</returns>
        public BSky.Client.ApiResponse<AppBskyActorSearchActorsTypeahead200Response> AppBskyActorSearchActorsTypeaheadWithHttpInfo(string? q = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AppBskyActorApi.AppBskyActorSearchActorsTypeahead";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyActorSearchActorsTypeahead200Response>("/app.bsky.actor.searchActorsTypeahead", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyActorSearchActorsTypeahead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query prefix; not a full query string. (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyActorSearchActorsTypeahead200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyActorSearchActorsTypeahead200Response> AppBskyActorSearchActorsTypeaheadAsync(string? q = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<AppBskyActorSearchActorsTypeahead200Response> localVarResponse = await AppBskyActorSearchActorsTypeaheadWithHttpInfoAsync(q, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query prefix; not a full query string. (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyActorSearchActorsTypeahead200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<AppBskyActorSearchActorsTypeahead200Response>> AppBskyActorSearchActorsTypeaheadWithHttpInfoAsync(string? q = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AppBskyActorApi.AppBskyActorSearchActorsTypeahead";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppBskyActorSearchActorsTypeahead200Response>("/app.bsky.actor.searchActorsTypeahead", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyActorSearchActorsTypeahead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
