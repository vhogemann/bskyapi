/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BSky.Client;
using BSky.Model;

namespace BSky.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoRepoApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoApplyWritesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoApplyWrites200Response</returns>
        ComAtprotoRepoApplyWrites200Response ComAtprotoRepoApplyWrites(ComAtprotoRepoApplyWritesRequest comAtprotoRepoApplyWritesRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoApplyWritesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoApplyWrites200Response</returns>
        ApiResponse<ComAtprotoRepoApplyWrites200Response> ComAtprotoRepoApplyWritesWithHttpInfo(ComAtprotoRepoApplyWritesRequest comAtprotoRepoApplyWritesRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a single new repository record. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoCreateRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoCreateRecord200Response</returns>
        ComAtprotoRepoCreateRecord200Response ComAtprotoRepoCreateRecord(ComAtprotoRepoCreateRecordRequest comAtprotoRepoCreateRecordRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a single new repository record. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoCreateRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoCreateRecord200Response</returns>
        ApiResponse<ComAtprotoRepoCreateRecord200Response> ComAtprotoRepoCreateRecordWithHttpInfo(ComAtprotoRepoCreateRecordRequest comAtprotoRepoCreateRecordRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a repository record, or ensure it doesn&#39;t exist. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoDeleteRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoDeleteRecord200Response</returns>
        ComAtprotoRepoDeleteRecord200Response ComAtprotoRepoDeleteRecord(ComAtprotoRepoDeleteRecordRequest comAtprotoRepoDeleteRecordRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a repository record, or ensure it doesn&#39;t exist. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoDeleteRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoDeleteRecord200Response</returns>
        ApiResponse<ComAtprotoRepoDeleteRecord200Response> ComAtprotoRepoDeleteRecordWithHttpInfo(ComAtprotoRepoDeleteRecordRequest comAtprotoRepoDeleteRecordRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about an account and repository, including the list of collections. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoDescribeRepo200Response</returns>
        ComAtprotoRepoDescribeRepo200Response ComAtprotoRepoDescribeRepo(string repo, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about an account and repository, including the list of collections. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoDescribeRepo200Response</returns>
        ApiResponse<ComAtprotoRepoDescribeRepo200Response> ComAtprotoRepoDescribeRepoWithHttpInfo(string repo, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single record from a repository. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record collection.</param>
        /// <param name="rkey">The Record Key.</param>
        /// <param name="cid">The CID of the version of the record. If not specified, then return the most recent version. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoGetRecord200Response</returns>
        ComAtprotoRepoGetRecord200Response ComAtprotoRepoGetRecord(string repo, string collection, string rkey, string? cid = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single record from a repository. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record collection.</param>
        /// <param name="rkey">The Record Key.</param>
        /// <param name="cid">The CID of the version of the record. If not specified, then return the most recent version. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoGetRecord200Response</returns>
        ApiResponse<ComAtprotoRepoGetRecord200Response> ComAtprotoRepoGetRecordWithHttpInfo(string repo, string collection, string rkey, string? cid = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ComAtprotoRepoImportRepo(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoRepoImportRepoWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoListMissingBlobs200Response</returns>
        ComAtprotoRepoListMissingBlobs200Response ComAtprotoRepoListMissingBlobs(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoListMissingBlobs200Response</returns>
        ApiResponse<ComAtprotoRepoListMissingBlobs200Response> ComAtprotoRepoListMissingBlobsWithHttpInfo(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List a range of records in a repository, matching a specific collection. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record type.</param>
        /// <param name="limit">The number of records to return. (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="reverse">Flag to reverse the order of the returned records. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoListRecords200Response</returns>
        ComAtprotoRepoListRecords200Response ComAtprotoRepoListRecords(string repo, string collection, int? limit = default(int?), string? cursor = default(string?), bool? reverse = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List a range of records in a repository, matching a specific collection. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record type.</param>
        /// <param name="limit">The number of records to return. (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="reverse">Flag to reverse the order of the returned records. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoListRecords200Response</returns>
        ApiResponse<ComAtprotoRepoListRecords200Response> ComAtprotoRepoListRecordsWithHttpInfo(string repo, string collection, int? limit = default(int?), string? cursor = default(string?), bool? reverse = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoPutRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoCreateRecord200Response</returns>
        ComAtprotoRepoCreateRecord200Response ComAtprotoRepoPutRecord(ComAtprotoRepoPutRecordRequest comAtprotoRepoPutRecordRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoPutRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoCreateRecord200Response</returns>
        ApiResponse<ComAtprotoRepoCreateRecord200Response> ComAtprotoRepoPutRecordWithHttpInfo(ComAtprotoRepoPutRecordRequest comAtprotoRepoPutRecordRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoUploadBlob200Response</returns>
        ComAtprotoRepoUploadBlob200Response ComAtprotoRepoUploadBlob(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoUploadBlob200Response</returns>
        ApiResponse<ComAtprotoRepoUploadBlob200Response> ComAtprotoRepoUploadBlobWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoRepoApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoApplyWritesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoApplyWrites200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoRepoApplyWrites200Response> ComAtprotoRepoApplyWritesAsync(ComAtprotoRepoApplyWritesRequest comAtprotoRepoApplyWritesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoApplyWritesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoApplyWrites200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoRepoApplyWrites200Response>> ComAtprotoRepoApplyWritesWithHttpInfoAsync(ComAtprotoRepoApplyWritesRequest comAtprotoRepoApplyWritesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a single new repository record. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoCreateRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoCreateRecord200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoRepoCreateRecord200Response> ComAtprotoRepoCreateRecordAsync(ComAtprotoRepoCreateRecordRequest comAtprotoRepoCreateRecordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a single new repository record. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoCreateRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoCreateRecord200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoRepoCreateRecord200Response>> ComAtprotoRepoCreateRecordWithHttpInfoAsync(ComAtprotoRepoCreateRecordRequest comAtprotoRepoCreateRecordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a repository record, or ensure it doesn&#39;t exist. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoDeleteRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoDeleteRecord200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoRepoDeleteRecord200Response> ComAtprotoRepoDeleteRecordAsync(ComAtprotoRepoDeleteRecordRequest comAtprotoRepoDeleteRecordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a repository record, or ensure it doesn&#39;t exist. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoDeleteRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoDeleteRecord200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoRepoDeleteRecord200Response>> ComAtprotoRepoDeleteRecordWithHttpInfoAsync(ComAtprotoRepoDeleteRecordRequest comAtprotoRepoDeleteRecordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about an account and repository, including the list of collections. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoDescribeRepo200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoRepoDescribeRepo200Response> ComAtprotoRepoDescribeRepoAsync(string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about an account and repository, including the list of collections. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoDescribeRepo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoRepoDescribeRepo200Response>> ComAtprotoRepoDescribeRepoWithHttpInfoAsync(string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single record from a repository. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record collection.</param>
        /// <param name="rkey">The Record Key.</param>
        /// <param name="cid">The CID of the version of the record. If not specified, then return the most recent version. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoGetRecord200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoRepoGetRecord200Response> ComAtprotoRepoGetRecordAsync(string repo, string collection, string rkey, string? cid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single record from a repository. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record collection.</param>
        /// <param name="rkey">The Record Key.</param>
        /// <param name="cid">The CID of the version of the record. If not specified, then return the most recent version. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoGetRecord200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoRepoGetRecord200Response>> ComAtprotoRepoGetRecordWithHttpInfoAsync(string repo, string collection, string rkey, string? cid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoRepoImportRepoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoRepoImportRepoWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoListMissingBlobs200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoRepoListMissingBlobs200Response> ComAtprotoRepoListMissingBlobsAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoListMissingBlobs200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoRepoListMissingBlobs200Response>> ComAtprotoRepoListMissingBlobsWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List a range of records in a repository, matching a specific collection. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record type.</param>
        /// <param name="limit">The number of records to return. (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="reverse">Flag to reverse the order of the returned records. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoListRecords200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoRepoListRecords200Response> ComAtprotoRepoListRecordsAsync(string repo, string collection, int? limit = default(int?), string? cursor = default(string?), bool? reverse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List a range of records in a repository, matching a specific collection. Does not require auth.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record type.</param>
        /// <param name="limit">The number of records to return. (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="reverse">Flag to reverse the order of the returned records. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoListRecords200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoRepoListRecords200Response>> ComAtprotoRepoListRecordsWithHttpInfoAsync(string repo, string collection, int? limit = default(int?), string? cursor = default(string?), bool? reverse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoPutRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoCreateRecord200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoRepoCreateRecord200Response> ComAtprotoRepoPutRecordAsync(ComAtprotoRepoPutRecordRequest comAtprotoRepoPutRecordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoPutRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoCreateRecord200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoRepoCreateRecord200Response>> ComAtprotoRepoPutRecordWithHttpInfoAsync(ComAtprotoRepoPutRecordRequest comAtprotoRepoPutRecordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoUploadBlob200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoRepoUploadBlob200Response> ComAtprotoRepoUploadBlobAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoUploadBlob200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoRepoUploadBlob200Response>> ComAtprotoRepoUploadBlobWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoRepoApi : IComAtprotoRepoApiSync, IComAtprotoRepoApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ComAtprotoRepoApi : IComAtprotoRepoApi
    {
        private BSky.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoRepoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComAtprotoRepoApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoRepoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComAtprotoRepoApi(string basePath)
        {
            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                new BSky.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoRepoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ComAtprotoRepoApi(BSky.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoRepoApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ComAtprotoRepoApi(BSky.Client.ISynchronousClient client, BSky.Client.IAsynchronousClient asyncClient, BSky.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BSky.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BSky.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BSky.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BSky.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoApplyWritesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoApplyWrites200Response</returns>
        public ComAtprotoRepoApplyWrites200Response ComAtprotoRepoApplyWrites(ComAtprotoRepoApplyWritesRequest comAtprotoRepoApplyWritesRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoRepoApplyWrites200Response> localVarResponse = ComAtprotoRepoApplyWritesWithHttpInfo(comAtprotoRepoApplyWritesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoApplyWritesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoApplyWrites200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoRepoApplyWrites200Response> ComAtprotoRepoApplyWritesWithHttpInfo(ComAtprotoRepoApplyWritesRequest comAtprotoRepoApplyWritesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoRepoApplyWritesRequest' is set
            if (comAtprotoRepoApplyWritesRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoRepoApplyWritesRequest' when calling ComAtprotoRepoApi->ComAtprotoRepoApplyWrites");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoRepoApplyWritesRequest;

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoApplyWrites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoRepoApplyWrites200Response>("/com.atproto.repo.applyWrites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoApplyWrites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoApplyWritesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoApplyWrites200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoRepoApplyWrites200Response> ComAtprotoRepoApplyWritesAsync(ComAtprotoRepoApplyWritesRequest comAtprotoRepoApplyWritesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoRepoApplyWrites200Response> localVarResponse = await ComAtprotoRepoApplyWritesWithHttpInfoAsync(comAtprotoRepoApplyWritesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoApplyWritesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoApplyWrites200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoRepoApplyWrites200Response>> ComAtprotoRepoApplyWritesWithHttpInfoAsync(ComAtprotoRepoApplyWritesRequest comAtprotoRepoApplyWritesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoRepoApplyWritesRequest' is set
            if (comAtprotoRepoApplyWritesRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoRepoApplyWritesRequest' when calling ComAtprotoRepoApi->ComAtprotoRepoApplyWrites");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoRepoApplyWritesRequest;

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoApplyWrites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ComAtprotoRepoApplyWrites200Response>("/com.atproto.repo.applyWrites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoApplyWrites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a single new repository record. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoCreateRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoCreateRecord200Response</returns>
        public ComAtprotoRepoCreateRecord200Response ComAtprotoRepoCreateRecord(ComAtprotoRepoCreateRecordRequest comAtprotoRepoCreateRecordRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoRepoCreateRecord200Response> localVarResponse = ComAtprotoRepoCreateRecordWithHttpInfo(comAtprotoRepoCreateRecordRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a single new repository record. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoCreateRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoCreateRecord200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoRepoCreateRecord200Response> ComAtprotoRepoCreateRecordWithHttpInfo(ComAtprotoRepoCreateRecordRequest comAtprotoRepoCreateRecordRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoRepoCreateRecordRequest' is set
            if (comAtprotoRepoCreateRecordRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoRepoCreateRecordRequest' when calling ComAtprotoRepoApi->ComAtprotoRepoCreateRecord");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoRepoCreateRecordRequest;

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoCreateRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoRepoCreateRecord200Response>("/com.atproto.repo.createRecord", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoCreateRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a single new repository record. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoCreateRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoCreateRecord200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoRepoCreateRecord200Response> ComAtprotoRepoCreateRecordAsync(ComAtprotoRepoCreateRecordRequest comAtprotoRepoCreateRecordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoRepoCreateRecord200Response> localVarResponse = await ComAtprotoRepoCreateRecordWithHttpInfoAsync(comAtprotoRepoCreateRecordRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a single new repository record. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoCreateRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoCreateRecord200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoRepoCreateRecord200Response>> ComAtprotoRepoCreateRecordWithHttpInfoAsync(ComAtprotoRepoCreateRecordRequest comAtprotoRepoCreateRecordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoRepoCreateRecordRequest' is set
            if (comAtprotoRepoCreateRecordRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoRepoCreateRecordRequest' when calling ComAtprotoRepoApi->ComAtprotoRepoCreateRecord");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoRepoCreateRecordRequest;

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoCreateRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ComAtprotoRepoCreateRecord200Response>("/com.atproto.repo.createRecord", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoCreateRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a repository record, or ensure it doesn&#39;t exist. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoDeleteRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoDeleteRecord200Response</returns>
        public ComAtprotoRepoDeleteRecord200Response ComAtprotoRepoDeleteRecord(ComAtprotoRepoDeleteRecordRequest comAtprotoRepoDeleteRecordRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoRepoDeleteRecord200Response> localVarResponse = ComAtprotoRepoDeleteRecordWithHttpInfo(comAtprotoRepoDeleteRecordRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete a repository record, or ensure it doesn&#39;t exist. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoDeleteRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoDeleteRecord200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoRepoDeleteRecord200Response> ComAtprotoRepoDeleteRecordWithHttpInfo(ComAtprotoRepoDeleteRecordRequest comAtprotoRepoDeleteRecordRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoRepoDeleteRecordRequest' is set
            if (comAtprotoRepoDeleteRecordRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoRepoDeleteRecordRequest' when calling ComAtprotoRepoApi->ComAtprotoRepoDeleteRecord");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoRepoDeleteRecordRequest;

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoDeleteRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoRepoDeleteRecord200Response>("/com.atproto.repo.deleteRecord", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoDeleteRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a repository record, or ensure it doesn&#39;t exist. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoDeleteRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoDeleteRecord200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoRepoDeleteRecord200Response> ComAtprotoRepoDeleteRecordAsync(ComAtprotoRepoDeleteRecordRequest comAtprotoRepoDeleteRecordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoRepoDeleteRecord200Response> localVarResponse = await ComAtprotoRepoDeleteRecordWithHttpInfoAsync(comAtprotoRepoDeleteRecordRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete a repository record, or ensure it doesn&#39;t exist. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoDeleteRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoDeleteRecord200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoRepoDeleteRecord200Response>> ComAtprotoRepoDeleteRecordWithHttpInfoAsync(ComAtprotoRepoDeleteRecordRequest comAtprotoRepoDeleteRecordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoRepoDeleteRecordRequest' is set
            if (comAtprotoRepoDeleteRecordRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoRepoDeleteRecordRequest' when calling ComAtprotoRepoApi->ComAtprotoRepoDeleteRecord");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoRepoDeleteRecordRequest;

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoDeleteRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ComAtprotoRepoDeleteRecord200Response>("/com.atproto.repo.deleteRecord", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoDeleteRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about an account and repository, including the list of collections. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoDescribeRepo200Response</returns>
        public ComAtprotoRepoDescribeRepo200Response ComAtprotoRepoDescribeRepo(string repo, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoRepoDescribeRepo200Response> localVarResponse = ComAtprotoRepoDescribeRepoWithHttpInfo(repo);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about an account and repository, including the list of collections. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoDescribeRepo200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoRepoDescribeRepo200Response> ComAtprotoRepoDescribeRepoWithHttpInfo(string repo, int operationIndex = 0)
        {
            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'repo' when calling ComAtprotoRepoApi->ComAtprotoRepoDescribeRepo");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "repo", repo));

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoDescribeRepo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoRepoDescribeRepo200Response>("/com.atproto.repo.describeRepo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoDescribeRepo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about an account and repository, including the list of collections. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoDescribeRepo200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoRepoDescribeRepo200Response> ComAtprotoRepoDescribeRepoAsync(string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoRepoDescribeRepo200Response> localVarResponse = await ComAtprotoRepoDescribeRepoWithHttpInfoAsync(repo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about an account and repository, including the list of collections. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoDescribeRepo200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoRepoDescribeRepo200Response>> ComAtprotoRepoDescribeRepoWithHttpInfoAsync(string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'repo' when calling ComAtprotoRepoApi->ComAtprotoRepoDescribeRepo");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "repo", repo));

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoDescribeRepo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComAtprotoRepoDescribeRepo200Response>("/com.atproto.repo.describeRepo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoDescribeRepo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a single record from a repository. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record collection.</param>
        /// <param name="rkey">The Record Key.</param>
        /// <param name="cid">The CID of the version of the record. If not specified, then return the most recent version. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoGetRecord200Response</returns>
        public ComAtprotoRepoGetRecord200Response ComAtprotoRepoGetRecord(string repo, string collection, string rkey, string? cid = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoRepoGetRecord200Response> localVarResponse = ComAtprotoRepoGetRecordWithHttpInfo(repo, collection, rkey, cid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a single record from a repository. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record collection.</param>
        /// <param name="rkey">The Record Key.</param>
        /// <param name="cid">The CID of the version of the record. If not specified, then return the most recent version. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoGetRecord200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoRepoGetRecord200Response> ComAtprotoRepoGetRecordWithHttpInfo(string repo, string collection, string rkey, string? cid = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'repo' when calling ComAtprotoRepoApi->ComAtprotoRepoGetRecord");
            }

            // verify the required parameter 'collection' is set
            if (collection == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'collection' when calling ComAtprotoRepoApi->ComAtprotoRepoGetRecord");
            }

            // verify the required parameter 'rkey' is set
            if (rkey == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'rkey' when calling ComAtprotoRepoApi->ComAtprotoRepoGetRecord");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "repo", repo));
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "collection", collection));
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "rkey", rkey));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoGetRecord";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoRepoGetRecord200Response>("/com.atproto.repo.getRecord", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoGetRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a single record from a repository. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record collection.</param>
        /// <param name="rkey">The Record Key.</param>
        /// <param name="cid">The CID of the version of the record. If not specified, then return the most recent version. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoGetRecord200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoRepoGetRecord200Response> ComAtprotoRepoGetRecordAsync(string repo, string collection, string rkey, string? cid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoRepoGetRecord200Response> localVarResponse = await ComAtprotoRepoGetRecordWithHttpInfoAsync(repo, collection, rkey, cid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a single record from a repository. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record collection.</param>
        /// <param name="rkey">The Record Key.</param>
        /// <param name="cid">The CID of the version of the record. If not specified, then return the most recent version. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoGetRecord200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoRepoGetRecord200Response>> ComAtprotoRepoGetRecordWithHttpInfoAsync(string repo, string collection, string rkey, string? cid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'repo' when calling ComAtprotoRepoApi->ComAtprotoRepoGetRecord");
            }

            // verify the required parameter 'collection' is set
            if (collection == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'collection' when calling ComAtprotoRepoApi->ComAtprotoRepoGetRecord");
            }

            // verify the required parameter 'rkey' is set
            if (rkey == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'rkey' when calling ComAtprotoRepoApi->ComAtprotoRepoGetRecord");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "repo", repo));
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "collection", collection));
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "rkey", rkey));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoGetRecord";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComAtprotoRepoGetRecord200Response>("/com.atproto.repo.getRecord", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoGetRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ComAtprotoRepoImportRepo(int operationIndex = 0)
        {
            ComAtprotoRepoImportRepoWithHttpInfo();
        }

        /// <summary>
        ///  Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BSky.Client.ApiResponse<Object> ComAtprotoRepoImportRepoWithHttpInfo(int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.ipld.car"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoImportRepo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.repo.importRepo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoImportRepo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoRepoImportRepoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ComAtprotoRepoImportRepoWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<Object>> ComAtprotoRepoImportRepoWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.ipld.car"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoImportRepo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/com.atproto.repo.importRepo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoImportRepo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoListMissingBlobs200Response</returns>
        public ComAtprotoRepoListMissingBlobs200Response ComAtprotoRepoListMissingBlobs(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoRepoListMissingBlobs200Response> localVarResponse = ComAtprotoRepoListMissingBlobsWithHttpInfo(limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoListMissingBlobs200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoRepoListMissingBlobs200Response> ComAtprotoRepoListMissingBlobsWithHttpInfo(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoListMissingBlobs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoRepoListMissingBlobs200Response>("/com.atproto.repo.listMissingBlobs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoListMissingBlobs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoListMissingBlobs200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoRepoListMissingBlobs200Response> ComAtprotoRepoListMissingBlobsAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoRepoListMissingBlobs200Response> localVarResponse = await ComAtprotoRepoListMissingBlobsWithHttpInfoAsync(limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 500)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoListMissingBlobs200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoRepoListMissingBlobs200Response>> ComAtprotoRepoListMissingBlobsWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoListMissingBlobs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComAtprotoRepoListMissingBlobs200Response>("/com.atproto.repo.listMissingBlobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoListMissingBlobs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List a range of records in a repository, matching a specific collection. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record type.</param>
        /// <param name="limit">The number of records to return. (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="reverse">Flag to reverse the order of the returned records. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoListRecords200Response</returns>
        public ComAtprotoRepoListRecords200Response ComAtprotoRepoListRecords(string repo, string collection, int? limit = default(int?), string? cursor = default(string?), bool? reverse = default(bool?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoRepoListRecords200Response> localVarResponse = ComAtprotoRepoListRecordsWithHttpInfo(repo, collection, limit, cursor, reverse);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List a range of records in a repository, matching a specific collection. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record type.</param>
        /// <param name="limit">The number of records to return. (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="reverse">Flag to reverse the order of the returned records. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoListRecords200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoRepoListRecords200Response> ComAtprotoRepoListRecordsWithHttpInfo(string repo, string collection, int? limit = default(int?), string? cursor = default(string?), bool? reverse = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'repo' when calling ComAtprotoRepoApi->ComAtprotoRepoListRecords");
            }

            // verify the required parameter 'collection' is set
            if (collection == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'collection' when calling ComAtprotoRepoApi->ComAtprotoRepoListRecords");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "repo", repo));
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "collection", collection));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoListRecords";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoRepoListRecords200Response>("/com.atproto.repo.listRecords", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoListRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List a range of records in a repository, matching a specific collection. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record type.</param>
        /// <param name="limit">The number of records to return. (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="reverse">Flag to reverse the order of the returned records. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoListRecords200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoRepoListRecords200Response> ComAtprotoRepoListRecordsAsync(string repo, string collection, int? limit = default(int?), string? cursor = default(string?), bool? reverse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoRepoListRecords200Response> localVarResponse = await ComAtprotoRepoListRecordsWithHttpInfoAsync(repo, collection, limit, cursor, reverse, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List a range of records in a repository, matching a specific collection. Does not require auth.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record type.</param>
        /// <param name="limit">The number of records to return. (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="reverse">Flag to reverse the order of the returned records. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoListRecords200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoRepoListRecords200Response>> ComAtprotoRepoListRecordsWithHttpInfoAsync(string repo, string collection, int? limit = default(int?), string? cursor = default(string?), bool? reverse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'repo' when calling ComAtprotoRepoApi->ComAtprotoRepoListRecords");
            }

            // verify the required parameter 'collection' is set
            if (collection == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'collection' when calling ComAtprotoRepoApi->ComAtprotoRepoListRecords");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "repo", repo));
            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "collection", collection));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoListRecords";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComAtprotoRepoListRecords200Response>("/com.atproto.repo.listRecords", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoListRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoPutRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoCreateRecord200Response</returns>
        public ComAtprotoRepoCreateRecord200Response ComAtprotoRepoPutRecord(ComAtprotoRepoPutRecordRequest comAtprotoRepoPutRecordRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoRepoCreateRecord200Response> localVarResponse = ComAtprotoRepoPutRecordWithHttpInfo(comAtprotoRepoPutRecordRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoPutRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoCreateRecord200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoRepoCreateRecord200Response> ComAtprotoRepoPutRecordWithHttpInfo(ComAtprotoRepoPutRecordRequest comAtprotoRepoPutRecordRequest, int operationIndex = 0)
        {
            // verify the required parameter 'comAtprotoRepoPutRecordRequest' is set
            if (comAtprotoRepoPutRecordRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoRepoPutRecordRequest' when calling ComAtprotoRepoApi->ComAtprotoRepoPutRecord");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoRepoPutRecordRequest;

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoPutRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoRepoCreateRecord200Response>("/com.atproto.repo.putRecord", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoPutRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoPutRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoCreateRecord200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoRepoCreateRecord200Response> ComAtprotoRepoPutRecordAsync(ComAtprotoRepoPutRecordRequest comAtprotoRepoPutRecordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoRepoCreateRecord200Response> localVarResponse = await ComAtprotoRepoPutRecordWithHttpInfoAsync(comAtprotoRepoPutRecordRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoRepoPutRecordRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoCreateRecord200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoRepoCreateRecord200Response>> ComAtprotoRepoPutRecordWithHttpInfoAsync(ComAtprotoRepoPutRecordRequest comAtprotoRepoPutRecordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoRepoPutRecordRequest' is set
            if (comAtprotoRepoPutRecordRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'comAtprotoRepoPutRecordRequest' when calling ComAtprotoRepoApi->ComAtprotoRepoPutRecord");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = comAtprotoRepoPutRecordRequest;

            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoPutRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ComAtprotoRepoCreateRecord200Response>("/com.atproto.repo.putRecord", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoPutRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComAtprotoRepoUploadBlob200Response</returns>
        public ComAtprotoRepoUploadBlob200Response ComAtprotoRepoUploadBlob(int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ComAtprotoRepoUploadBlob200Response> localVarResponse = ComAtprotoRepoUploadBlobWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComAtprotoRepoUploadBlob200Response</returns>
        public BSky.Client.ApiResponse<ComAtprotoRepoUploadBlob200Response> ComAtprotoRepoUploadBlobWithHttpInfo(int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoUploadBlob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoRepoUploadBlob200Response>("/com.atproto.repo.uploadBlob", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoUploadBlob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoRepoUploadBlob200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoRepoUploadBlob200Response> ComAtprotoRepoUploadBlobAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ComAtprotoRepoUploadBlob200Response> localVarResponse = await ComAtprotoRepoUploadBlobWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoRepoUploadBlob200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ComAtprotoRepoUploadBlob200Response>> ComAtprotoRepoUploadBlobWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ComAtprotoRepoApi.ComAtprotoRepoUploadBlob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ComAtprotoRepoUploadBlob200Response>("/com.atproto.repo.uploadBlob", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoRepoUploadBlob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
