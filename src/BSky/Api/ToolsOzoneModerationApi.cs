/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BSky.Client;
using BSky.Model;

namespace BSky.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolsOzoneModerationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Take a moderation action on an actor.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneModerationEmitEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneModerationDefsModEventView</returns>
        ToolsOzoneModerationDefsModEventView ToolsOzoneModerationEmitEvent(ToolsOzoneModerationEmitEventRequest toolsOzoneModerationEmitEventRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Take a moderation action on an actor.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneModerationEmitEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneModerationDefsModEventView</returns>
        ApiResponse<ToolsOzoneModerationDefsModEventView> ToolsOzoneModerationEmitEventWithHttpInfo(ToolsOzoneModerationEmitEventRequest toolsOzoneModerationEmitEventRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a moderation event.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneModerationDefsModEventViewDetail</returns>
        ToolsOzoneModerationDefsModEventViewDetail ToolsOzoneModerationGetEvent(int id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a moderation event.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneModerationDefsModEventViewDetail</returns>
        ApiResponse<ToolsOzoneModerationDefsModEventViewDetail> ToolsOzoneModerationGetEventWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a record.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneModerationDefsRecordViewDetail</returns>
        ToolsOzoneModerationDefsRecordViewDetail ToolsOzoneModerationGetRecord(string uri, string? cid = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a record.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneModerationDefsRecordViewDetail</returns>
        ApiResponse<ToolsOzoneModerationDefsRecordViewDetail> ToolsOzoneModerationGetRecordWithHttpInfo(string uri, string? cid = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a repository.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneModerationDefsRepoViewDetail</returns>
        ToolsOzoneModerationDefsRepoViewDetail ToolsOzoneModerationGetRepo(string did, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a repository.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneModerationDefsRepoViewDetail</returns>
        ApiResponse<ToolsOzoneModerationDefsRepoViewDetail> ToolsOzoneModerationGetRepoWithHttpInfo(string did, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List moderation events related to a subject.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneModerationQueryEvents200Response</returns>
        ToolsOzoneModerationQueryEvents200Response ToolsOzoneModerationQueryEvents(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List moderation events related to a subject.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneModerationQueryEvents200Response</returns>
        ApiResponse<ToolsOzoneModerationQueryEvents200Response> ToolsOzoneModerationQueryEventsWithHttpInfo(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// View moderation statuses of subjects (record or repo).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="onlyMuted">When set to true, only muted subjects and reporters will be returned. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneModerationQueryStatuses200Response</returns>
        ToolsOzoneModerationQueryStatuses200Response ToolsOzoneModerationQueryStatuses(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), bool? onlyMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// View moderation statuses of subjects (record or repo).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="onlyMuted">When set to true, only muted subjects and reporters will be returned. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneModerationQueryStatuses200Response</returns>
        ApiResponse<ToolsOzoneModerationQueryStatuses200Response> ToolsOzoneModerationQueryStatusesWithHttpInfo(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), bool? onlyMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find repositories based on a search term.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneModerationSearchRepos200Response</returns>
        ToolsOzoneModerationSearchRepos200Response ToolsOzoneModerationSearchRepos(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find repositories based on a search term.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneModerationSearchRepos200Response</returns>
        ApiResponse<ToolsOzoneModerationSearchRepos200Response> ToolsOzoneModerationSearchReposWithHttpInfo(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolsOzoneModerationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Take a moderation action on an actor.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneModerationEmitEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneModerationDefsModEventView</returns>
        System.Threading.Tasks.Task<ToolsOzoneModerationDefsModEventView> ToolsOzoneModerationEmitEventAsync(ToolsOzoneModerationEmitEventRequest toolsOzoneModerationEmitEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Take a moderation action on an actor.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneModerationEmitEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneModerationDefsModEventView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolsOzoneModerationDefsModEventView>> ToolsOzoneModerationEmitEventWithHttpInfoAsync(ToolsOzoneModerationEmitEventRequest toolsOzoneModerationEmitEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a moderation event.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneModerationDefsModEventViewDetail</returns>
        System.Threading.Tasks.Task<ToolsOzoneModerationDefsModEventViewDetail> ToolsOzoneModerationGetEventAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a moderation event.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneModerationDefsModEventViewDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolsOzoneModerationDefsModEventViewDetail>> ToolsOzoneModerationGetEventWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a record.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneModerationDefsRecordViewDetail</returns>
        System.Threading.Tasks.Task<ToolsOzoneModerationDefsRecordViewDetail> ToolsOzoneModerationGetRecordAsync(string uri, string? cid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a record.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneModerationDefsRecordViewDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolsOzoneModerationDefsRecordViewDetail>> ToolsOzoneModerationGetRecordWithHttpInfoAsync(string uri, string? cid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a repository.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneModerationDefsRepoViewDetail</returns>
        System.Threading.Tasks.Task<ToolsOzoneModerationDefsRepoViewDetail> ToolsOzoneModerationGetRepoAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a repository.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneModerationDefsRepoViewDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolsOzoneModerationDefsRepoViewDetail>> ToolsOzoneModerationGetRepoWithHttpInfoAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List moderation events related to a subject.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneModerationQueryEvents200Response</returns>
        System.Threading.Tasks.Task<ToolsOzoneModerationQueryEvents200Response> ToolsOzoneModerationQueryEventsAsync(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List moderation events related to a subject.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneModerationQueryEvents200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolsOzoneModerationQueryEvents200Response>> ToolsOzoneModerationQueryEventsWithHttpInfoAsync(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// View moderation statuses of subjects (record or repo).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="onlyMuted">When set to true, only muted subjects and reporters will be returned. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneModerationQueryStatuses200Response</returns>
        System.Threading.Tasks.Task<ToolsOzoneModerationQueryStatuses200Response> ToolsOzoneModerationQueryStatusesAsync(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), bool? onlyMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// View moderation statuses of subjects (record or repo).
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="onlyMuted">When set to true, only muted subjects and reporters will be returned. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneModerationQueryStatuses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolsOzoneModerationQueryStatuses200Response>> ToolsOzoneModerationQueryStatusesWithHttpInfoAsync(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), bool? onlyMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find repositories based on a search term.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneModerationSearchRepos200Response</returns>
        System.Threading.Tasks.Task<ToolsOzoneModerationSearchRepos200Response> ToolsOzoneModerationSearchReposAsync(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find repositories based on a search term.
        /// </remarks>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneModerationSearchRepos200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolsOzoneModerationSearchRepos200Response>> ToolsOzoneModerationSearchReposWithHttpInfoAsync(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolsOzoneModerationApi : IToolsOzoneModerationApiSync, IToolsOzoneModerationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ToolsOzoneModerationApi : IToolsOzoneModerationApi
    {
        private BSky.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolsOzoneModerationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolsOzoneModerationApi(string basePath)
        {
            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                new BSky.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ToolsOzoneModerationApi(BSky.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BSky.Client.Configuration.MergeConfigurations(
                BSky.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BSky.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BSky.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneModerationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ToolsOzoneModerationApi(BSky.Client.ISynchronousClient client, BSky.Client.IAsynchronousClient asyncClient, BSky.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BSky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BSky.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BSky.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BSky.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BSky.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Take a moderation action on an actor.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneModerationEmitEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneModerationDefsModEventView</returns>
        public ToolsOzoneModerationDefsModEventView ToolsOzoneModerationEmitEvent(ToolsOzoneModerationEmitEventRequest toolsOzoneModerationEmitEventRequest, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ToolsOzoneModerationDefsModEventView> localVarResponse = ToolsOzoneModerationEmitEventWithHttpInfo(toolsOzoneModerationEmitEventRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Take a moderation action on an actor.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneModerationEmitEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneModerationDefsModEventView</returns>
        public BSky.Client.ApiResponse<ToolsOzoneModerationDefsModEventView> ToolsOzoneModerationEmitEventWithHttpInfo(ToolsOzoneModerationEmitEventRequest toolsOzoneModerationEmitEventRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolsOzoneModerationEmitEventRequest' is set
            if (toolsOzoneModerationEmitEventRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'toolsOzoneModerationEmitEventRequest' when calling ToolsOzoneModerationApi->ToolsOzoneModerationEmitEvent");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolsOzoneModerationEmitEventRequest;

            localVarRequestOptions.Operation = "ToolsOzoneModerationApi.ToolsOzoneModerationEmitEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolsOzoneModerationDefsModEventView>("/tools.ozone.moderation.emitEvent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneModerationEmitEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Take a moderation action on an actor.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneModerationEmitEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneModerationDefsModEventView</returns>
        public async System.Threading.Tasks.Task<ToolsOzoneModerationDefsModEventView> ToolsOzoneModerationEmitEventAsync(ToolsOzoneModerationEmitEventRequest toolsOzoneModerationEmitEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ToolsOzoneModerationDefsModEventView> localVarResponse = await ToolsOzoneModerationEmitEventWithHttpInfoAsync(toolsOzoneModerationEmitEventRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Take a moderation action on an actor.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolsOzoneModerationEmitEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneModerationDefsModEventView)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ToolsOzoneModerationDefsModEventView>> ToolsOzoneModerationEmitEventWithHttpInfoAsync(ToolsOzoneModerationEmitEventRequest toolsOzoneModerationEmitEventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolsOzoneModerationEmitEventRequest' is set
            if (toolsOzoneModerationEmitEventRequest == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'toolsOzoneModerationEmitEventRequest' when calling ToolsOzoneModerationApi->ToolsOzoneModerationEmitEvent");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolsOzoneModerationEmitEventRequest;

            localVarRequestOptions.Operation = "ToolsOzoneModerationApi.ToolsOzoneModerationEmitEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolsOzoneModerationDefsModEventView>("/tools.ozone.moderation.emitEvent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneModerationEmitEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about a moderation event.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneModerationDefsModEventViewDetail</returns>
        public ToolsOzoneModerationDefsModEventViewDetail ToolsOzoneModerationGetEvent(int id, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ToolsOzoneModerationDefsModEventViewDetail> localVarResponse = ToolsOzoneModerationGetEventWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about a moderation event.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneModerationDefsModEventViewDetail</returns>
        public BSky.Client.ApiResponse<ToolsOzoneModerationDefsModEventViewDetail> ToolsOzoneModerationGetEventWithHttpInfo(int id, int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "ToolsOzoneModerationApi.ToolsOzoneModerationGetEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ToolsOzoneModerationDefsModEventViewDetail>("/tools.ozone.moderation.getEvent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneModerationGetEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about a moderation event.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneModerationDefsModEventViewDetail</returns>
        public async System.Threading.Tasks.Task<ToolsOzoneModerationDefsModEventViewDetail> ToolsOzoneModerationGetEventAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ToolsOzoneModerationDefsModEventViewDetail> localVarResponse = await ToolsOzoneModerationGetEventWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about a moderation event.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneModerationDefsModEventViewDetail)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ToolsOzoneModerationDefsModEventViewDetail>> ToolsOzoneModerationGetEventWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "ToolsOzoneModerationApi.ToolsOzoneModerationGetEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ToolsOzoneModerationDefsModEventViewDetail>("/tools.ozone.moderation.getEvent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneModerationGetEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about a record.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneModerationDefsRecordViewDetail</returns>
        public ToolsOzoneModerationDefsRecordViewDetail ToolsOzoneModerationGetRecord(string uri, string? cid = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ToolsOzoneModerationDefsRecordViewDetail> localVarResponse = ToolsOzoneModerationGetRecordWithHttpInfo(uri, cid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about a record.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneModerationDefsRecordViewDetail</returns>
        public BSky.Client.ApiResponse<ToolsOzoneModerationDefsRecordViewDetail> ToolsOzoneModerationGetRecordWithHttpInfo(string uri, string? cid = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'uri' when calling ToolsOzoneModerationApi->ToolsOzoneModerationGetRecord");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }

            localVarRequestOptions.Operation = "ToolsOzoneModerationApi.ToolsOzoneModerationGetRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ToolsOzoneModerationDefsRecordViewDetail>("/tools.ozone.moderation.getRecord", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneModerationGetRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about a record.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneModerationDefsRecordViewDetail</returns>
        public async System.Threading.Tasks.Task<ToolsOzoneModerationDefsRecordViewDetail> ToolsOzoneModerationGetRecordAsync(string uri, string? cid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ToolsOzoneModerationDefsRecordViewDetail> localVarResponse = await ToolsOzoneModerationGetRecordWithHttpInfoAsync(uri, cid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about a record.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneModerationDefsRecordViewDetail)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ToolsOzoneModerationDefsRecordViewDetail>> ToolsOzoneModerationGetRecordWithHttpInfoAsync(string uri, string? cid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'uri' when calling ToolsOzoneModerationApi->ToolsOzoneModerationGetRecord");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }

            localVarRequestOptions.Operation = "ToolsOzoneModerationApi.ToolsOzoneModerationGetRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ToolsOzoneModerationDefsRecordViewDetail>("/tools.ozone.moderation.getRecord", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneModerationGetRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about a repository.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneModerationDefsRepoViewDetail</returns>
        public ToolsOzoneModerationDefsRepoViewDetail ToolsOzoneModerationGetRepo(string did, int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ToolsOzoneModerationDefsRepoViewDetail> localVarResponse = ToolsOzoneModerationGetRepoWithHttpInfo(did);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about a repository.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneModerationDefsRepoViewDetail</returns>
        public BSky.Client.ApiResponse<ToolsOzoneModerationDefsRepoViewDetail> ToolsOzoneModerationGetRepoWithHttpInfo(string did, int operationIndex = 0)
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ToolsOzoneModerationApi->ToolsOzoneModerationGetRepo");
            }

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));

            localVarRequestOptions.Operation = "ToolsOzoneModerationApi.ToolsOzoneModerationGetRepo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ToolsOzoneModerationDefsRepoViewDetail>("/tools.ozone.moderation.getRepo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneModerationGetRepo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about a repository.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneModerationDefsRepoViewDetail</returns>
        public async System.Threading.Tasks.Task<ToolsOzoneModerationDefsRepoViewDetail> ToolsOzoneModerationGetRepoAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ToolsOzoneModerationDefsRepoViewDetail> localVarResponse = await ToolsOzoneModerationGetRepoWithHttpInfoAsync(did, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about a repository.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneModerationDefsRepoViewDetail)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ToolsOzoneModerationDefsRepoViewDetail>> ToolsOzoneModerationGetRepoWithHttpInfoAsync(string did, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'did' is set
            if (did == null)
            {
                throw new BSky.Client.ApiException(400, "Missing required parameter 'did' when calling ToolsOzoneModerationApi->ToolsOzoneModerationGetRepo");
            }


            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "did", did));

            localVarRequestOptions.Operation = "ToolsOzoneModerationApi.ToolsOzoneModerationGetRepo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ToolsOzoneModerationDefsRepoViewDetail>("/tools.ozone.moderation.getRepo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneModerationGetRepo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List moderation events related to a subject.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneModerationQueryEvents200Response</returns>
        public ToolsOzoneModerationQueryEvents200Response ToolsOzoneModerationQueryEvents(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ToolsOzoneModerationQueryEvents200Response> localVarResponse = ToolsOzoneModerationQueryEventsWithHttpInfo(types, createdBy, sortDirection, createdAfter, createdBefore, subject, includeAllUserRecords, limit, hasComment, comment, addedLabels, removedLabels, addedTags, removedTags, reportTypes, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List moderation events related to a subject.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneModerationQueryEvents200Response</returns>
        public BSky.Client.ApiResponse<ToolsOzoneModerationQueryEvents200Response> ToolsOzoneModerationQueryEventsWithHttpInfo(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (types != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "types", types));
            }
            if (createdBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "createdBy", createdBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }
            if (includeAllUserRecords != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "includeAllUserRecords", includeAllUserRecords));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (hasComment != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "hasComment", hasComment));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (addedLabels != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "addedLabels", addedLabels));
            }
            if (removedLabels != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "removedLabels", removedLabels));
            }
            if (addedTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "addedTags", addedTags));
            }
            if (removedTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "removedTags", removedTags));
            }
            if (reportTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "reportTypes", reportTypes));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ToolsOzoneModerationApi.ToolsOzoneModerationQueryEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ToolsOzoneModerationQueryEvents200Response>("/tools.ozone.moderation.queryEvents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneModerationQueryEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List moderation events related to a subject.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneModerationQueryEvents200Response</returns>
        public async System.Threading.Tasks.Task<ToolsOzoneModerationQueryEvents200Response> ToolsOzoneModerationQueryEventsAsync(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ToolsOzoneModerationQueryEvents200Response> localVarResponse = await ToolsOzoneModerationQueryEventsWithHttpInfoAsync(types, createdBy, sortDirection, createdAfter, createdBefore, subject, includeAllUserRecords, limit, hasComment, comment, addedLabels, removedLabels, addedTags, removedTags, reportTypes, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List moderation events related to a subject.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneModerationQueryEvents200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ToolsOzoneModerationQueryEvents200Response>> ToolsOzoneModerationQueryEventsWithHttpInfoAsync(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (types != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "types", types));
            }
            if (createdBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "createdBy", createdBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }
            if (includeAllUserRecords != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "includeAllUserRecords", includeAllUserRecords));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (hasComment != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "hasComment", hasComment));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (addedLabels != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "addedLabels", addedLabels));
            }
            if (removedLabels != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "removedLabels", removedLabels));
            }
            if (addedTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "addedTags", addedTags));
            }
            if (removedTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "removedTags", removedTags));
            }
            if (reportTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "reportTypes", reportTypes));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ToolsOzoneModerationApi.ToolsOzoneModerationQueryEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ToolsOzoneModerationQueryEvents200Response>("/tools.ozone.moderation.queryEvents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneModerationQueryEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  View moderation statuses of subjects (record or repo).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="onlyMuted">When set to true, only muted subjects and reporters will be returned. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneModerationQueryStatuses200Response</returns>
        public ToolsOzoneModerationQueryStatuses200Response ToolsOzoneModerationQueryStatuses(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), bool? onlyMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ToolsOzoneModerationQueryStatuses200Response> localVarResponse = ToolsOzoneModerationQueryStatusesWithHttpInfo(subject, comment, reportedAfter, reportedBefore, reviewedAfter, reviewedBefore, includeMuted, onlyMuted, reviewState, ignoreSubjects, lastReviewedBy, sortField, sortDirection, takendown, appealed, limit, tags, excludeTags, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  View moderation statuses of subjects (record or repo).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="onlyMuted">When set to true, only muted subjects and reporters will be returned. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneModerationQueryStatuses200Response</returns>
        public BSky.Client.ApiResponse<ToolsOzoneModerationQueryStatuses200Response> ToolsOzoneModerationQueryStatusesWithHttpInfo(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), bool? onlyMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (reportedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "reportedAfter", reportedAfter));
            }
            if (reportedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "reportedBefore", reportedBefore));
            }
            if (reviewedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "reviewedAfter", reviewedAfter));
            }
            if (reviewedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "reviewedBefore", reviewedBefore));
            }
            if (includeMuted != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "includeMuted", includeMuted));
            }
            if (onlyMuted != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "onlyMuted", onlyMuted));
            }
            if (reviewState != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "reviewState", reviewState));
            }
            if (ignoreSubjects != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "ignoreSubjects", ignoreSubjects));
            }
            if (lastReviewedBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "lastReviewedBy", lastReviewedBy));
            }
            if (sortField != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "sortField", sortField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (takendown != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "takendown", takendown));
            }
            if (appealed != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "appealed", appealed));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "tags", tags));
            }
            if (excludeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "excludeTags", excludeTags));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ToolsOzoneModerationApi.ToolsOzoneModerationQueryStatuses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ToolsOzoneModerationQueryStatuses200Response>("/tools.ozone.moderation.queryStatuses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneModerationQueryStatuses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  View moderation statuses of subjects (record or repo).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="onlyMuted">When set to true, only muted subjects and reporters will be returned. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneModerationQueryStatuses200Response</returns>
        public async System.Threading.Tasks.Task<ToolsOzoneModerationQueryStatuses200Response> ToolsOzoneModerationQueryStatusesAsync(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), bool? onlyMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ToolsOzoneModerationQueryStatuses200Response> localVarResponse = await ToolsOzoneModerationQueryStatusesWithHttpInfoAsync(subject, comment, reportedAfter, reportedBefore, reviewedAfter, reviewedBefore, includeMuted, onlyMuted, reviewState, ignoreSubjects, lastReviewedBy, sortField, sortDirection, takendown, appealed, limit, tags, excludeTags, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  View moderation statuses of subjects (record or repo).
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="onlyMuted">When set to true, only muted subjects and reporters will be returned. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneModerationQueryStatuses200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ToolsOzoneModerationQueryStatuses200Response>> ToolsOzoneModerationQueryStatusesWithHttpInfoAsync(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), bool? onlyMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (reportedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "reportedAfter", reportedAfter));
            }
            if (reportedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "reportedBefore", reportedBefore));
            }
            if (reviewedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "reviewedAfter", reviewedAfter));
            }
            if (reviewedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "reviewedBefore", reviewedBefore));
            }
            if (includeMuted != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "includeMuted", includeMuted));
            }
            if (onlyMuted != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "onlyMuted", onlyMuted));
            }
            if (reviewState != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "reviewState", reviewState));
            }
            if (ignoreSubjects != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "ignoreSubjects", ignoreSubjects));
            }
            if (lastReviewedBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "lastReviewedBy", lastReviewedBy));
            }
            if (sortField != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "sortField", sortField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (takendown != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "takendown", takendown));
            }
            if (appealed != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "appealed", appealed));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "tags", tags));
            }
            if (excludeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("multi", "excludeTags", excludeTags));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ToolsOzoneModerationApi.ToolsOzoneModerationQueryStatuses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ToolsOzoneModerationQueryStatuses200Response>("/tools.ozone.moderation.queryStatuses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneModerationQueryStatuses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Find repositories based on a search term.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolsOzoneModerationSearchRepos200Response</returns>
        public ToolsOzoneModerationSearchRepos200Response ToolsOzoneModerationSearchRepos(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.ApiResponse<ToolsOzoneModerationSearchRepos200Response> localVarResponse = ToolsOzoneModerationSearchReposWithHttpInfo(q, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Find repositories based on a search term.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolsOzoneModerationSearchRepos200Response</returns>
        public BSky.Client.ApiResponse<ToolsOzoneModerationSearchRepos200Response> ToolsOzoneModerationSearchReposWithHttpInfo(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ToolsOzoneModerationApi.ToolsOzoneModerationSearchRepos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ToolsOzoneModerationSearchRepos200Response>("/tools.ozone.moderation.searchRepos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneModerationSearchRepos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Find repositories based on a search term.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolsOzoneModerationSearchRepos200Response</returns>
        public async System.Threading.Tasks.Task<ToolsOzoneModerationSearchRepos200Response> ToolsOzoneModerationSearchReposAsync(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            BSky.Client.ApiResponse<ToolsOzoneModerationSearchRepos200Response> localVarResponse = await ToolsOzoneModerationSearchReposWithHttpInfoAsync(q, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Find repositories based on a search term.
        /// </summary>
        /// <exception cref="BSky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolsOzoneModerationSearchRepos200Response)</returns>
        public async System.Threading.Tasks.Task<BSky.Client.ApiResponse<ToolsOzoneModerationSearchRepos200Response>> ToolsOzoneModerationSearchReposWithHttpInfoAsync(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            BSky.Client.RequestOptions localVarRequestOptions = new BSky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BSky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BSky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(BSky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ToolsOzoneModerationApi.ToolsOzoneModerationSearchRepos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ToolsOzoneModerationSearchRepos200Response>("/tools.ozone.moderation.searchRepos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolsOzoneModerationSearchRepos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
