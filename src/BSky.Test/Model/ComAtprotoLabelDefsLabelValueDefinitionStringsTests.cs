/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using BSky.Model;
using BSky.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace BSky.Test.Model
{
    /// <summary>
    ///  Class for testing ComAtprotoLabelDefsLabelValueDefinitionStrings
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ComAtprotoLabelDefsLabelValueDefinitionStringsTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for ComAtprotoLabelDefsLabelValueDefinitionStrings
        //private ComAtprotoLabelDefsLabelValueDefinitionStrings instance;

        public ComAtprotoLabelDefsLabelValueDefinitionStringsTests()
        {
            // TODO uncomment below to create an instance of ComAtprotoLabelDefsLabelValueDefinitionStrings
            //instance = new ComAtprotoLabelDefsLabelValueDefinitionStrings();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ComAtprotoLabelDefsLabelValueDefinitionStrings
        /// </summary>
        [Fact]
        public void ComAtprotoLabelDefsLabelValueDefinitionStringsInstanceTest()
        {
            // TODO uncomment below to test "IsType" ComAtprotoLabelDefsLabelValueDefinitionStrings
            //Assert.IsType<ComAtprotoLabelDefsLabelValueDefinitionStrings>(instance);
        }

        /// <summary>
        /// Test the property 'Lang'
        /// </summary>
        [Fact]
        public void LangTest()
        {
            // TODO unit test for the property 'Lang'
        }

        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }

        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Fact]
        public void DescriptionTest()
        {
            // TODO unit test for the property 'Description'
        }
    }
}
