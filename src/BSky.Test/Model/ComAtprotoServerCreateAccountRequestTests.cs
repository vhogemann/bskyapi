/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using BSky.Model;
using BSky.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace BSky.Test.Model
{
    /// <summary>
    ///  Class for testing ComAtprotoServerCreateAccountRequest
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ComAtprotoServerCreateAccountRequestTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for ComAtprotoServerCreateAccountRequest
        //private ComAtprotoServerCreateAccountRequest instance;

        public ComAtprotoServerCreateAccountRequestTests()
        {
            // TODO uncomment below to create an instance of ComAtprotoServerCreateAccountRequest
            //instance = new ComAtprotoServerCreateAccountRequest();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ComAtprotoServerCreateAccountRequest
        /// </summary>
        [Fact]
        public void ComAtprotoServerCreateAccountRequestInstanceTest()
        {
            // TODO uncomment below to test "IsType" ComAtprotoServerCreateAccountRequest
            //Assert.IsType<ComAtprotoServerCreateAccountRequest>(instance);
        }

        /// <summary>
        /// Test the property 'Email'
        /// </summary>
        [Fact]
        public void EmailTest()
        {
            // TODO unit test for the property 'Email'
        }

        /// <summary>
        /// Test the property 'Handle'
        /// </summary>
        [Fact]
        public void HandleTest()
        {
            // TODO unit test for the property 'Handle'
        }

        /// <summary>
        /// Test the property 'Did'
        /// </summary>
        [Fact]
        public void DidTest()
        {
            // TODO unit test for the property 'Did'
        }

        /// <summary>
        /// Test the property 'InviteCode'
        /// </summary>
        [Fact]
        public void InviteCodeTest()
        {
            // TODO unit test for the property 'InviteCode'
        }

        /// <summary>
        /// Test the property 'VerificationCode'
        /// </summary>
        [Fact]
        public void VerificationCodeTest()
        {
            // TODO unit test for the property 'VerificationCode'
        }

        /// <summary>
        /// Test the property 'VerificationPhone'
        /// </summary>
        [Fact]
        public void VerificationPhoneTest()
        {
            // TODO unit test for the property 'VerificationPhone'
        }

        /// <summary>
        /// Test the property 'Password'
        /// </summary>
        [Fact]
        public void PasswordTest()
        {
            // TODO unit test for the property 'Password'
        }

        /// <summary>
        /// Test the property 'RecoveryKey'
        /// </summary>
        [Fact]
        public void RecoveryKeyTest()
        {
            // TODO unit test for the property 'RecoveryKey'
        }

        /// <summary>
        /// Test the property 'PlcOp'
        /// </summary>
        [Fact]
        public void PlcOpTest()
        {
            // TODO unit test for the property 'PlcOp'
        }
    }
}
